{"version":3,"file":"absolute-position--z-2TQLH.js","sources":["../../tests/absolute-position.ts"],"sourcesContent":["import type { INode } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport default async function ({ renderer, testRoot }: ExampleSettings) {\n  function createTextNode(container: INode, label?: string | undefined) {\n    const textNode = renderer.createTextNode({\n      x: 10,\n      y: 10,\n      text: `${label ? label + '\\n' : ''}X: ${container.x} => absX: ${\n        container.absX\n      }\\nY: ${container.y} => absY: ${container.absY}\\nMountX: ${\n        container.mountX\n      } | MountY: ${container.mountY}`,\n      parent: container,\n    });\n    return textNode;\n  }\n\n  /* Create a grid to show the values */\n  for (let index = 1; index <= Math.ceil(testRoot.width / 100); index++) {\n    renderer.createNode({\n      x: index * 100,\n      y: 0,\n      width: 2,\n      height: testRoot.height,\n      color: index % 5 ? 0xffffff40 : 0xffffffa0,\n      parent: testRoot,\n    });\n  }\n  for (let index = 1; index <= Math.ceil(testRoot.height / 100); index++) {\n    renderer.createNode({\n      x: 0,\n      y: index * 100,\n      width: testRoot.width,\n      height: 2,\n      color: index % 5 ? 0xffffff40 : 0xffffffa0,\n      parent: testRoot,\n    });\n  }\n\n  const defaultRect = renderer.createNode({\n    x: 100,\n    y: 100,\n    width: 200,\n    height: 200,\n    mountX: 0,\n    color: 0x00ff00ff,\n    parent: testRoot,\n  });\n  createTextNode(defaultRect, 'Default');\n\n  const mount1Rect = renderer.createNode({\n    x: 600,\n    y: 200,\n    width: 200,\n    height: 200,\n    color: 0x0000ffff,\n    mount: 1,\n    parent: testRoot,\n  });\n  createTextNode(mount1Rect, 'Mount 1');\n\n  const scaleRect = renderer.createNode({\n    x: 700,\n    y: 100,\n    width: 200,\n    height: 200,\n    scale: 1.2,\n    color: 0xff0000ff,\n    parent: testRoot,\n  });\n  createTextNode(scaleRect, 'Scale 1.2');\n\n  const rotationPivot0Rect = renderer.createNode({\n    x: 1100,\n    y: 100,\n    width: 200,\n    height: 200,\n    rotation: Math.PI / 6,\n    pivot: 0,\n    color: 0xff0000ff,\n    parent: testRoot,\n  });\n  createTextNode(rotationPivot0Rect, 'Rotation Pivot 0');\n\n  const rotationPivot1Rect = renderer.createNode({\n    x: 1300,\n    y: 100,\n    width: 200,\n    height: 200,\n    rotation: Math.PI / 6,\n    pivot: 1,\n    color: 0xff0000ff,\n    parent: testRoot,\n  });\n  createTextNode(rotationPivot1Rect, 'Rotation Pivot 1');\n\n  const mountX1Rect = renderer.createNode({\n    x: 300,\n    y: 500,\n    width: 200,\n    height: 200,\n    color: 0x0000ffff,\n    mountX: 1,\n    mountY: 0,\n    parent: testRoot,\n  });\n  createTextNode(mountX1Rect, 'MountX 1');\n\n  const mountY1Rect = renderer.createNode({\n    x: 400,\n    y: 600,\n    width: 200,\n    height: 200,\n    color: 0x0000ffff,\n    mountX: 0,\n    mountY: 1,\n    parent: testRoot,\n  });\n  createTextNode(mountY1Rect, 'MountY 1');\n\n  const mountThirdRect = renderer.createNode({\n    x: 700,\n    y: 600,\n    width: 200,\n    height: 200,\n    color: 0x0000ffff,\n    mountX: 0.33,\n    mountY: 0.66,\n    parent: testRoot,\n  });\n  createTextNode(mountThirdRect, 'MountX 0.33 MountY 0.66');\n\n  const mountScaleRect = renderer.createNode({\n    x: 1200,\n    y: 600,\n    width: 200,\n    height: 200,\n    color: 0x0000ffff,\n    mountX: 1,\n    mountY: 0.5,\n    scale: 1.5,\n    parent: testRoot,\n  });\n  createTextNode(mountScaleRect, 'Mount and Scale 1.5');\n}\n"],"names":[],"mappings":"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"}