{"version":3,"file":"text-canvas-BsAoe2jv.js","sources":["../../tests/text-canvas.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nconst Colors = {\n  Black: 0x000000ff,\n  Red: 0xff0000ff,\n  Green: 0x00ff00ff,\n  Blue: 0x0000ffff,\n  Magenta: 0xff00ffff,\n  Gray: 0x7f7f7fff,\n  White: 0xffffffff,\n};\n\nconst randomIntBetween = (from: number, to: number) =>\n  Math.floor(Math.random() * (to - from + 1) + from);\n\n/**\n * Tests that Single-Channel Signed Distance Field (SSDF) fonts are rendered\n * correctly.\n *\n * Text that is thinner than the certified snapshot may indicate that the\n * SSDF font atlas texture was premultiplied before being uploaded to the GPU.\n *\n * @param settings\n * @returns\n */\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n\n  // Set a smaller snapshot area\n  // testRoot.width = 200;\n  // testRoot.height = 200;\n  // testRoot.color = 0xffffffff;\n\n  const nodes: any[] = [];\n\n  const renderNode = (t: string) => {\n    const node = renderer.createTextNode({\n      x: Math.random() * 1900,\n      y: Math.random() * 1080,\n      text: 'CANVAS ' + t,\n      fontFamily: 'sans-serif',\n      parent: testRoot,\n      fontSize: 80,\n    });\n\n    nodes.push(node);\n\n    // pick random color from Colors\n    node.color =\n      Object.values(Colors)[\n        randomIntBetween(0, Object.keys(Colors).length - 1)\n      ] || 0xff0000ff;\n  };\n\n  const spawn = (amount = 1) => {\n    for (let i = 0; i < amount; i++) {\n      renderNode(i.toString());\n    }\n  };\n\n  const despawn = (amount = 100) => {\n    for (let i = 0; i < amount; i++) {\n      const node = nodes.pop();\n      node.destroy();\n    }\n  };\n\n  const move = () => {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      node.x = randomIntBetween(0, 1600);\n      node.y = randomIntBetween(0, 880);\n    }\n  };\n\n  const newColor = () => {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      node.color =\n        Object.values(Colors)[\n          randomIntBetween(0, Object.keys(Colors).length - 1)\n        ] || 0x000000ff;\n    }\n  };\n\n  let animating = false;\n  const animate = () => {\n    animating = !animating;\n\n    const animateNode = (node: any) => {\n      nodes.forEach((node) => {\n        node\n          .animate(\n            {\n              x: randomIntBetween(20, 1740),\n              y: randomIntBetween(20, 900),\n              rotation: Math.random() * Math.PI,\n            },\n            {\n              duration: 3000,\n              easing: 'ease-out',\n            },\n          )\n          .start();\n      });\n    };\n\n    const animateRun = () => {\n      if (animating) {\n        for (let i = 0; i < nodes.length; i++) {\n          animateNode(nodes[i]);\n        }\n        setTimeout(animateRun, 3050);\n      }\n    };\n\n    animateRun();\n  };\n\n  window.addEventListener('keydown', (event) => {\n    if (event.key === 'ArrowUp') {\n      spawn();\n    } else if (event.key === 'ArrowDown') {\n      despawn();\n    } else if (event.key === 'ArrowLeft') {\n      move();\n    } else if (event.key === 'ArrowRight') {\n      move();\n    } else if (event.key === '1') {\n      newColor();\n    } else if (event.key === ' ') {\n      animate();\n    }\n  });\n\n  spawn();\n}\n"],"names":["node"],"mappings":";;;;;;;;;;;;;;;;;;;;AAqBA,MAAM,SAAS;AAAA,EACb,OAAO;AAAA,EACP,KAAK;AAAA,EACL,OAAO;AAAA,EACP,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM;AAAA,EACN,OAAO;AACT;AAEA,MAAM,mBAAmB,CAAC,MAAc,OACtC,KAAK,MAAM,KAAK,OAAA,KAAY,KAAK,OAAO,KAAK,IAAI;AAYnD,SAA8B,KAAK,UAA2B;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AACtD,UAAA,EAAE,UAAU,SAAa,IAAA;AAO/B,UAAM,QAAe,CAAA;AAEf,UAAA,aAAa,CAAC,MAAc;AAC1B,YAAA,OAAO,SAAS,eAAe;AAAA,QACnC,GAAG,KAAK,OAAA,IAAW;AAAA,QACnB,GAAG,KAAK,OAAA,IAAW;AAAA,QACnB,MAAM,YAAY;AAAA,QAClB,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,UAAU;AAAA,MAAA,CACX;AAED,YAAM,KAAK,IAAI;AAGf,WAAK,QACH,OAAO,OAAO,MAAM,EAClB,iBAAiB,GAAG,OAAO,KAAK,MAAM,EAAE,SAAS,CAAC,CACpD,KAAK;AAAA,IAAA;AAGH,UAAA,QAAQ,CAAC,SAAS,MAAM;AAC5B,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AACpB,mBAAA,EAAE,UAAU;AAAA,MACzB;AAAA,IAAA;AAGI,UAAA,UAAU,CAAC,SAAS,QAAQ;AAChC,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,cAAA,OAAO,MAAM;AACnB,aAAK,QAAQ;AAAA,MACf;AAAA,IAAA;AAGF,UAAM,OAAO,MAAM;AACjB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,cAAA,OAAO,MAAM,CAAC;AACf,aAAA,IAAI,iBAAiB,GAAG,IAAI;AAC5B,aAAA,IAAI,iBAAiB,GAAG,GAAG;AAAA,MAClC;AAAA,IAAA;AAGF,UAAM,WAAW,MAAM;AACrB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,cAAA,OAAO,MAAM,CAAC;AACpB,aAAK,QACH,OAAO,OAAO,MAAM,EAClB,iBAAiB,GAAG,OAAO,KAAK,MAAM,EAAE,SAAS,CAAC,CACpD,KAAK;AAAA,MACT;AAAA,IAAA;AAGF,QAAI,YAAY;AAChB,UAAM,UAAU,MAAM;AACpB,kBAAY,CAAC;AAEP,YAAA,cAAc,CAAC,SAAc;AAC3B,cAAA,QAAQ,CAACA,UAAS;AACtBA,gBACG;AAAA,YACC;AAAA,cACE,GAAG,iBAAiB,IAAI,IAAI;AAAA,cAC5B,GAAG,iBAAiB,IAAI,GAAG;AAAA,cAC3B,UAAU,KAAK,OAAO,IAAI,KAAK;AAAA,YACjC;AAAA,YACA;AAAA,cACE,UAAU;AAAA,cACV,QAAQ;AAAA,YACV;AAAA,YAED,MAAM;AAAA,QAAA,CACV;AAAA,MAAA;AAGH,YAAM,aAAa,MAAM;AACvB,YAAI,WAAW;AACb,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACzB,wBAAQ;AAAA,UACtB;AACA,qBAAW,YAAY,IAAI;AAAA,QAC7B;AAAA,MAAA;AAGS;IAAA;AAGN,WAAA,iBAAiB,WAAW,CAAC,UAAU;AACxC,UAAA,MAAM,QAAQ,WAAW;AACrB;MAAA,WACG,MAAM,QAAQ,aAAa;AAC5B;MAAA,WACC,MAAM,QAAQ,aAAa;AAC/B;MAAA,WACI,MAAM,QAAQ,cAAc;AAChC;MAAA,WACI,MAAM,QAAQ,KAAK;AACnB;MAAA,WACA,MAAM,QAAQ,KAAK;AACpB;MACV;AAAA,IAAA,CACD;AAEK;EAAA,CACR;AAAA;"}