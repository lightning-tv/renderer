{"version":3,"file":"text-scaling-legacy-CKmtEFt9.js","sources":["../../tests/text-scaling.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ITextNodeProps, RendererMain } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows, type TestRow } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { waitForLoadedDimensions } from '../common/utils.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    parent: testRoot,\n    title: 'Text Scaling',\n  });\n\n  await paginateTestRows(pageContainer, [\n    ...generateScalingTest(renderer, 'sdf', 'scale'),\n    ...generateScalingTest(renderer, 'sdf', 'scaleX'),\n    ...generateScalingTest(renderer, 'sdf', 'scaleY'),\n    ...generateScalingTest(renderer, 'canvas', 'scale'),\n    ...generateScalingTest(renderer, 'canvas', 'scaleX'),\n    ...generateScalingTest(renderer, 'canvas', 'scaleY'),\n  ]);\n\n  return pageContainer;\n}\n\nconst NODE_PROPS = {\n  x: 100,\n  y: 100,\n  color: 0x000000ff,\n  text: 'xyz',\n  fontFamily: 'Ubuntu',\n  textRendererOverride: 'sdf',\n  fontSize: 50,\n} satisfies Partial<ITextNodeProps>;\n\nfunction generateScalingTest(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n  scaleProp: 'scale' | 'scaleX' | 'scaleY',\n): TestRow[] {\n  return [\n    {\n      title: `Text Node ('${scaleProp}', ${textRenderer}, mount = 0)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n        const dimensions = await waitForLoadedDimensions(baselineNode);\n\n        // Get the position for the center of the container based on mount = 0\n        const position = {\n          x: 100 - dimensions.width / 2,\n          y: 100 - dimensions.height / 2,\n        };\n\n        baselineNode.x = position.x;\n        baselineNode.y = position.y;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            [scaleProp]: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 0,\n            [scaleProp]: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 1,\n            [scaleProp]: 2,\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'width'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'width',\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'both'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            height: dimensions.height,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'both',\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Text Node ('${scaleProp}', ${textRenderer},  mount = 0.5)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          mount: 0.5,\n          x: 100,\n          y: 100,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n\n        const dimensions = await waitForLoadedDimensions(baselineNode);\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            [scaleProp]: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            pivot: 0,\n            [scaleProp]: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            pivot: 1,\n            [scaleProp]: 2,\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'width'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            width: dimensions.width,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'width',\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'both'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            width: dimensions.width,\n            height: dimensions.height,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'both',\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Text Node ('${scaleProp}', ${textRenderer},  mount = 1)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          mount: 1,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n        const dimensions = await waitForLoadedDimensions(baselineNode);\n\n        // Get the position for the center of the container based on mount = 1\n        const position = {\n          x: 100 + dimensions.width / 2,\n          y: 100 + dimensions.height / 2,\n        };\n\n        baselineNode.x = position.x;\n        baselineNode.y = position.y;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            [scaleProp]: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 0,\n            [scaleProp]: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 1,\n            [scaleProp]: 2,\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'width'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'width',\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'both'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            height: dimensions.height,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'both',\n          }),\n        ]);\n      },\n    },\n  ] satisfies TestRow[];\n}\n"],"names":["automation","settings","__async","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","test","sent","snapshotPages","stop","_callee2","renderer","testRoot","pageContainer","_callee2$","_context2","PageContainer","width","appWidth","height","appHeight","parent","title","paginateTestRows","concat","_toConsumableArray","generateScalingTest","abrupt","NODE_PROPS","x","y","color","text","fontFamily","textRendererOverride","fontSize","textRenderer","scaleProp","_this","content","rowNode","_callee3","nodeProps","baselineNode","dimensions","position","_callee3$","_context3","__spreadProps","createTextNode","__spreadValues","waitForLoadedDimensions","constructTestRow","_defineProperty","pivot","_callee4","_callee4$","_context4","mount","_callee5","_callee5$","_context5"],"mappings":"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"}