{"version":3,"file":"resize-mode-legacy-DdTZr0kW.js","sources":["../../assets/testscreen.png","../../assets/testscreen_rotated.png","../../tests/resize-mode.ts"],"sourcesContent":["export default \"__VITE_ASSET__By3e07lc__\"","export default \"__VITE_ASSET__CbghLS40__\"","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport testscreenImg from '../assets/testscreen.png';\nimport testscreenRImg from '../assets/testscreen_rotated.png';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport type { INodeProps } from '@lightningjs/renderer';\nimport { paginateTestRows } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { deg2Rad } from '../../dist/src/utils.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nconst SQUARE_SIZE = 600;\nconst PADDING = 20;\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    title: 'Resizemode Tests',\n  });\n\n  await paginateTestRows(pageContainer, [\n    {\n      title:\n        'Texture Width > Height - resizeMode cover maximum width of node and clipY - 0, 0.5, 1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 3; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE,\n            height: SQUARE_SIZE - 300,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipY: [0, 0.5, 1][i],\n                clipX: [0, 0.5, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING;\n        }\n\n        rowNode.height = SQUARE_SIZE - 300;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width > Height - resizeMode cover maximum height of node and clipX - 0, 0.5, 1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 3; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE,\n            height: SQUARE_SIZE - 200,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipY: [0, 0.5, 1][i],\n                clipX: [0, 0.5, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING;\n        }\n\n        rowNode.height = SQUARE_SIZE - 200;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode cover maximum width of node and clipY - 0, 0.5, 1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 3; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE,\n            height: SQUARE_SIZE - 300,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenRImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipY: [0, 0.5, 1][i],\n                clipX: [0, 0.5, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING;\n        }\n\n        rowNode.height = SQUARE_SIZE - 300;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode cover maximum height of node and clipX - 0,0.25,0.5,0.75,1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 5; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE - 400,\n            height: SQUARE_SIZE - 100,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenRImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipX: [0, 0.25, 0.5, 0.75, 1][i],\n                clipY: [0, 0.25, 0.5, 0.75, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING - 330;\n        }\n\n        rowNode.height = SQUARE_SIZE - 200;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width > Height - resizeMode contain maximum height of node',\n      content: async (rowNode) => {\n        let curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE - 300,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        curX += containerProps.width + PADDING;\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width > Height - resizeMode contain maximum width of node',\n      content: async (rowNode) => {\n        const curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE - 200,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode contain maximum width of node',\n      content: async (rowNode) => {\n        let curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE - 400,\n          height: SQUARE_SIZE - 200,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenRImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        curX += containerProps.width + PADDING;\n\n        const container2 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          mount: 0.5,\n          x: containerProps.width / 2,\n          y: containerProps.height / 2,\n          pivotX: 0.5,\n          rotation: deg2Rad(45),\n          parent: container2,\n        });\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode contain maximum height of node',\n      content: async (rowNode) => {\n        let curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE - 150,\n          height: SQUARE_SIZE - 200,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenRImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        curX += containerProps.width + PADDING;\n\n        const container2 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          mount: 0.5,\n          x: containerProps.width / 2,\n          y: containerProps.height / 2,\n          pivotX: 0.5,\n          rotation: deg2Rad(45),\n          parent: container2,\n        });\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n  ]);\n\n  return pageContainer;\n}\n"],"names":["testscreenImg","testscreenRImg","automation","settings","__async","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","test","sent","snapshotPages","stop","SQUARE_SIZE","PADDING","_callee10","_this","renderer","pageContainer","_callee10$","_context10","PageContainer","width","appWidth","height","appHeight","title","paginateTestRows","content","rowNode","_callee2","curX","i","_callee2$","_context2","createNode","x","texture","createTexture","src","textureOptions","resizeMode","type","clipY","clipX","parent","abrupt","_callee3","_callee3$","_context3","_callee4","_callee4$","_context4","_callee5","_callee5$","_context5","_callee6","containerProps","textureNodeProps","container1","_callee6$","_context6","color","clipping","__spreadProps","__spreadValues","_callee7","_callee7$","_context7","_callee8","container2","_callee8$","_context8","mount","y","pivotX","rotation","deg2Rad","_callee9","_callee9$","_context9"],"mappings":"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"}