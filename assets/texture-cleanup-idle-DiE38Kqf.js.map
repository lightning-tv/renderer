{"version":3,"file":"texture-cleanup-idle-DiE38Kqf.js","sources":["../../tests/texture-cleanup-idle.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INode, RendererMainSettings } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport function customSettings(): Partial<RendererMainSettings> {\n  return {\n    textureMemory: {\n      cleanupInterval: 5000,\n      debugLogging: true,\n    },\n  };\n}\n\nconst COLORS = [\n  0xff0000ff, // Red\n  0x00ff00ff, // Green\n  0x0000ffff, // Blue\n  0xffff00ff, // Yellow\n  0xff00ffff, // Magenta\n  0x00ffffff, // Cyan\n  0xffffffff, // White\n];\n\n/**\n * Function that chooses a random color from the `COLORS` array\n */\nfunction randomColor() {\n  return COLORS[Math.floor(Math.random() * COLORS.length)];\n}\n\nfunction delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport default async function ({ renderer, testRoot }: ExampleSettings) {\n  renderer.createTextNode({\n    x: 0,\n    y: 0,\n    text: 'Idle Texture Memory Cleanup Test',\n    parent: testRoot,\n    fontFamily: 'Ubuntu',\n    fontSize: 60,\n    zIndex: 1,\n  });\n\n  renderer.createTextNode({\n    x: 0,\n    y: 100,\n    width: renderer.settings.appWidth,\n    contain: 'width',\n    text: `This test will create and display a grid of random NoiseTexture nodes and move them off of the bounds margin every second.\n\nThe Texture Memory Manager should perform Idle Texture Cleanup roughly every 5 seconds.\n\nSee docs/ManualRegressionTests.md for more information.\n    `,\n    parent: testRoot,\n    fontFamily: 'Ubuntu',\n    fontSize: 40,\n    zIndex: 1,\n  });\n\n  const screenWidth = renderer.settings.appWidth;\n  const screenHeight = renderer.settings.appHeight;\n  const gridWidth = 4;\n  const gridHeight = 2;\n  const nodeWidth = screenWidth / gridWidth;\n  const nodeHeight = screenHeight / gridHeight;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const curNodes: INode[] = [];\n    // Create a 4x2 grid of nodes\n    for (let i = 0; i < gridWidth; i++) {\n      for (let j = 0; j < gridHeight; j++) {\n        const node = renderer.createNode({\n          x: i * nodeWidth,\n          y: j * nodeHeight,\n          width: nodeWidth,\n          height: nodeHeight,\n          parent: testRoot,\n          color: randomColor(),\n          texture: renderer.createTexture('NoiseTexture', {\n            width: nodeWidth,\n            height: nodeHeight,\n            cacheId: Math.floor(Math.random() * 100000),\n          }),\n          textureOptions: {\n            preload: true,\n          },\n        });\n        curNodes.push(node);\n      }\n    }\n    await delay(1000);\n    // Move all nodes offscreen beyond the bounds margin\n    for (const node of curNodes) {\n      node.x = -screenWidth * 2;\n      node.y = -screenHeight * 2;\n      node.on('freed', (thisNode: INode) => {\n        thisNode.destroy();\n      });\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAsBO,SAAS,iBAAgD;AACvD,SAAA;AAAA,IACL,eAAe;AAAA,MACb,iBAAiB;AAAA,MACjB,cAAc;AAAA,IAChB;AAAA,EAAA;AAEJ;AAEA,MAAM,SAAS;AAAA,EACb;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AACF;AAKA,SAAS,cAAc;AACd,SAAA,OAAO,KAAK,MAAM,KAAK,WAAW,OAAO,MAAM,CAAC;AACzD;AAEA,SAAS,MAAM,IAAY;AACzB,SAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;AACzD;AAEA,SAAA,mBAA+B,IAAyC;AAAzC,SAAA,QAAA,MAAA,WAAA,WAAA,EAAE,UAAU,YAA6B;AACtE,aAAS,eAAe;AAAA,MACtB,GAAG;AAAA,MACH,GAAG;AAAA,MACH,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,QAAQ;AAAA,IAAA,CACT;AAED,aAAS,eAAe;AAAA,MACtB,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO,SAAS,SAAS;AAAA,MACzB,SAAS;AAAA,MACT,MAAM;AAAA,MAMN,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,QAAQ;AAAA,IAAA,CACT;AAEK,UAAA,cAAc,SAAS,SAAS;AAChC,UAAA,eAAe,SAAS,SAAS;AACvC,UAAM,YAAY;AAClB,UAAM,aAAa;AACnB,UAAM,YAAY,cAAc;AAChC,UAAM,aAAa,eAAe;AAGlC,WAAO,MAAM;AACX,YAAM,WAAoB,CAAA;AAE1B,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,iBAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AAC7B,gBAAA,OAAO,SAAS,WAAW;AAAA,YAC/B,GAAG,IAAI;AAAA,YACP,GAAG,IAAI;AAAA,YACP,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,OAAO,YAAY;AAAA,YACnB,SAAS,SAAS,cAAc,gBAAgB;AAAA,cAC9C,OAAO;AAAA,cACP,QAAQ;AAAA,cACR,SAAS,KAAK,MAAM,KAAK,OAAA,IAAW,GAAM;AAAA,YAAA,CAC3C;AAAA,YACD,gBAAgB;AAAA,cACd,SAAS;AAAA,YACX;AAAA,UAAA,CACD;AACD,mBAAS,KAAK,IAAI;AAAA,QACpB;AAAA,MACF;AACA,YAAM,MAAM,GAAI;AAEhB,iBAAW,QAAQ,UAAU;AACtB,aAAA,IAAI,CAAC,cAAc;AACnB,aAAA,IAAI,CAAC,eAAe;AACpB,aAAA,GAAG,SAAS,CAAC,aAAoB;AACpC,mBAAS,QAAQ;AAAA,QAAA,CAClB;AAAA,MACH;AAAA,IACF;AAAA,EAAA,CACF;AAAA;"}