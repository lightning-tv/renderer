{"version":3,"file":"texture-autosize-legacy-D-7Q2-Dm.js","sources":["../../tests/texture-autosize.ts"],"sourcesContent":["import type { ExampleSettings } from '../common/ExampleSettings.js';\nimport robotImg from '../assets/robot/robot.png';\nimport { waitForLoadedDimensions } from '../common/utils.js';\n\nexport async function automation(settings: ExampleSettings) {\n  await test(settings);\n  await settings.snapshot();\n}\n\n/**\n * Tests that text nodes with different contain settings and text renderers\n * are displayed correctly.\n *\n * Press the right arrow key to cycle through the different settings when\n * running in the browser.\n *\n * @param settings\n * @returns\n */\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n\n  // Set a smaller snapshot area\n  testRoot.width = 200;\n  testRoot.height = 250;\n  testRoot.color = 0xffffffff;\n\n  const image = renderer.createNode({\n    mount: 0.5,\n    x: testRoot.width / 2,\n    y: testRoot.height / 4,\n    autosize: true,\n    src: robotImg,\n    parent: testRoot,\n  });\n\n  const dimensions = await waitForLoadedDimensions(image);\n\n  const dimensionsMatch =\n    dimensions.width === image.width && dimensions.height === image.height;\n\n  renderer.createTextNode({\n    mountX: 0.5,\n    mountY: 1,\n    x: testRoot.width / 2,\n    y: testRoot.height,\n    textAlign: 'center',\n    text: dimensionsMatch ? 'Autosize\\nSuccess' : 'Autosize\\nFailure',\n    color: dimensionsMatch ? 0x00ff00ff : 0xff0000ff,\n    fontSize: 50,\n    fontFamily: 'Ubuntu',\n    parent: testRoot,\n  });\n}\n"],"names":["automation","settings","__async","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","test","snapshot","stop","_callee2","renderer","testRoot","image","dimensions","dimensionsMatch","_callee2$","_context2","width","height","color","createNode","mount","x","y","autosize","src","robotImg","parent","waitForLoadedDimensions","sent","createTextNode","mountX","mountY","textAlign","text","fontSize","fontFamily"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAIA,SAAsBA,WAAWC,QAA2B,EAAA;UAAA,OAAAC,OAAA,CAAA,IAAA,EAAA,IAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAA,SAAAC,QAAA;YAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;cAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;gBAAA;kBAAAF,QAAA,CAAAE,IAAA;kBAC1D,OAAMC,KAAKV,QAAQ,CAAA;gBAAA;kBAAAO,QAAA,CAAAE,IAAA;kBACnB,OAAMT,SAASW,QAAS,EAAA;gBAAA;gBAAA;kBAAA,OAAAJ,QAAA,CAAAK,IAAA;cAAA;YAAA,GAAAR,OAAA;UAAA,CAC1B,EAAA;QAAA;QAYA,SAA8BM,KAAKV,QAA2B,EAAA;UAAA,OAAAC,OAAA,CAAA,IAAA,EAAA,IAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAA,SAAAU,SAAA;YAAA,IAAAC,QAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAC,UAAA,EAAAC,eAAA;YAAA,OAAAhB,mBAAA,GAAAG,IAAA,UAAAc,UAAAC,SAAA;cAAA,kBAAAA,SAAA,CAAAZ,IAAA,GAAAY,SAAA,CAAAX,IAAA;gBAAA;kBACpDK,QAAU,GAAad,QAAA,CAAvBc,QAAU,EAAAC,QAAA,GAAaf,QAAA,CAAbe,QAAA;kBAGlBA,QAAA,CAASM,KAAQ,GAAA,GAAA;kBACjBN,QAAA,CAASO,MAAS,GAAA,GAAA;kBAClBP,QAAA,CAASQ,KAAQ,GAAA,UAAA;kBAEXP,KAAA,GAAQF,SAASU,UAAW,CAAA;oBAChCC,KAAO,EAAA,GAAA;oBACPC,CAAA,EAAGX,SAASM,KAAQ,GAAA,CAAA;oBACpBM,CAAA,EAAGZ,SAASO,MAAS,GAAA,CAAA;oBACrBM,QAAU,EAAA,IAAA;oBACVC,GAAK,EAAAC,QAAA;oBACLC,MAAQ,EAAAhB;kBAAA,CACT,CAAA;kBAAAK,SAAA,CAAAX,IAAA;kBAEkB,OAAMuB,uBAAA,CAAwBhB,KAAK,CAAA;gBAAA;kBAAhDC,UAAA,GAAAG,SAAA,CAAAa,IAAA;kBAEAf,kBACJD,UAAW,CAAAI,KAAA,KAAUL,MAAMK,KAAS,IAAAJ,UAAA,CAAWK,WAAWN,KAAM,CAAAM,MAAA;kBAElER,QAAA,CAASoB,cAAe,CAAA;oBACtBC,MAAQ,EAAA,GAAA;oBACRC,MAAQ,EAAA,CAAA;oBACRV,CAAA,EAAGX,SAASM,KAAQ,GAAA,CAAA;oBACpBM,GAAGZ,QAAS,CAAAO,MAAA;oBACZe,SAAW,EAAA,QAAA;oBACXC,IAAA,EAAMpB,kBAAkB,mBAAsB,GAAA,mBAAA;oBAC9CK,KAAA,EAAOL,kBAAkB,QAAa,GAAA,UAAA;oBACtCqB,QAAU,EAAA,EAAA;oBACVC,UAAY,EAAA,QAAA;oBACZT,MAAQ,EAAAhB;kBAAA,CACT,CAAA;gBAAA;gBAAA;kBAAA,OAAAK,SAAA,CAAAR,IAAA;cAAA;YAAA,GAAAC,QAAA;UAAA,CACH,EAAA;QAAA;;;;"}