{"version":3,"file":"constructTestRow-Dh7ZSvxW.js","sources":["../../common/constructTestRow.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INode, RendererMain } from '@lightningjs/renderer';\nimport { waitForLoadedDimensions } from './utils.js';\n\nconst CONTAINER_SIZE = 200;\nconst PADDING = 20;\n\nexport interface TestRowOptions {\n  renderer: RendererMain;\n  rowNode: INode;\n  containerSize?: number;\n  padding?: number;\n}\n\nexport async function constructTestRow(\n  options: TestRowOptions,\n  testNodes: (INode | string)[],\n): Promise<number> {\n  const {\n    renderer,\n    rowNode,\n    containerSize = CONTAINER_SIZE,\n    padding = PADDING,\n  } = options;\n  let curX = 0;\n  const curY = 0;\n  for (const testNode of testNodes) {\n    if (typeof testNode === 'string') {\n      const dimensions = await waitForLoadedDimensions(\n        renderer.createTextNode({\n          mountY: 0.5,\n          x: curX,\n          y: containerSize / 2,\n          text: testNode,\n          parent: rowNode,\n        }),\n      );\n      curX += dimensions.width + padding;\n    } else {\n      const container = renderer.createNode({\n        parent: rowNode,\n        color: 0xffffffff,\n        width: containerSize,\n        height: containerSize,\n        clipping: true,\n        x: curX,\n        y: curY,\n      });\n      testNode.parent = container;\n      curX += containerSize + padding;\n    }\n  }\n  return curY + containerSize;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,MAAM,iBAAiB;AACvB,MAAM,UAAU;AASM,SAAA,iBACpB,SACA,WACiB;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AACX,UAAA;AAAA,MACJ;AAAA,MACA;AAAA,MACA,gBAAgB;AAAA,MAChB,UAAU;AAAA,IACR,IAAA;AACJ,QAAI,OAAO;AACX,UAAM,OAAO;AACb,eAAW,YAAY,WAAW;AAC5B,UAAA,OAAO,aAAa,UAAU;AAChC,cAAM,aAAa,MAAM;AAAA,UACvB,SAAS,eAAe;AAAA,YACtB,QAAQ;AAAA,YACR,GAAG;AAAA,YACH,GAAG,gBAAgB;AAAA,YACnB,MAAM;AAAA,YACN,QAAQ;AAAA,UAAA,CACT;AAAA,QAAA;AAEH,gBAAQ,WAAW,QAAQ;AAAA,MAAA,OACtB;AACC,cAAA,YAAY,SAAS,WAAW;AAAA,UACpC,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,GAAG;AAAA,UACH,GAAG;AAAA,QAAA,CACJ;AACD,iBAAS,SAAS;AAClB,gBAAQ,gBAAgB;AAAA,MAC1B;AAAA,IACF;AACA,WAAO,OAAO;AAAA,EAAA,CAChB;AAAA;"}