{"version":3,"file":"text-layout-consistency-nX7u-DSR.js","sources":["../../tests/text-layout-consistency.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { getLoremIpsum } from '../common/LoremIpsum.js';\n\nexport async function automation(settings: ExampleSettings) {\n  const next = await test(settings);\n  await settings.snapshot();\n  while (await next()) {\n    await settings.snapshot();\n  }\n}\n\n/**\n * This test is to ensure that the canvas text renderer and the sdf text\n * renderer are as consistent as possible in their layout. Two text nodes are\n * created with the same text, font size, and font family. The only difference\n * is that one uses the canvas text renderer (red text) and the other uses the\n * sdf text renderer (blue text). The width of the text nodes\n * are changed during each step.\n *\n * Unfortunately, the canvas text renderer horitzonal layout will vary between\n * browsers and platforms. The only thing the Renderer can guarantee is that\n * the vertical baseline layout will be consistent.\n *\n * Acceptable results: The baselines of the two text nodes overlap precisely.\n * Horizontal layout may vary.\n *\n * Ideal results: All text appears purple because both the horizontal and\n * vertical layout are consistent.\n *\n * Press the right arrow key to cycle through the different widths\n *\n * @param param0\n * @returns\n */\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const fontFamily = 'Ubuntu';\n  const text = getLoremIpsum(1200);\n  const fontSize = 20;\n  const yPos = 0;\n  testRoot.width = 500;\n  testRoot.height = 500;\n  testRoot.clipping = true;\n  testRoot.color = 0xffffffff;\n\n  /**\n   * Light Green Background\n   */\n  const background = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: testRoot.width,\n    height: testRoot.height,\n    color: 0x00ff0020,\n    parent: testRoot,\n  });\n  const canvasText = renderer.createTextNode({\n    y: yPos,\n    width: testRoot.width,\n    text,\n    fontSize,\n    fontFamily,\n    contain: 'width',\n    color: 0xff0000ff,\n    textRendererOverride: 'canvas',\n    parent: testRoot,\n  });\n  const sdfText = renderer.createTextNode({\n    y: yPos,\n    width: testRoot.width,\n    text,\n    fontSize,\n    fontFamily,\n    contain: 'width',\n    color: 0x0000ff77,\n    parent: testRoot,\n    zIndex: 3,\n  });\n  const indexInfo = renderer.createTextNode({\n    x: testRoot.width,\n    y: testRoot.height,\n    mount: 1,\n    width: 0,\n    height: 0,\n    color: 0x000000ff,\n    fontFamily: 'Ubuntu',\n    fontSize: 20,\n    text: '1',\n    parent: testRoot,\n  });\n\n  let i = 0;\n  const mutations = [\n    () => {\n      canvasText.width = sdfText.width = background.width = 250;\n    },\n    () => {\n      canvasText.width = sdfText.width = background.width = 350;\n    },\n    () => {\n      canvasText.width = sdfText.width = background.width = 500;\n    },\n  ];\n\n  /**\n   * Run the next mutation in the list\n   *\n   * @param idx\n   * @returns `false` if loop is set to false and we've already gone through all mutations. Otherwise `true`.\n   */\n  async function next(loop = false, idx = i + 1): Promise<boolean> {\n    if (idx > mutations.length - 1) {\n      if (!loop) {\n        return false;\n      }\n      idx = 0;\n    }\n    i = idx;\n    mutations[i]?.();\n    indexInfo.text = (i + 1).toString();\n    return true;\n  }\n  await next(false, 0);\n\n  window.addEventListener('keydown', (event) => {\n    // When right arrow is pressed, call next\n    if (event.key === 'ArrowRight') {\n      next(true).catch(console.error);\n    }\n  });\n\n  return next;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,SAAsB,WAAW,UAA2B;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AACpD,UAAA,OAAO,MAAM,KAAK,QAAQ;AAChC,UAAM,SAAS;AACR,WAAA,MAAM,QAAQ;AACnB,YAAM,SAAS;IACjB;AAAA,EAAA,CACF;AAAA;AAyBA,SAA8B,KAAK,IAAyC;AAAzC,SAAA,QAAA,MAAA,WAAA,WAAA,EAAE,UAAU,YAA6B;AAC1E,UAAM,aAAa;AACb,UAAA,OAAO,cAAc,IAAI;AAC/B,UAAM,WAAW;AACjB,UAAM,OAAO;AACb,aAAS,QAAQ;AACjB,aAAS,SAAS;AAClB,aAAS,WAAW;AACpB,aAAS,QAAQ;AAKX,UAAA,aAAa,SAAS,WAAW;AAAA,MACrC,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO,SAAS;AAAA,MAChB,QAAQ,SAAS;AAAA,MACjB,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AACK,UAAA,aAAa,SAAS,eAAe;AAAA,MACzC,GAAG;AAAA,MACH,OAAO,SAAS;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,OAAO;AAAA,MACP,sBAAsB;AAAA,MACtB,QAAQ;AAAA,IAAA,CACT;AACK,UAAA,UAAU,SAAS,eAAe;AAAA,MACtC,GAAG;AAAA,MACH,OAAO,SAAS;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,IAAA,CACT;AACK,UAAA,YAAY,SAAS,eAAe;AAAA,MACxC,GAAG,SAAS;AAAA,MACZ,GAAG,SAAS;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,IAAA,CACT;AAED,QAAI,IAAI;AACR,UAAM,YAAY;AAAA,MAChB,MAAM;AACJ,mBAAW,QAAQ,QAAQ,QAAQ,WAAW,QAAQ;AAAA,MACxD;AAAA,MACA,MAAM;AACJ,mBAAW,QAAQ,QAAQ,QAAQ,WAAW,QAAQ;AAAA,MACxD;AAAA,MACA,MAAM;AACJ,mBAAW,QAAQ,QAAQ,QAAQ,WAAW,QAAQ;AAAA,MACxD;AAAA,IAAA;AASF,aAAe,OAAkD;AAAA,aAAA,QAAA,MAAA,WAAA,WAA7C,OAAO,OAAO,MAAM,IAAI,GAAqB;AAhInE,YAAA;AAiIQ,YAAA,MAAM,UAAU,SAAS,GAAG;AAC9B,cAAI,CAAC,MAAM;AACF,mBAAA;AAAA,UACT;AACM,gBAAA;AAAA,QACR;AACI,YAAA;AACJ,SAAA,KAAA,UAAU,CAAV,MAAA,OAAA,SAAA,GAAA,KAAA,SAAA;AACU,kBAAA,QAAQ,IAAI,GAAG,SAAS;AAC3B,eAAA;AAAA,MAAA,CACT;AAAA,IAAA;AACM,UAAA,KAAK,OAAO,CAAC;AAEZ,WAAA,iBAAiB,WAAW,CAAC,UAAU;AAExC,UAAA,MAAM,QAAQ,cAAc;AAC9B,aAAK,IAAI,EAAE,MAAM,QAAQ,KAAK;AAAA,MAChC;AAAA,IAAA,CACD;AAEM,WAAA;AAAA,EAAA,CACT;AAAA;"}