{"version":3,"file":"text-vertical-align-DRUwy4yx.js","sources":["../../tests/text-vertical-align.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  ITextNode,\n  ITextNodeProps,\n  RendererMain,\n} from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows, type TestRow } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    title: 'Text Vertical Align',\n  });\n\n  await paginateTestRows(pageContainer, [\n    ...generateVerticalAlignTest(renderer, 'sdf'),\n    null,\n    ...generateVerticalAlignTest(renderer, 'canvas'),\n  ]);\n\n  return pageContainer;\n}\n\nconst NODE_PROPS = {\n  color: 0x000000ff,\n  fontFamily: 'Ubuntu',\n  textRendererOverride: 'sdf',\n  fontSize: 50,\n  lineHeight: 70,\n} satisfies Partial<ITextNodeProps>;\n\nconst CONTAINER_SIZE = 200;\n\nfunction getSquare(renderer: RendererMain, node: ITextNode) {\n  const wrapper = renderer.createNode({\n    width: CONTAINER_SIZE,\n    height: CONTAINER_SIZE,\n  });\n  const line1 = renderer.createNode({\n    width: CONTAINER_SIZE,\n    height: 1,\n    color: 0x00ff00ff,\n    y: NODE_PROPS.lineHeight,\n  });\n  line1.parent = wrapper;\n  const line2 = renderer.createNode({\n    width: CONTAINER_SIZE,\n    height: 1,\n    color: 0x00ff00ff,\n    y: NODE_PROPS.lineHeight * 2,\n  });\n  line2.parent = wrapper;\n  node.parent = wrapper;\n  return wrapper;\n}\n\nfunction generateVerticalAlignTest(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n): TestRow[] {\n  return [\n    {\n      title: `One Line ('verticalAlign', ${textRenderer}, fontSize = 50, lineHeight = 70)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          text: 'txyz',\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n\n        return await constructTestRow({ renderer, rowNode }, [\n          'verticalAlign: middle\\n(default)\\n->',\n          getSquare(renderer, baselineNode),\n          'top ->',\n          getSquare(\n            renderer,\n            renderer.createTextNode({\n              ...nodeProps,\n              verticalAlign: 'top',\n            }),\n          ),\n          'bottom ->',\n          getSquare(\n            renderer,\n            renderer.createTextNode({\n              ...nodeProps,\n              verticalAlign: 'bottom',\n            }),\n          ),\n        ]);\n      },\n    },\n    {\n      title: `Two Lines ('verticalAlign', ${textRenderer}, fontSize = 50, lineHeight = 70)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          text: 'abcd\\ntxyz',\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n\n        return await constructTestRow({ renderer, rowNode }, [\n          'verticalAlign: middle\\n(default)\\n->',\n          getSquare(renderer, baselineNode),\n          'top ->',\n          getSquare(\n            renderer,\n            renderer.createTextNode({\n              ...nodeProps,\n              verticalAlign: 'top',\n            }),\n          ),\n          'bottom ->',\n          getSquare(\n            renderer,\n            renderer.createTextNode({\n              ...nodeProps,\n              verticalAlign: 'bottom',\n            }),\n          ),\n        ]);\n      },\n    },\n  ] satisfies TestRow[];\n}\n"],"names":[],"mappings":"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"}