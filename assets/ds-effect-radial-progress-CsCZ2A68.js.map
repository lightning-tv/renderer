{"version":3,"file":"ds-effect-radial-progress-CsCZ2A68.js","sources":["../../tests/ds-effect-radial-progress.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot single page\n  await test(settings);\n  await settings.snapshot();\n}\n\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const degToRad = (deg: number) => {\n    return (Math.PI / 180) * deg;\n  };\n\n  const t1 = renderer.createNode({\n    x: 200,\n    y: 100,\n    width: 250,\n    height: 250,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.6,\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t2 = renderer.createNode({\n    x: 500,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t3 = renderer.createNode({\n    x: 800,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n            range: degToRad(180),\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n            range: degToRad(180),\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t4 = renderer.createNode({\n    x: 1100,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t5 = renderer.createNode({\n    x: 1400,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n            width: 30,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n            width: 30,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  console.log('ready!');\n}\n"],"names":[],"mappings":"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"}