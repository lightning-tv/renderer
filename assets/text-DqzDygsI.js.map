{"version":3,"file":"text-DqzDygsI.js","sources":["../../tests/text.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type ITextNodeProps,\n  type TextRendererMap,\n  type TrFontFaceMap,\n  type NodeLoadedEventHandler,\n} from '@lightningjs/renderer';\nimport { getLoremIpsum } from '../common/LoremIpsum.js';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport {\n  clearStorage,\n  loadStorage,\n  saveStorage,\n} from '../common/LocalStorage.js';\n\nconst FONT_FAMILY = 'Ubuntu';\nconst HEADER_SIZE = 45;\nconst FONT_SIZE = 40;\n\nconst initialMutableProps: Partial<ITextNodeProps> = {\n  x: 0,\n  y: 0,\n  fontFamily: FONT_FAMILY,\n  fontSize: FONT_SIZE,\n  color: 0x000000ff,\n  debug: {\n    sdfShaderDebug: false,\n  },\n};\n\nexport const Colors = {\n  Black: 0x000000ff,\n  Red: 0xff0000ff,\n  Green: 0x00ff00ff,\n  Blue: 0x0000ffff,\n  Magenta: 0xff00ffff,\n  Gray: 0x7f7f7fff,\n  White: 0xffffffff,\n};\n\ninterface LocalStorageData {\n  mutableProps: Partial<ITextNodeProps>;\n  curMode: number;\n  moveStep: number;\n  curColorIdx: number;\n}\n\nconst colors = Object.values(Colors);\n\nexport default async function ({\n  testName,\n  renderer,\n  testRoot,\n}: ExampleSettings) {\n  const savedState = loadStorage<LocalStorageData>(testName);\n\n  let curMode = savedState?.curMode || 0;\n  let moveStep = savedState?.moveStep || 1;\n  let curColorIdx = savedState?.curColorIdx || 0;\n\n  const modes = [\n    'canvas',\n    'ssdf',\n    'msdf',\n    'canvas+ssdf',\n    'canvas+msdf',\n    'ssdf+msdf',\n  ] as const;\n\n  const text = getLoremIpsum();\n\n  const initialProps: Partial<ITextNodeProps> = {\n    ...(savedState?.mutableProps || initialMutableProps),\n    fontFamily: FONT_FAMILY,\n    contain: 'both',\n    scrollable: true,\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    text,\n  };\n\n  const msdfTextNode = renderer.createTextNode({\n    ...initialProps,\n    ...getFontProps('msdf'),\n    zIndex: 1,\n    parent: testRoot,\n  });\n\n  const ssdfTextNode = renderer.createTextNode({\n    ...initialProps,\n    ...getFontProps('ssdf'),\n    zIndex: 2,\n    parent: testRoot,\n  });\n\n  const canvasTextNode = renderer.createTextNode({\n    ...initialProps,\n    ...getFontProps('web'),\n    zIndex: 3,\n    parent: testRoot,\n  });\n\n  const statusNode = renderer.createTextNode({\n    text: '',\n    fontSize: 30,\n    offsetY: -5,\n    zIndex: 100,\n    parent: testRoot,\n  });\n\n  statusNode.on('loaded', ((target: any, { dimensions }) => {\n    statusNode.x = renderer.settings.appWidth - dimensions.width;\n  }) satisfies NodeLoadedEventHandler);\n\n  function updateStatus() {\n    const modeName = modes[curMode];\n    if (!modeName) return;\n    statusNode.text = [\n      `mode: ${modeName}`,\n      `moveStep: ${moveStep}`,\n      `x: ${msdfTextNode.x}`,\n      `y: ${msdfTextNode.y}`,\n      `scrollY: ${msdfTextNode.scrollY}`,\n      `offsetY: ${msdfTextNode.offsetY}`,\n      `fontSize: ${Number(msdfTextNode.fontSize).toFixed(1)}`,\n      `letterSpacing: ${msdfTextNode.letterSpacing}`,\n      `color: ${curColorIdx}`,\n      `fontFamily: ${msdfTextNode.fontFamily}`,\n      `pixelRatio: TBD`,\n      `fps: TBD`,\n    ].join('\\n');\n  }\n\n  function setMode(mode: number) {\n    if (mode < 0) {\n      mode = modes.length - 1;\n    } else if (mode >= modes.length) {\n      mode = 0;\n    }\n    curMode = mode;\n    const modeName = modes[curMode];\n    if (!modeName) return;\n    canvasTextNode.alpha = 0;\n    msdfTextNode.alpha = 0;\n    ssdfTextNode.alpha = 0;\n\n    // Get cur color\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const curColor = colors[curColorIdx]!;\n\n    if (modeName === 'canvas') {\n      canvasTextNode.color = curColor;\n      canvasTextNode.alpha = 1;\n    } else if (modeName === 'ssdf') {\n      ssdfTextNode.color = curColor;\n      ssdfTextNode.alpha = 1;\n    } else if (modeName === 'msdf') {\n      msdfTextNode.color = curColor;\n      msdfTextNode.alpha = 1;\n    } else if (modeName === 'canvas+ssdf') {\n      canvasTextNode.color = Colors.Green;\n      ssdfTextNode.color = curColor;\n      canvasTextNode.alpha = 1;\n      ssdfTextNode.alpha = 1;\n    } else if (modeName === 'canvas+msdf') {\n      canvasTextNode.color = Colors.Green;\n      msdfTextNode.color = curColor;\n      canvasTextNode.alpha = 1;\n      msdfTextNode.alpha = 1;\n    } else if (modeName === 'ssdf+msdf') {\n      ssdfTextNode.color = Colors.Green;\n      msdfTextNode.color = curColor;\n      ssdfTextNode.alpha = 1;\n      msdfTextNode.alpha = 1;\n    }\n  }\n\n  window.addEventListener('keydown', (e) => {\n    let changedState = false;\n    // If Command key is pressed do nothing\n    // Prevents Command+R causing a change of state\n    if (e.metaKey) return;\n\n    if (e.code === 'Escape') {\n      // Clear storage and reload\n      // This is the only key we return early and cause a full page reload.\n      clearStorage(testName);\n      // For some reason we need to wait a tick for the reload to actually happen (on chrome at least)\n      setTimeout(() => {\n        window.location.reload();\n      }, 0);\n      return;\n    } else if (e.code === 'ArrowLeft') {\n      setMode(curMode - 1);\n      changedState = true;\n    } else if (e.code === 'ArrowRight') {\n      setMode(curMode + 1);\n      changedState = true;\n    } else if (e.code === 'ArrowUp') {\n      canvasTextNode.scrollY -= moveStep;\n      ssdfTextNode.scrollY -= moveStep;\n      msdfTextNode.scrollY -= moveStep;\n      changedState = true;\n    } else if (e.code === 'ArrowDown') {\n      canvasTextNode.scrollY += moveStep;\n      ssdfTextNode.scrollY += moveStep;\n      msdfTextNode.scrollY += moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyQ') {\n      moveStep--;\n      changedState = true;\n    } else if (e.code === 'KeyE') {\n      moveStep++;\n      changedState = true;\n    } else if (e.code === 'KeyA') {\n      canvasTextNode.x -= moveStep;\n      ssdfTextNode.x -= moveStep;\n      msdfTextNode.x -= moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyW') {\n      canvasTextNode.y -= moveStep;\n      ssdfTextNode.y -= moveStep;\n      msdfTextNode.y -= moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyS') {\n      canvasTextNode.y += moveStep;\n      ssdfTextNode.y += moveStep;\n      msdfTextNode.y += moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyD') {\n      canvasTextNode.x += moveStep;\n      ssdfTextNode.x += moveStep;\n      msdfTextNode.x += moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyR') {\n      canvasTextNode.fontSize++;\n      ssdfTextNode.fontSize++;\n      msdfTextNode.fontSize++;\n      changedState = true;\n    } else if (e.code === 'KeyF') {\n      canvasTextNode.fontSize--;\n      ssdfTextNode.fontSize--;\n      msdfTextNode.fontSize--;\n      changedState = true;\n    } else if (e.code === 'KeyT') {\n      canvasTextNode.letterSpacing += 1;\n      ssdfTextNode.letterSpacing += 1;\n      msdfTextNode.letterSpacing += 1;\n      changedState = true;\n    } else if (e.code === 'KeyG') {\n      canvasTextNode.letterSpacing -= 1;\n      ssdfTextNode.letterSpacing -= 1;\n      msdfTextNode.letterSpacing -= 1;\n      changedState = true;\n    } else if (e.code === 'KeyZ') {\n      // Decrement color\n      curColorIdx--;\n\n      if (curColorIdx < 0) {\n        curColorIdx = colors.length - 1;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const color = colors[curColorIdx]!;\n      canvasTextNode.color = color;\n      ssdfTextNode.color = color;\n      msdfTextNode.color = color;\n      changedState = true;\n    } else if (e.code === 'KeyX') {\n      // Increment color\n      curColorIdx++;\n\n      if (curColorIdx >= colors.length) {\n        curColorIdx = 0;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const color = colors[curColorIdx]!;\n      canvasTextNode.color = color;\n      ssdfTextNode.color = color;\n      msdfTextNode.color = color;\n      changedState = true;\n    } else if (e.code === 'KeyC') {\n      // canvasTextNode.offsetY += 1;\n      ssdfTextNode.offsetY -= 1;\n      msdfTextNode.offsetY -= 1;\n      changedState = true;\n    } else if (e.code === 'KeyV') {\n      // canvasTextNode.offsetY += 1;\n      ssdfTextNode.offsetY += 1;\n      msdfTextNode.offsetY += 1;\n      changedState = true;\n    } else if (e.code === 'Slash') {\n      // Toggle SDF shader debug\n      canvasTextNode.debug = {\n        ...canvasTextNode.debug,\n        sdfShaderDebug: !canvasTextNode.debug.sdfShaderDebug,\n      };\n      ssdfTextNode.debug = {\n        ...ssdfTextNode.debug,\n        sdfShaderDebug: !ssdfTextNode.debug.sdfShaderDebug,\n      };\n      msdfTextNode.debug = {\n        ...msdfTextNode.debug,\n        sdfShaderDebug: !msdfTextNode.debug.sdfShaderDebug,\n      };\n      changedState = true;\n    }\n\n    if (changedState) {\n      updateStatus();\n\n      // Save state in local storage\n      saveStorage(testName, {\n        curMode: curMode,\n        moveStep: moveStep,\n        curColorIdx: curColorIdx,\n        mutableProps: {\n          x: canvasTextNode.x,\n          y: canvasTextNode.y,\n          fontSize: canvasTextNode.fontSize,\n          letterSpacing: canvasTextNode.letterSpacing,\n          scrollY: canvasTextNode.scrollY,\n          // debug: canvasTextNode.debug,\n        },\n      });\n    }\n  });\n  setMode(curMode);\n  updateStatus();\n}\n\n/**\n * Added offset to the Y position of the text to account for the\n * difference in canvas and SDF text rendering\n */\nconst sdfOffsetY = 6;\n\nfunction getFontProps(fontType: keyof TrFontFaceMap): {\n  fontFamily: string;\n  offsetY: number;\n  textRendererOverride: keyof TextRendererMap;\n} {\n  if (fontType === 'msdf') {\n    return {\n      fontFamily: `${FONT_FAMILY}`,\n      offsetY: sdfOffsetY,\n      textRendererOverride: 'sdf',\n    };\n  } else if (fontType === 'ssdf') {\n    return {\n      fontFamily: `${FONT_FAMILY}-ssdf`,\n      offsetY: sdfOffsetY,\n      textRendererOverride: 'sdf',\n    };\n  }\n  return {\n    fontFamily: `${FONT_FAMILY}`,\n    offsetY: 0,\n    textRendererOverride: 'canvas',\n  };\n}\n"],"names":["text"],"mappings":"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"}