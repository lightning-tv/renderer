;
(function () {
  function _superPropGet(t, e, r, o) { var p = _get(_getPrototypeOf(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
  function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
  function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
  function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
  function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _possibleConstructorReturn(t, e) { if (e && ("object" == typeof e || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
  function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
  function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
  function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
  function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
  function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
  function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
  function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
  function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
  function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
  function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
  function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
  function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n3 = 0, F = function F() {}; return { s: F, n: function n() { return _n3 >= r.length ? { done: !0 } : { done: !1, value: r[_n3++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  System.register([], function (exports, module) {
    'use strict';

    return {
      execute: function execute() {
        var _LinearGradientEffect, _RadialGradientEffect, _resolvedGlobal$docum;
        exports({
          a: assertTruthy,
          d: deg2Rad,
          m: mergeColorAlpha
        });
        false && function polyfill() {
          var relList = document.createElement("link").relList;
          if (relList && relList.supports && relList.supports("modulepreload")) {
            return;
          }
          var _iterator = _createForOfIteratorHelper(document.querySelectorAll('link[rel="modulepreload"]')),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var link = _step.value;
              processPreload(link);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          new MutationObserver(function (mutations) {
            var _iterator2 = _createForOfIteratorHelper(mutations),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var mutation = _step2.value;
                if (mutation.type !== "childList") {
                  continue;
                }
                var _iterator3 = _createForOfIteratorHelper(mutation.addedNodes),
                  _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var node = _step3.value;
                    if (node.tagName === "LINK" && node.rel === "modulepreload") processPreload(node);
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }).observe(document, {
            childList: true,
            subtree: true
          });
          function getFetchOpts(link) {
            var fetchOpts = {};
            if (link.integrity) fetchOpts.integrity = link.integrity;
            if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
            if (link.crossOrigin === "use-credentials") fetchOpts.credentials = "include";else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";else fetchOpts.credentials = "same-origin";
            return fetchOpts;
          }
          function processPreload(link) {
            if (link.ep) return;
            link.ep = true;
            var fetchOpts = getFetchOpts(link);
            fetch(link.href, fetchOpts);
          }
        }();
        var scriptRel = 'modulepreload';
        var assetsURL = function assetsURL(dep) {
          return "/renderer/" + dep;
        };
        var seen = {};
        var __vitePreload = function preload(baseModule, deps, importerUrl) {
          var promise = Promise.resolve();
          if (false && deps && deps.length > 0) {
            document.getElementsByTagName("link");
            var cspNonceMeta = document.querySelector("meta[property=csp-nonce]");
            var cspNonce = (cspNonceMeta === null || cspNonceMeta === void 0 ? void 0 : cspNonceMeta.nonce) || (cspNonceMeta === null || cspNonceMeta === void 0 ? void 0 : cspNonceMeta.getAttribute("nonce"));
            promise = Promise.all(deps.map(function (dep) {
              dep = assetsURL(dep);
              if (dep in seen) return;
              seen[dep] = true;
              var isCss = dep.endsWith(".css");
              var cssSelector = isCss ? '[rel="stylesheet"]' : "";
              if (document.querySelector("link[href=\"".concat(dep, "\"]").concat(cssSelector))) {
                return;
              }
              var link = document.createElement("link");
              link.rel = isCss ? "stylesheet" : scriptRel;
              if (!isCss) {
                link.as = "script";
                link.crossOrigin = "";
              }
              link.href = dep;
              if (cspNonce) {
                link.setAttribute("nonce", cspNonce);
              }
              document.head.appendChild(link);
              if (isCss) {
                return new Promise(function (res, rej) {
                  link.addEventListener("load", res);
                  link.addEventListener("error", function () {
                    return rej(new Error("Unable to preload CSS for ".concat(dep)));
                  });
                });
              }
            }));
          }
          return promise.then(function () {
            return baseModule();
          }).catch(function (err) {
            var e = new Event("vite:preloadError", {
              cancelable: true
            });
            e.payload = err;
            window.dispatchEvent(e);
            if (!e.defaultPrevented) {
              throw err;
            }
          });
        };
        function createWebGLContext(canvas, contextSpy) {
          var config = {
            alpha: true,
            antialias: false,
            depth: false,
            stencil: true,
            desynchronized: false,
            // Disabled because it prevents Visual Regression Tests from working
            // failIfMajorPerformanceCaveat: true,
            powerPreference: "high-performance",
            premultipliedAlpha: true,
            preserveDrawingBuffer: false
          };
          var gl =
          // TODO: Remove this assertion once this issue is fixed in TypeScript
          // https://github.com/microsoft/TypeScript/issues/53614
          canvas.getContext("webgl", config) || canvas.getContext("experimental-webgl", config);
          if (!gl) {
            throw new Error("Unable to create WebGL context");
          }
          if (contextSpy) {
            return new Proxy(gl, {
              get: function get(target, prop) {
                var value = target[prop];
                if (typeof value === "function") {
                  contextSpy.increment(String(prop));
                  return value.bind(target);
                }
                return value;
              }
            });
          }
          return gl;
        }
        function assertTruthy(condition, message) {
          if (isProductionEnvironment()) return;
          if (!condition) {
            throw new Error(message || "Assertion failed");
          }
        }
        function mergeColorProgress(rgba1, rgba2, p) {
          var r1 = Math.trunc(rgba1 >>> 24);
          var g1 = Math.trunc(rgba1 >>> 16 & 255);
          var b1 = Math.trunc(rgba1 >>> 8 & 255);
          var a1 = Math.trunc(rgba1 & 255);
          var r2 = Math.trunc(rgba2 >>> 24);
          var g2 = Math.trunc(rgba2 >>> 16 & 255);
          var b2 = Math.trunc(rgba2 >>> 8 & 255);
          var a2 = Math.trunc(rgba2 & 255);
          var r = Math.round(r2 * p + r1 * (1 - p));
          var g = Math.round(g2 * p + g1 * (1 - p));
          var b = Math.round(b2 * p + b1 * (1 - p));
          var a = Math.round(a2 * p + a1 * (1 - p));
          return (r << 24 | g << 16 | b << 8 | a) >>> 0;
        }
        function mergeColorAlpha(rgba, alpha) {
          var r = rgba >>> 24;
          var g = rgba >>> 16 & 255;
          var b = rgba >>> 8 & 255;
          var a = Math.trunc((rgba & 255) * alpha);
          return (r << 24 | g << 16 | b << 8 | a) >>> 0;
        }
        var premultiplyRGB = true;
        function setPremultiplyMode(mode) {
          premultiplyRGB = mode === "webgl";
        }
        function mergeColorAlphaPremultiplied(rgba, alpha) {
          var flipEndianess = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          var newAlpha = (rgba & 255) / 255 * alpha;
          var rgbAlpha = premultiplyRGB ? newAlpha : 1;
          var r = Math.trunc((rgba >>> 24) * rgbAlpha);
          var g = Math.trunc((rgba >>> 16 & 255) * rgbAlpha);
          var b = Math.trunc((rgba >>> 8 & 255) * rgbAlpha);
          var a = Math.trunc(newAlpha * 255);
          if (flipEndianess) {
            return (a << 24 | b << 16 | g << 8 | r) >>> 0;
          }
          return (r << 24 | g << 16 | b << 8 | a) >>> 0;
        }
        function hasOwn(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
        function deg2Rad(degrees) {
          return degrees * Math.PI / 180;
        }
        function isProductionEnvironment() {
          return {
            "BASE_URL": "/renderer/",
            "MODE": "production",
            "DEV": false,
            "PROD": true,
            "SSR": false,
            "LEGACY": true
          } && true;
        }
        var nextId = 1;
        function getNewId() {
          return nextId++;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * EventEmitter base class
         */
        var EventEmitter = /*#__PURE__*/function () {
          function EventEmitter() {
            _classCallCheck(this, EventEmitter);
            _defineProperty(this, "eventListeners", {});
          }
          return _createClass(EventEmitter, [{
            key: "on",
            value: function on(event, listener) {
              var listeners = this.eventListeners[event];
              if (!listeners) {
                listeners = [];
              }
              listeners.push(listener);
              this.eventListeners[event] = listeners;
            }
          }, {
            key: "off",
            value: function off(event, listener) {
              var listeners = this.eventListeners[event];
              if (!listeners) {
                return;
              }
              if (!listener) {
                delete this.eventListeners[event];
                return;
              }
              var index = listeners.indexOf(listener);
              if (index >= 0) {
                listeners.splice(index, 1);
              }
            }
          }, {
            key: "once",
            value: function once(event, listener) {
              var _this = this;
              var _onceListener = function onceListener(target, data) {
                _this.off(event, _onceListener);
                listener(target, data);
              };
              this.on(event, _onceListener);
            }
          }, {
            key: "emit",
            value: function emit(event, data) {
              var _this2 = this;
              var listeners = this.eventListeners[event];
              if (!listeners) {
                return;
              }
              _toConsumableArray(listeners).forEach(function (listener) {
                listener(_this2, data);
              });
            }
          }, {
            key: "removeAllListeners",
            value: function removeAllListeners() {
              this.eventListeners = {};
            }
          }]);
        }();
        exports("E", EventEmitter);

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var PROTOCOL_REGEX = /^(data|ftps?|https?):/;
        var getNormalizedRgbaComponents = function getNormalizedRgbaComponents(rgba) {
          var r = rgba >>> 24;
          var g = rgba >>> 16 & 0xff;
          var b = rgba >>> 8 & 0xff;
          var a = rgba & 0xff;
          return [r / 255, g / 255, b / 255, a / 255];
        };
        var getRgbaComponents = function getRgbaComponents(rgba) {
          var r = rgba >>> 24;
          var g = rgba >>> 16 & 0xff;
          var b = rgba >>> 8 & 0xff;
          var a = rgba & 0xff;
          return [r, g, b, a];
        };
        function getNormalizedAlphaComponent(rgba) {
          return (rgba & 0xff) / 255.0;
        }
        /**
         * Get a CSS color string from a RGBA color
         *
         * @param color
         * @returns
         */
        function getRgbaString(color) {
          var r = Math.floor(color[0] * 255.0);
          var g = Math.floor(color[1] * 255.0);
          var b = Math.floor(color[2] * 255.0);
          var a = Math.floor(color[3] * 255.0);
          return "rgba(".concat(r, ",").concat(g, ",").concat(b, ",").concat(a.toFixed(4), ")");
        }
        function createBound(x1, y1, x2, y2, out) {
          if (out) {
            out.x1 = x1;
            out.y1 = y1;
            out.x2 = x2;
            out.y2 = y2;
            return out;
          }
          return {
            x1: x1,
            y1: y1,
            x2: x2,
            y2: y2
          };
        }
        function boundsOverlap(a, b) {
          return a.x1 < b.x2 && a.x2 > b.x1 && a.y1 < b.y2 && a.y2 > b.y1;
        }
        function convertBoundToRect(bound, out) {
          if (out) {
            out.x = bound.x1;
            out.y = bound.y1;
            out.width = bound.x2 - bound.x1;
            out.height = bound.y2 - bound.y1;
            return out;
          }
          return {
            x: bound.x1,
            y: bound.y1,
            width: bound.x2 - bound.x1,
            height: bound.y2 - bound.y1
          };
        }
        function intersectRect(a, b, out) {
          var x = Math.max(a.x, b.x);
          var y = Math.max(a.y, b.y);
          var width = Math.min(a.x + a.width, b.x + b.width) - x;
          var height = Math.min(a.y + a.height, b.y + b.height) - y;
          if (width > 0 && height > 0) {
            if (out) {
              out.x = x;
              out.y = y;
              out.width = width;
              out.height = height;
              return out;
            }
            return {
              x: x,
              y: y,
              width: width,
              height: height
            };
          }
          if (out) {
            out.x = 0;
            out.y = 0;
            out.width = 0;
            out.height = 0;
            return out;
          }
          return {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        function copyRect(a, out) {
          if (out) {
            out.x = a.x;
            out.y = a.y;
            out.width = a.width;
            out.height = a.height;
            return out;
          }
          return {
            x: a.x,
            y: a.y,
            width: a.width,
            height: a.height
          };
        }
        function compareRect(a, b) {
          if (a === b) {
            return true;
          }
          if (a === null || b === null) {
            return false;
          }
          return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
        }
        function boundInsideBound(bound1, bound2) {
          return bound1.x1 <= bound2.x2 && bound1.y1 <= bound2.y2 && bound1.x2 >= bound2.x1 && bound1.y2 >= bound2.y1;
        }
        function isBoundPositive(bound) {
          return bound.x1 < bound.x2 && bound.y1 < bound.y2;
        }
        function convertUrlToAbsolute(url) {
          // handle local file imports if the url isn't remote resource or data blob
          if (self.location.protocol === 'file:' && !PROTOCOL_REGEX.test(url)) {
            var path = self.location.pathname.split('/');
            path.pop();
            var basePath = path.join('/');
            var baseUrl = self.location.protocol + '//' + basePath;
            // check if url has a leading dot
            if (url.charAt(0) === '.') {
              url = url.slice(1);
            }
            // check if url has a leading slash
            if (url.charAt(0) === '/') {
              url = url.slice(1);
            }
            return baseUrl + '/' + url;
          }
          var absoluteUrl = new URL(url, self.location.href);
          return absoluteUrl.href;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A 3D matrix representing a 2D graphics transformation
         *
         * @remarks
         * For convenience, entries in the first two rows can be accessed by the following
         * properties:
         * | ta tb tx |
         * | tc td ty |
         * | 0  0  1  |
         *
         * This matrix is optimized for 2D transformations and hence the last row will
         * always be considered [0, 0 ,1].
         *
         * To access a column major array for WebGL, use the {@link getFloatArr} method.
         */
        var Matrix3d = /*#__PURE__*/function () {
          /**
           * Creates a new 3x3 matrix.
           *
           * @param entries Row-major 3x3 matrix
           */
          function Matrix3d() {
            _classCallCheck(this, Matrix3d);
            _defineProperty(this, "ta", void 0);
            _defineProperty(this, "tb", void 0);
            _defineProperty(this, "tx", void 0);
            _defineProperty(this, "tc", void 0);
            _defineProperty(this, "td", void 0);
            _defineProperty(this, "ty", void 0);
            _defineProperty(this, "_floatArr", null);
            /**
             * Potential Mutation Flag
             *
             * @remarks
             * This flag is set to true whenever the matrix is potentially modified.
             * We don't waste CPU trying to identify if each operation actually modifies
             * the matrix. Instead, we set this flag to true whenever we think the matrix
             * is modified. This signals that the `floatArr` should to be updated.
             */
            _defineProperty(this, "mutation", void 0);
            this.ta = 0;
            this.tb = 0;
            this.tx = 0;
            this.tc = 0;
            this.td = 0;
            this.ty = 0;
            this.mutation = true;
          }
          /**
           * Returns a temporary matrix that can be used for calculations.
           *
           * @remarks
           * This is useful for avoiding allocations in tight loops.
           *
           * The matrix is not guaranteed to be the same between calls.
           *
           * @returns
           */
          return _createClass(Matrix3d, [{
            key: "translate",
            value: function translate(x, y) {
              this.tx = this.ta * x + this.tb * y + this.tx;
              this.ty = this.tc * x + this.td * y + this.ty;
              this.mutation = true;
              return this;
            }
          }, {
            key: "scale",
            value: function scale(sx, sy) {
              this.ta = this.ta * sx;
              this.tb = this.tb * sy;
              this.tc = this.tc * sx;
              this.td = this.td * sy;
              this.mutation = true;
              return this;
            }
          }, {
            key: "rotate",
            value: function rotate(angle) {
              if (angle === 0 || !(angle % Math.PI * 2)) {
                return this;
              }
              var cos = Math.cos(angle);
              var sin = Math.sin(angle);
              var e0 = this.ta * cos + this.tb * sin;
              var e1 = this.tb * cos - this.ta * sin;
              var e3 = this.tc * cos + this.td * sin;
              var e4 = this.td * cos - this.tc * sin;
              this.ta = e0;
              this.tb = e1;
              this.tc = e3;
              this.td = e4;
              this.mutation = true;
              return this;
            }
          }, {
            key: "multiply",
            value: function multiply(other) {
              return Matrix3d.multiply(this, other, this);
            }
            /**
             * Returns the matrix as a Float32Array in column-major order.
             *
             * @remarks
             * This method is optimized to avoid unnecessary allocations. The same array
             * is returned every time this method is called, and is updated in place.
             *
             * WARNING: Use the array only for passing directly to a WebGL shader uniform
             * during a frame render. Do not modify or hold onto the array for longer than
             * a frame.
             */
          }, {
            key: "getFloatArr",
            value: function getFloatArr() {
              if (!this._floatArr) {
                this._floatArr = new Float32Array(9);
              }
              if (this.mutation) {
                this._floatArr[0] = this.ta;
                this._floatArr[1] = this.tc;
                this._floatArr[2] = 0;
                this._floatArr[3] = this.tb;
                this._floatArr[4] = this.td;
                this._floatArr[5] = 0;
                this._floatArr[6] = this.tx;
                this._floatArr[7] = this.ty;
                this._floatArr[8] = 1;
                this.mutation = false;
              }
              return this._floatArr;
            }
          }], [{
            key: "temp",
            get: function get() {
              return tempMatrix;
            }
          }, {
            key: "multiply",
            value: function multiply(a, b, out) {
              var e0 = a.ta * b.ta + a.tb * b.tc;
              var e1 = a.ta * b.tb + a.tb * b.td;
              var e2 = a.ta * b.tx + a.tb * b.ty + a.tx;
              var e3 = a.tc * b.ta + a.td * b.tc;
              var e4 = a.tc * b.tb + a.td * b.td;
              var e5 = a.tc * b.tx + a.td * b.ty + a.ty;
              if (!out) {
                out = new Matrix3d();
              }
              out.ta = e0;
              out.tb = e1;
              out.tx = e2;
              out.tc = e3;
              out.td = e4;
              out.ty = e5;
              out.mutation = true;
              return out;
            }
          }, {
            key: "identity",
            value: function identity(out) {
              if (!out) {
                out = new Matrix3d();
              }
              out.ta = 1;
              out.tb = 0;
              out.tx = 0;
              out.tc = 0;
              out.td = 1;
              out.ty = 0;
              out.mutation = true;
              return out;
            }
          }, {
            key: "translate",
            value: function translate(x, y, out) {
              if (!out) {
                out = new Matrix3d();
              }
              out.ta = 1;
              out.tb = 0;
              out.tx = x;
              out.tc = 0;
              out.td = 1;
              out.ty = y;
              out.mutation = true;
              return out;
            }
          }, {
            key: "scale",
            value: function scale(sx, sy, out) {
              if (!out) {
                out = new Matrix3d();
              }
              out.ta = sx;
              out.tb = 0;
              out.tx = 0;
              out.tc = 0;
              out.td = sy;
              out.ty = 0;
              out.mutation = true;
              return out;
            }
          }, {
            key: "rotate",
            value: function rotate(angle, out) {
              var cos = Math.cos(angle);
              var sin = Math.sin(angle);
              if (!out) {
                out = new Matrix3d();
              }
              out.ta = cos;
              out.tb = -sin;
              out.tx = 0;
              out.tc = sin;
              out.td = cos;
              out.ty = 0;
              out.mutation = true;
              return out;
            }
          }, {
            key: "copy",
            value: function copy(src, dst) {
              if (!dst) {
                dst = new Matrix3d();
              }
              dst.ta = src.ta;
              dst.tc = src.tc;
              dst.tb = src.tb;
              dst.td = src.td;
              dst.tx = src.tx;
              dst.ty = src.ty;
              dst.mutation = true;
              return dst;
            }
          }]);
        }();
        var tempMatrix = new Matrix3d();
        var rx1 = 0;
        var rx2 = 2;
        var rx3 = 4;
        var rx4 = 6;
        var ry1 = 1;
        var ry2 = 3;
        var ry3 = 5;
        var ry4 = 7;
        var RenderCoords = /*#__PURE__*/function () {
          function RenderCoords(entries) {
            _classCallCheck(this, RenderCoords);
            _defineProperty(this, "data", void 0);
            this.data = new Float32Array(8);
            if (entries) {
              this.data[rx1] = entries[rx1];
              this.data[rx2] = entries[rx2];
              this.data[rx3] = entries[rx3];
              this.data[rx4] = entries[rx4];
              this.data[ry1] = entries[ry1];
              this.data[ry2] = entries[ry2];
              this.data[ry3] = entries[ry3];
              this.data[ry4] = entries[ry4];
            }
          }
          return _createClass(RenderCoords, [{
            key: "x1",
            get: function get() {
              return this.data[rx1];
            }
          }, {
            key: "x2",
            get: function get() {
              return this.data[rx2];
            }
          }, {
            key: "x3",
            get: function get() {
              return this.data[rx3];
            }
          }, {
            key: "x4",
            get: function get() {
              return this.data[rx4];
            }
          }, {
            key: "y1",
            get: function get() {
              return this.data[ry1];
            }
          }, {
            key: "y2",
            get: function get() {
              return this.data[ry2];
            }
          }, {
            key: "y3",
            get: function get() {
              return this.data[ry3];
            }
          }, {
            key: "y4",
            get: function get() {
              return this.data[ry4];
            }
          }], [{
            key: "translate",
            value: function translate(x1, y1, x2, y2, x3, y3, x4, y4, out) {
              if (!out) {
                out = new RenderCoords();
              }
              out.data[rx1] = x1;
              out.data[rx2] = x2;
              out.data[rx3] = x3;
              out.data[rx4] = x4;
              out.data[ry1] = y1;
              out.data[ry2] = y2;
              out.data[ry3] = y3;
              out.data[ry4] = y4;
              return out;
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Core Utility Functions
         *
         * @module
         */
        var isPowerOfTwo = function isPowerOfTwo(value) {
          return value && !(value & value - 1);
        };
        var getTimingBezier = function getTimingBezier(a, b, c, d) {
          var xc = 3.0 * a;
          var xb = 3.0 * (c - a) - xc;
          var xa = 1.0 - xc - xb;
          var yc = 3.0 * b;
          var yb = 3.0 * (d - b) - yc;
          var ya = 1.0 - yc - yb;
          return function (time) {
            if (time >= 1.0) {
              return 1;
            }
            if (time <= 0) {
              return 0;
            }
            var t = 0.5,
              cbx,
              cbxd,
              dx;
            for (var it = 0; it < 20; it++) {
              cbx = t * (t * (t * xa + xb) + xc);
              dx = time - cbx;
              if (dx > -1e-8 && dx < 1e-8) {
                return t * (t * (t * ya + yb) + yc);
              }
              // Cubic bezier derivative.
              cbxd = t * (t * (3 * xa) + 2 * xb) + xc;
              if (cbxd > 1e-10 && cbxd < 1e-10) {
                // Problematic. Fall back to binary search method.
                break;
              }
              t += dx / cbxd;
            }
            // Fallback: binary search method. This is more reliable when there are near-0 slopes.
            var minT = 0;
            var maxT = 1;
            for (var _it = 0; _it < 20; _it++) {
              t = 0.5 * (minT + maxT);
              cbx = t * (t * (t * xa + xb) + xc);
              dx = time - cbx;
              if (dx > -1e-8 && dx < 1e-8) {
                // Solution found!
                return t * (t * (t * ya + yb) + yc);
              }
              if (dx < 0) {
                maxT = t;
              } else {
                minT = t;
              }
            }
          };
        };
        var timingMapping = {};
        var timingLookup = {
          ease: [0.25, 0.1, 0.25, 1.0],
          'ease-in': [0.42, 0, 1.0, 1.0],
          'ease-out': [0, 0, 0.58, 1.0],
          'ease-in-out': [0.42, 0, 0.58, 1.0],
          'ease-in-sine': [0.12, 0, 0.39, 0],
          'ease-out-sine': [0.12, 0, 0.39, 0],
          'ease-in-out-sine': [0.37, 0, 0.63, 1],
          'ease-in-cubic': [0.32, 0, 0.67, 0],
          'ease-out-cubic': [0.33, 1, 0.68, 1],
          'ease-in-out-cubic': [0.65, 0, 0.35, 1],
          'ease-in-circ': [0.55, 0, 1, 0.45],
          'ease-out-circ': [0, 0.55, 0.45, 1],
          'ease-in-out-circ': [0.85, 0, 0.15, 1],
          'ease-in-back': [0.36, 0, 0.66, -0.56],
          'ease-out-back': [0.34, 1.56, 0.64, 1],
          'ease-in-out-back': [0.68, -0.6, 0.32, 1.6]
        };
        var defaultTiming = function defaultTiming(t) {
          return t;
        };
        var parseCubicBezier = function parseCubicBezier(str) {
          //cubic-bezier(0.84, 0.52, 0.56, 0.6)
          var regex = /-?\d*\.?\d+/g;
          var match = str.match(regex);
          if (match) {
            var _match = _slicedToArray(match, 4),
              num1 = _match[0],
              num2 = _match[1],
              num3 = _match[2],
              num4 = _match[3];
            var a = parseFloat(num1 || '0.42');
            var b = parseFloat(num2 || '0');
            var c = parseFloat(num3 || '1');
            var d = parseFloat(num4 || '1');
            var timing = getTimingBezier(a, b, c, d);
            timingMapping[str] = timing;
            return timing;
          }
          // parse failed, return linear
          console.warn('Unknown cubic-bezier timing: ' + str);
          return defaultTiming;
        };
        var getTimingFunction = function getTimingFunction(str) {
          if (str === 'linear') {
            return defaultTiming;
          }
          if (timingMapping[str] !== undefined) {
            return timingMapping[str] || defaultTiming;
          }
          if (str === 'step-start') {
            return function () {
              return 1;
            };
          }
          if (str === 'step-end') {
            return function (time) {
              return time === 1 ? 1 : 0;
            };
          }
          var lookup = timingLookup[str];
          if (lookup !== undefined) {
            var _lookup = _slicedToArray(lookup, 4),
              a = _lookup[0],
              b = _lookup[1],
              c = _lookup[2],
              d = _lookup[3];
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore - TS doesn't understand that we've checked for undefined
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            var timing = getTimingBezier(a, b, c, d);
            timingMapping[str] = timing;
            return timing;
          }
          if (str.startsWith('cubic-bezier')) {
            return parseCubicBezier(str);
          }
          console.warn('Unknown timing function: ' + str);
          return defaultTiming;
        };
        /**
         * Convert bytes to string of megabytes with 2 decimal points
         *
         * @param bytes
         * @returns
         */
        function bytesToMb$1(bytes) {
          return (bytes / 1024 / 1024).toFixed(2);
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreAnimation = /*#__PURE__*/function (_EventEmitter2) {
          function CoreAnimation(node, props, settings) {
            var _settings$delay, _settings$duration, _settings$loop, _settings$repeat, _settings$repeatDelay, _settings$stopMethod;
            var _this3;
            _classCallCheck(this, CoreAnimation);
            _this3 = _callSuper(this, CoreAnimation);
            _defineProperty(_this3, "node", void 0);
            _defineProperty(_this3, "props", void 0);
            _defineProperty(_this3, "settings", void 0);
            _defineProperty(_this3, "progress", 0);
            _defineProperty(_this3, "delayFor", 0);
            _defineProperty(_this3, "timingFunction", void 0);
            _defineProperty(_this3, "propValuesMap", {});
            _defineProperty(_this3, "dynPropValuesMap", undefined);
            _this3.node = node;
            _this3.props = props;
            for (var key in props) {
              if (key !== 'shaderProps') {
                if (_this3.propValuesMap['props'] === undefined) {
                  _this3.propValuesMap['props'] = {};
                }
                _this3.propValuesMap['props'][key] = {
                  start: node[key] || 0,
                  target: props[key]
                };
              } else if (node.shader.type !== 'DynamicShader') {
                _this3.propValuesMap['shaderProps'] = {};
                for (var _key in props.shaderProps) {
                  _this3.propValuesMap['shaderProps'][_key] = {
                    start: node.shader.props[_key],
                    target: props.shaderProps[_key]
                  };
                }
              } else {
                var shaderPropKeys = Object.keys(props.shaderProps);
                var spLength = shaderPropKeys.length;
                _this3.dynPropValuesMap = {};
                for (var j = 0; j < spLength; j++) {
                  var effectName = shaderPropKeys[j];
                  var effect = props.shaderProps[effectName];
                  _this3.dynPropValuesMap[effectName] = {};
                  var effectProps = Object.entries(effect);
                  var eLength = effectProps.length;
                  for (var k = 0; k < eLength; k++) {
                    var _effectProps$k = _slicedToArray(effectProps[k], 2),
                      _key2 = _effectProps$k[0],
                      value = _effectProps$k[1];
                    _this3.dynPropValuesMap[effectName][_key2] = {
                      start: node.shader.props[effectName][_key2],
                      target: value
                    };
                  }
                }
              }
            }
            var easing = settings.easing || 'linear';
            var delay = (_settings$delay = settings.delay) !== null && _settings$delay !== void 0 ? _settings$delay : 0;
            _this3.settings = {
              duration: (_settings$duration = settings.duration) !== null && _settings$duration !== void 0 ? _settings$duration : 0,
              delay: delay,
              easing: easing,
              loop: (_settings$loop = settings.loop) !== null && _settings$loop !== void 0 ? _settings$loop : false,
              repeat: (_settings$repeat = settings.repeat) !== null && _settings$repeat !== void 0 ? _settings$repeat : 0,
              repeatDelay: (_settings$repeatDelay = settings.repeatDelay) !== null && _settings$repeatDelay !== void 0 ? _settings$repeatDelay : 0,
              stopMethod: (_settings$stopMethod = settings.stopMethod) !== null && _settings$stopMethod !== void 0 ? _settings$stopMethod : false
            };
            _this3.timingFunction = getTimingFunction(easing);
            _this3.delayFor = delay;
            return _this3;
          }
          _inherits(CoreAnimation, _EventEmitter2);
          return _createClass(CoreAnimation, [{
            key: "reset",
            value: function reset() {
              this.progress = 0;
              this.delayFor = this.settings.delay || 0;
              this.update(0);
            }
          }, {
            key: "restoreValues",
            value: function restoreValues(target, valueMap) {
              var entries = Object.entries(valueMap);
              var eLength = entries.length;
              for (var i = 0; i < eLength; i++) {
                var _entries$i = _slicedToArray(entries[i], 2),
                  key = _entries$i[0],
                  value = _entries$i[1];
                target[key] = value.start;
              }
            }
          }, {
            key: "restore",
            value: function restore() {
              this.reset();
              if (this.propValuesMap['props'] !== undefined) {
                this.restoreValues(this.node, this.propValuesMap['props']);
              }
              if (this.propValuesMap['shaderProps'] !== undefined) {
                this.restoreValues(this.node.shader.props, this.propValuesMap['shaderProps']);
              }
              if (this.dynPropValuesMap !== undefined) {
                var dynEntries = Object.keys(this.dynPropValuesMap);
                var dynEntriesL = dynEntries.length;
                if (dynEntriesL > 0) {
                  for (var i = 0; i < dynEntriesL; i++) {
                    var key = dynEntries[i];
                    this.restoreValues(this.node.shader.props[key], this.dynPropValuesMap[key]);
                  }
                }
              }
            }
          }, {
            key: "reverseValues",
            value: function reverseValues(valueMap) {
              var entries = Object.entries(valueMap);
              var eLength = entries.length;
              for (var i = 0; i < eLength; i++) {
                var _entries$i2 = _slicedToArray(entries[i], 2),
                  key = _entries$i2[0],
                  value = _entries$i2[1];
                valueMap[key] = {
                  start: value.target,
                  target: value.start
                };
              }
            }
          }, {
            key: "reverse",
            value: function reverse() {
              this.progress = 0;
              if (this.propValuesMap['props'] !== undefined) {
                this.reverseValues(this.propValuesMap['props']);
              }
              if (this.propValuesMap['shaderProps'] !== undefined) {
                this.reverseValues(this.propValuesMap['shaderProps']);
              }
              if (this.dynPropValuesMap !== undefined) {
                var dynEntries = Object.keys(this.dynPropValuesMap);
                var dynEntriesL = dynEntries.length;
                if (dynEntriesL > 0) {
                  for (var i = 0; i < dynEntriesL; i++) {
                    var key = dynEntries[i];
                    this.reverseValues(this.dynPropValuesMap[key]);
                  }
                }
              }
              // restore stop method if we are not looping
              if (!this.settings.loop) {
                this.settings.stopMethod = false;
              }
            }
          }, {
            key: "applyEasing",
            value: function applyEasing(p, s, e) {
              return (this.timingFunction(p) || p) * (e - s) + s;
            }
          }, {
            key: "updateValue",
            value: function updateValue(propName, propValue, startValue, easing) {
              if (this.progress === 1) {
                return propValue;
              }
              if (this.progress === 0) {
                return startValue;
              }
              var endValue = propValue;
              if (propName.indexOf('color') !== -1) {
                if (startValue === endValue) {
                  return startValue;
                }
                if (easing) {
                  var easingProgressValue = this.timingFunction(this.progress) || this.progress;
                  return mergeColorProgress(startValue, endValue, easingProgressValue);
                }
                return mergeColorProgress(startValue, endValue, this.progress);
              }
              if (easing) {
                return this.applyEasing(this.progress, startValue, endValue);
              }
              return startValue + (endValue - startValue) * this.progress;
            }
          }, {
            key: "updateValues",
            value: function updateValues(target, valueMap, easing) {
              var entries = Object.entries(valueMap);
              var eLength = entries.length;
              for (var i = 0; i < eLength; i++) {
                var _entries$i3 = _slicedToArray(entries[i], 2),
                  key = _entries$i3[0],
                  value = _entries$i3[1];
                target[key] = this.updateValue(key, value.target, value.start, easing);
              }
            }
          }, {
            key: "update",
            value: function update(dt) {
              var _this$settings = this.settings,
                duration = _this$settings.duration,
                loop = _this$settings.loop,
                easing = _this$settings.easing,
                stopMethod = _this$settings.stopMethod;
              var delayFor = this.delayFor;
              if (duration === 0 && delayFor === 0) {
                this.emit('finished', {});
                return;
              }
              if (this.delayFor > 0) {
                this.delayFor -= dt;
                if (this.delayFor >= 0) {
                  // Either no or more delay left. Exit.
                  return;
                } else {
                  // We went beyond the delay time, add it back to dt so we can continue
                  // with the animation.
                  dt = -this.delayFor;
                  this.delayFor = 0;
                }
              }
              if (duration === 0) {
                // No duration, we are done.
                this.emit('finished', {});
                return;
              }
              if (this.progress === 0) {
                // Progress is 0, we are starting the post-delay part of the animation.
                this.emit('animating', {});
              }
              this.progress += dt / duration;
              if (this.progress > 1) {
                this.progress = loop ? 0 : 1;
                if (stopMethod) {
                  // If there's a stop method emit finished so the stop method can be applied.
                  // TODO: We should probably reevaluate how stopMethod is implemented as currently
                  // stop method 'reset' does not work when looping.
                  this.emit('finished', {});
                  return;
                }
              }
              if (this.propValuesMap['props'] !== undefined) {
                this.updateValues(this.node, this.propValuesMap['props'], easing);
              }
              if (this.propValuesMap['shaderProps'] !== undefined) {
                this.updateValues(this.node.shader.props, this.propValuesMap['shaderProps'], easing);
              }
              if (this.dynPropValuesMap !== undefined) {
                var dynEntries = Object.keys(this.dynPropValuesMap);
                var dynEntriesL = dynEntries.length;
                if (dynEntriesL > 0) {
                  for (var i = 0; i < dynEntriesL; i++) {
                    var key = dynEntries[i];
                    this.updateValues(this.node.shader.props[key], this.dynPropValuesMap[key], easing);
                  }
                }
              }
              if (this.progress === 1) {
                this.emit('finished', {});
              }
            }
          }]);
        }(EventEmitter);
        /* eslint-disable @typescript-eslint/unbound-method */
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreAnimationController = /*#__PURE__*/function (_EventEmitter3) {
          function CoreAnimationController(manager, animation) {
            var _this4;
            _classCallCheck(this, CoreAnimationController);
            _this4 = _callSuper(this, CoreAnimationController);
            _defineProperty(_this4, "manager", void 0);
            _defineProperty(_this4, "animation", void 0);
            _defineProperty(_this4, "stoppedPromise", void 0);
            /**
             * If this is null, then the animation is in a finished / stopped state.
             */
            _defineProperty(_this4, "stoppedResolve", null);
            _defineProperty(_this4, "state", void 0);
            _this4.manager = manager;
            _this4.animation = animation;
            _this4.state = 'stopped';
            // Initial stopped promise is resolved (since the animation is stopped)
            _this4.stoppedPromise = Promise.resolve();
            // Bind event handlers
            _this4.onAnimating = _this4.onAnimating.bind(_this4);
            _this4.onFinished = _this4.onFinished.bind(_this4);
            return _this4;
          }
          _inherits(CoreAnimationController, _EventEmitter3);
          return _createClass(CoreAnimationController, [{
            key: "start",
            value: function start() {
              if (this.state !== 'running') {
                this.makeStoppedPromise();
                this.registerAnimation();
                this.state = 'running';
              }
              return this;
            }
          }, {
            key: "stop",
            value: function stop() {
              this.unregisterAnimation();
              if (this.stoppedResolve !== null) {
                this.stoppedResolve();
                this.stoppedResolve = null;
                this.emit('stopped', this);
              }
              this.animation.reset();
              this.state = 'stopped';
              return this;
            }
          }, {
            key: "pause",
            value: function pause() {
              this.unregisterAnimation();
              this.state = 'paused';
              return this;
            }
          }, {
            key: "restore",
            value: function restore() {
              this.stoppedResolve = null;
              this.animation.restore();
              return this;
            }
          }, {
            key: "waitUntilStopped",
            value: function waitUntilStopped() {
              return this.stoppedPromise;
            }
          }, {
            key: "registerAnimation",
            value: function registerAnimation() {
              // Hook up event listeners
              this.animation.once('finished', this.onFinished);
              this.animation.on('animating', this.onAnimating);
              // Then register the animation
              this.manager.registerAnimation(this.animation);
            }
          }, {
            key: "unregisterAnimation",
            value: function unregisterAnimation() {
              // First unregister the animation
              this.manager.unregisterAnimation(this.animation);
              // Then unhook event listeners
              this.animation.off('finished', this.onFinished);
              this.animation.off('animating', this.onAnimating);
            }
          }, {
            key: "makeStoppedPromise",
            value: function makeStoppedPromise() {
              var _this5 = this;
              if (this.stoppedResolve === null) {
                this.stoppedPromise = new Promise(function (resolve) {
                  _this5.stoppedResolve = resolve;
                });
              }
            }
          }, {
            key: "onFinished",
            value: function onFinished() {
              assertTruthy(this.stoppedResolve);
              // If the animation is looping, then we need to restart it.
              var _this$animation$setti = this.animation.settings,
                loop = _this$animation$setti.loop,
                stopMethod = _this$animation$setti.stopMethod;
              if (stopMethod === 'reverse') {
                this.animation.once('finished', this.onFinished);
                this.animation.reverse();
                return;
              }
              if (loop) {
                return;
              }
              // unregister animation
              this.unregisterAnimation();
              // resolve promise
              this.stoppedResolve();
              this.stoppedResolve = null;
              this.emit('stopped', this);
              this.state = 'stopped';
            }
          }, {
            key: "onAnimating",
            value: function onAnimating() {
              this.emit('animating', this);
            }
          }]);
        }(EventEmitter);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreNodeRenderState;
        (function (CoreNodeRenderState) {
          CoreNodeRenderState[CoreNodeRenderState["Init"] = 0] = "Init";
          CoreNodeRenderState[CoreNodeRenderState["OutOfBounds"] = 2] = "OutOfBounds";
          CoreNodeRenderState[CoreNodeRenderState["InBounds"] = 4] = "InBounds";
          CoreNodeRenderState[CoreNodeRenderState["InViewport"] = 8] = "InViewport";
        })(CoreNodeRenderState || (CoreNodeRenderState = {}));
        var CoreNodeRenderStateMap = new Map();
        CoreNodeRenderStateMap.set(CoreNodeRenderState.Init, 'init');
        CoreNodeRenderStateMap.set(CoreNodeRenderState.OutOfBounds, 'outOfBounds');
        CoreNodeRenderStateMap.set(CoreNodeRenderState.InBounds, 'inBounds');
        CoreNodeRenderStateMap.set(CoreNodeRenderState.InViewport, 'inViewport');
        var UpdateType;
        (function (UpdateType) {
          /**
           * Child updates
           */
          UpdateType[UpdateType["Children"] = 1] = "Children";
          /**
           * Scale/Rotate transform update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `scaleRotateTransform`
           */
          UpdateType[UpdateType["ScaleRotate"] = 2] = "ScaleRotate";
          /**
           * Translate transform update (x/y/width/height/pivot/mount)
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `localTransform`
           */
          UpdateType[UpdateType["Local"] = 4] = "Local";
          /**
           * Global Transform update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `globalTransform`
           * - `renderCoords`
           * - `renderBound`
           */
          UpdateType[UpdateType["Global"] = 8] = "Global";
          /**
           * Clipping rect update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `clippingRect`
           */
          UpdateType[UpdateType["Clipping"] = 16] = "Clipping";
          /**
           * Calculated ZIndex update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `calcZIndex`
           */
          UpdateType[UpdateType["CalculatedZIndex"] = 32] = "CalculatedZIndex";
          /**
           * Z-Index Sorted Children update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `children` (sorts children by their `calcZIndex`)
           */
          UpdateType[UpdateType["ZIndexSortedChildren"] = 64] = "ZIndexSortedChildren";
          /**
           * Premultiplied Colors update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `premultipliedColorTl`
           * - `premultipliedColorTr`
           * - `premultipliedColorBl`
           * - `premultipliedColorBr`
           */
          UpdateType[UpdateType["PremultipliedColors"] = 128] = "PremultipliedColors";
          /**
           * World Alpha update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `worldAlpha` = `parent.worldAlpha` * `alpha`
           */
          UpdateType[UpdateType["WorldAlpha"] = 256] = "WorldAlpha";
          /**
           * Render State update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `renderState`
           */
          UpdateType[UpdateType["RenderState"] = 512] = "RenderState";
          /**
           * Is Renderable update
           *
           * @remarks
           * CoreNode Properties Updated:
           * - `isRenderable`
           */
          UpdateType[UpdateType["IsRenderable"] = 1024] = "IsRenderable";
          /**
           * Render Texture update
           */
          UpdateType[UpdateType["RenderTexture"] = 2048] = "RenderTexture";
          /**
           * Track if parent has render texture
           */
          UpdateType[UpdateType["ParentRenderTexture"] = 4096] = "ParentRenderTexture";
          /**
           * None
           */
          UpdateType[UpdateType["None"] = 0] = "None";
          /**
           * All
           */
          UpdateType[UpdateType["All"] = 8191] = "All";
        })(UpdateType || (UpdateType = {}));
        /**
         * A visual Node in the Renderer scene graph.
         *
         * @remarks
         * CoreNode is an internally used class that represents a Renderer Node in the
         * scene graph. See INode.ts for the public APIs exposed to Renderer users
         * that include generic types for Shaders.
         */
        var CoreNode = /*#__PURE__*/function (_EventEmitter4) {
          function CoreNode(stage, props) {
            var _this6;
            _classCallCheck(this, CoreNode);
            _this6 = _callSuper(this, CoreNode);
            _defineProperty(_this6, "stage", void 0);
            _defineProperty(_this6, "children", []);
            _defineProperty(_this6, "_id", getNewId());
            _defineProperty(_this6, "props", void 0);
            _defineProperty(_this6, "updateType", UpdateType.All);
            _defineProperty(_this6, "globalTransform", void 0);
            _defineProperty(_this6, "scaleRotateTransform", void 0);
            _defineProperty(_this6, "localTransform", void 0);
            _defineProperty(_this6, "renderCoords", void 0);
            _defineProperty(_this6, "renderBound", void 0);
            _defineProperty(_this6, "strictBound", void 0);
            _defineProperty(_this6, "preloadBound", void 0);
            _defineProperty(_this6, "clippingRect", {
              x: 0,
              y: 0,
              width: 0,
              height: 0,
              valid: false
            });
            _defineProperty(_this6, "isRenderable", false);
            _defineProperty(_this6, "renderState", CoreNodeRenderState.Init);
            _defineProperty(_this6, "worldAlpha", 1);
            _defineProperty(_this6, "premultipliedColorTl", 0);
            _defineProperty(_this6, "premultipliedColorTr", 0);
            _defineProperty(_this6, "premultipliedColorBl", 0);
            _defineProperty(_this6, "premultipliedColorBr", 0);
            _defineProperty(_this6, "calcZIndex", 0);
            _defineProperty(_this6, "hasRTTupdates", false);
            _defineProperty(_this6, "parentHasRenderTexture", false);
            _defineProperty(_this6, "onTextureLoaded", function (_, dimensions) {
              var _this6$props$textureO;
              _this6.autosizeNode(dimensions);
              // Texture was loaded. In case the RAF loop has already stopped, we request
              // a render to ensure the texture is rendered.
              _this6.stage.requestRender();
              // If parent has a render texture, flag that we need to update
              // @todo: Reserve type for RTT updates
              if (_this6.parentHasRenderTexture) {
                _this6.setRTTUpdates(1);
              }
              _this6.emit('loaded', {
                type: 'texture',
                dimensions: dimensions
              });
              // Trigger a local update if the texture is loaded and the resizeMode is 'contain'
              if (((_this6$props$textureO = _this6.props.textureOptions) === null || _this6$props$textureO === void 0 || (_this6$props$textureO = _this6$props$textureO.resizeMode) === null || _this6$props$textureO === void 0 ? void 0 : _this6$props$textureO.type) === 'contain') {
                _this6.setUpdateType(UpdateType.Local);
              }
            });
            _defineProperty(_this6, "onTextureFailed", function (_, error) {
              _this6.emit('failed', {
                type: 'texture',
                error: error
              });
            });
            _defineProperty(_this6, "onTextureFreed", function () {
              _this6.emit('freed', {
                type: 'texture'
              });
            });
            _this6.stage = stage;
            _this6.props = _objectSpread(_objectSpread({}, props), {}, {
              parent: null,
              texture: null,
              src: null,
              rtt: false
            });
            // Assign props to instance
            _this6.parent = props.parent;
            _this6.texture = props.texture;
            _this6.src = props.src;
            _this6.rtt = props.rtt;
            _this6.updateScaleRotateTransform();
            return _this6;
          }
          //#region Textures
          _inherits(CoreNode, _EventEmitter4);
          return _createClass(CoreNode, [{
            key: "loadTexture",
            value: function loadTexture() {
              var _this7 = this;
              var texture = this.props.texture;
              assertTruthy(texture);
              // If texture is already loaded / failed, trigger loaded event manually
              // so that users get a consistent event experience.
              // We do this in a microtask to allow listeners to be attached in the same
              // synchronous task after calling loadTexture()
              queueMicrotask(function () {
                texture.preventCleanup = _this7.props.preventCleanup;
                // Preload texture if required
                if (_this7.textureOptions.preload) {
                  texture.ctxTexture.load();
                }
                if (texture.state === 'loaded') {
                  assertTruthy(texture.dimensions);
                  _this7.onTextureLoaded(texture, texture.dimensions);
                } else if (texture.state === 'failed') {
                  assertTruthy(texture.error);
                  _this7.onTextureFailed(texture, texture.error);
                } else if (texture.state === 'freed') {
                  _this7.onTextureFreed(texture);
                }
                texture.on('loaded', _this7.onTextureLoaded);
                texture.on('failed', _this7.onTextureFailed);
                texture.on('freed', _this7.onTextureFreed);
              });
            }
          }, {
            key: "unloadTexture",
            value: function unloadTexture() {
              if (this.texture) {
                this.texture.off('loaded', this.onTextureLoaded);
                this.texture.off('failed', this.onTextureFailed);
                this.texture.off('freed', this.onTextureFreed);
                this.texture.setRenderableOwner(this, false);
              }
            }
          }, {
            key: "autosizeNode",
            value: function autosizeNode(dimensions) {
              if (this.autosize) {
                this.width = dimensions.width;
                this.height = dimensions.height;
              }
            }
          }, {
            key: "setUpdateType",
            value:
            //#endregion Textures
            /**
             * Change types types is used to determine the scope of the changes being applied
             *
             * @remarks
             * See {@link UpdateType} for more information on each type
             *
             * @param type
             */
            function setUpdateType(type) {
              this.updateType |= type;
              // If we're updating this node at all, we need to inform the parent
              // (and all ancestors) that their children need updating as well
              var parent = this.props.parent;
              if (parent && !(parent.updateType & UpdateType.Children)) {
                parent.setUpdateType(UpdateType.Children);
              }
              // If node is part of RTT texture
              // Flag that we need to update
              if (this.parentHasRenderTexture) {
                this.setRTTUpdates(type);
              }
            }
          }, {
            key: "sortChildren",
            value: function sortChildren() {
              this.children.sort(function (a, b) {
                return a.calcZIndex - b.calcZIndex;
              });
            }
          }, {
            key: "updateScaleRotateTransform",
            value: function updateScaleRotateTransform() {
              var _this$props = this.props,
                rotation = _this$props.rotation,
                scaleX = _this$props.scaleX,
                scaleY = _this$props.scaleY;
              // optimize simple translation cases
              if (rotation === 0 && scaleX === 1 && scaleY === 1) {
                this.scaleRotateTransform = undefined;
                return;
              }
              this.scaleRotateTransform = Matrix3d.rotate(rotation, this.scaleRotateTransform).scale(scaleX, scaleY);
            }
          }, {
            key: "updateLocalTransform",
            value: function updateLocalTransform() {
              var _this$props$textureOp;
              var _this$props2 = this.props,
                x = _this$props2.x,
                y = _this$props2.y,
                width = _this$props2.width,
                height = _this$props2.height;
              var mountTranslateX = this.props.mountX * width;
              var mountTranslateY = this.props.mountY * height;
              if (this.scaleRotateTransform) {
                var pivotTranslateX = this.props.pivotX * width;
                var pivotTranslateY = this.props.pivotY * height;
                this.localTransform = Matrix3d.translate(x - mountTranslateX + pivotTranslateX, y - mountTranslateY + pivotTranslateY, this.localTransform).multiply(this.scaleRotateTransform).translate(-pivotTranslateX, -pivotTranslateY);
              } else {
                this.localTransform = Matrix3d.translate(x - mountTranslateX, y - mountTranslateY, this.localTransform);
              }
              // Handle 'contain' resize mode
              var texture = this.props.texture;
              if (texture && texture.dimensions && ((_this$props$textureOp = this.props.textureOptions) === null || _this$props$textureOp === void 0 || (_this$props$textureOp = _this$props$textureOp.resizeMode) === null || _this$props$textureOp === void 0 ? void 0 : _this$props$textureOp.type) === 'contain') {
                var resizeModeScaleX = 1;
                var resizeModeScaleY = 1;
                var extraX = 0;
                var extraY = 0;
                var _texture$dimensions = texture.dimensions,
                  tw = _texture$dimensions.width,
                  th = _texture$dimensions.height;
                var txAspectRatio = tw / th;
                var nodeAspectRatio = width / height;
                if (txAspectRatio > nodeAspectRatio) {
                  // Texture is wider than node
                  // Center the node vertically (shift down by extraY)
                  // Scale the node vertically to maintain original aspect ratio
                  var scaleX = width / tw;
                  var scaledTxHeight = th * scaleX;
                  extraY = (height - scaledTxHeight) / 2;
                  resizeModeScaleY = scaledTxHeight / height;
                } else {
                  // Texture is taller than node (or equal)
                  // Center the node horizontally (shift right by extraX)
                  // Scale the node horizontally to maintain original aspect ratio
                  var scaleY = height / th;
                  var scaledTxWidth = tw * scaleY;
                  extraX = (width - scaledTxWidth) / 2;
                  resizeModeScaleX = scaledTxWidth / width;
                }
                // Apply the extra translation and scale to the local transform
                this.localTransform.translate(extraX, extraY).scale(resizeModeScaleX, resizeModeScaleY);
              }
              this.setUpdateType(UpdateType.Global);
            }
            /**
             * @todo: test for correct calculation flag
             * @param delta
             */
          }, {
            key: "update",
            value: function update(delta, parentClippingRect) {
              var _this8 = this;
              if (this.updateType & UpdateType.ScaleRotate) {
                this.updateScaleRotateTransform();
                this.setUpdateType(UpdateType.Local);
              }
              if (this.updateType & UpdateType.Local) {
                this.updateLocalTransform();
                this.setUpdateType(UpdateType.Global);
              }
              var parent = this.props.parent;
              var childUpdateType = UpdateType.None;
              if (this.updateType & UpdateType.ParentRenderTexture) {
                var p = this.parent;
                while (p) {
                  if (p.rtt) {
                    this.parentHasRenderTexture = true;
                  }
                  p = p.parent;
                }
              }
              // If we have render texture updates and not already running a full update
              if (this.updateType ^ UpdateType.All && this.updateType & UpdateType.RenderTexture) {
                this.children.forEach(function (child) {
                  child.setUpdateType(UpdateType.All);
                });
              }
              if (this.updateType & UpdateType.Global) {
                var _this$props$parent;
                assertTruthy(this.localTransform);
                this.globalTransform = Matrix3d.copy((parent === null || parent === void 0 ? void 0 : parent.globalTransform) || this.localTransform, this.globalTransform);
                if (this.parentHasRenderTexture && (_this$props$parent = this.props.parent) !== null && _this$props$parent !== void 0 && _this$props$parent.rtt) {
                  this.globalTransform = Matrix3d.identity();
                }
                if (parent) {
                  this.globalTransform.multiply(this.localTransform);
                }
                this.calculateRenderCoords();
                this.updateBoundingRect();
                this.setUpdateType(UpdateType.Clipping | UpdateType.RenderState | UpdateType.Children);
                childUpdateType |= UpdateType.Global;
              }
              if (this.updateType & UpdateType.Clipping) {
                this.calculateClippingRect(parentClippingRect);
                this.setUpdateType(UpdateType.Children);
                childUpdateType |= UpdateType.Clipping;
              }
              if (this.updateType & UpdateType.WorldAlpha) {
                if (parent) {
                  this.worldAlpha = parent.worldAlpha * this.props.alpha;
                } else {
                  this.worldAlpha = this.props.alpha;
                }
                this.setUpdateType(UpdateType.Children | UpdateType.PremultipliedColors | UpdateType.IsRenderable);
                childUpdateType |= UpdateType.WorldAlpha;
              }
              if (this.updateType & UpdateType.PremultipliedColors) {
                this.premultipliedColorTl = mergeColorAlphaPremultiplied(this.props.colorTl, this.worldAlpha, true);
                // If all the colors are the same just sent them all to the same value
                if (this.props.colorTl === this.props.colorTr && this.props.colorBl === this.props.colorBr && this.props.colorTl === this.props.colorBl) {
                  this.premultipliedColorTr = this.premultipliedColorBl = this.premultipliedColorBr = this.premultipliedColorTl;
                } else {
                  this.premultipliedColorTr = mergeColorAlphaPremultiplied(this.props.colorTr, this.worldAlpha, true);
                  this.premultipliedColorBl = mergeColorAlphaPremultiplied(this.props.colorBl, this.worldAlpha, true);
                  this.premultipliedColorBr = mergeColorAlphaPremultiplied(this.props.colorBr, this.worldAlpha, true);
                }
              }
              if (this.updateType & UpdateType.RenderState) {
                this.updateRenderState(parentClippingRect);
                this.setUpdateType(UpdateType.IsRenderable);
              }
              if (this.updateType & UpdateType.IsRenderable) {
                this.updateIsRenderable();
              }
              // No need to update zIndex if there is no parent
              if (parent && this.updateType & UpdateType.CalculatedZIndex) {
                this.calculateZIndex();
                // Tell parent to re-sort children
                parent.setUpdateType(UpdateType.ZIndexSortedChildren);
              }
              if (this.updateType & UpdateType.Children && this.children.length && !this.rtt) {
                this.children.forEach(function (child) {
                  // Trigger the depenedent update types on the child
                  child.setUpdateType(childUpdateType);
                  // If child has no updates, skip
                  if (child.updateType === 0) {
                    return;
                  }
                  child.update(delta, _this8.clippingRect);
                });
              }
              // Sorting children MUST happen after children have been updated so
              // that they have the oppotunity to update their calculated zIndex.
              if (this.updateType & UpdateType.ZIndexSortedChildren) {
                // reorder z-index
                this.sortChildren();
              }
              // reset update type
              this.updateType = 0;
            }
            //check if CoreNode is renderable based on props
          }, {
            key: "checkRenderProps",
            value: function checkRenderProps() {
              if (this.props.texture) {
                return true;
              }
              if (!this.props.width || !this.props.height) {
                return false;
              }
              if (this.props.shader !== this.stage.defShaderCtr) {
                return true;
              }
              if (this.props.clipping) {
                return true;
              }
              if (this.props.color !== 0) {
                return true;
              }
              // Consider removing these checks and just using the color property check above.
              // Maybe add a forceRender prop for nodes that should always render.
              if (this.props.colorTop !== 0) {
                return true;
              }
              if (this.props.colorBottom !== 0) {
                return true;
              }
              if (this.props.colorLeft !== 0) {
                return true;
              }
              if (this.props.colorRight !== 0) {
                return true;
              }
              if (this.props.colorTl !== 0) {
                return true;
              }
              if (this.props.colorTr !== 0) {
                return true;
              }
              if (this.props.colorBl !== 0) {
                return true;
              }
              if (this.props.colorBr !== 0) {
                return true;
              }
              return false;
            }
          }, {
            key: "checkRenderBounds",
            value: function checkRenderBounds(parentClippingRect) {
              assertTruthy(this.renderBound);
              var rectW = parentClippingRect.width || this.stage.root.width;
              var rectH = parentClippingRect.height || this.stage.root.height;
              this.strictBound = createBound(parentClippingRect.x, parentClippingRect.y, parentClippingRect.x + rectW, parentClippingRect.y + rectH, this.strictBound);
              if (boundInsideBound(this.renderBound, this.strictBound)) {
                return CoreNodeRenderState.InViewport;
              }
              var renderM = this.stage.boundsMargin;
              this.preloadBound = createBound(this.strictBound.x1 - renderM[3], this.strictBound.y1 - renderM[0], this.strictBound.x2 + renderM[1], this.strictBound.y2 + renderM[2], this.preloadBound);
              if (boundInsideBound(this.renderBound, this.preloadBound)) {
                return CoreNodeRenderState.InBounds;
              }
              return CoreNodeRenderState.OutOfBounds;
            }
          }, {
            key: "updateRenderState",
            value: function updateRenderState(parentClippingRect) {
              var renderState = this.checkRenderBounds(parentClippingRect);
              if (renderState === this.renderState) {
                return;
              }
              var previous = this.renderState;
              this.renderState = renderState;
              var event = CoreNodeRenderStateMap.get(renderState);
              assertTruthy(event);
              this.emit(event, {
                previous: previous,
                current: renderState
              });
            }
            /**
             * This function updates the `isRenderable` property based on certain conditions.
             *
             * @returns
             */
          }, {
            key: "updateIsRenderable",
            value: function updateIsRenderable() {
              var newIsRenderable;
              if (this.worldAlpha === 0 || !this.checkRenderProps()) {
                newIsRenderable = false;
              } else {
                newIsRenderable = this.renderState > CoreNodeRenderState.OutOfBounds;
              }
              if (this.isRenderable !== newIsRenderable) {
                this.isRenderable = newIsRenderable;
                this.onChangeIsRenderable(newIsRenderable);
              }
            }
          }, {
            key: "onChangeIsRenderable",
            value: function onChangeIsRenderable(isRenderable) {
              var _this$texture;
              (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.setRenderableOwner(this, isRenderable);
            }
          }, {
            key: "calculateRenderCoords",
            value: function calculateRenderCoords() {
              var width = this.width,
                height = this.height,
                transform = this.globalTransform;
              assertTruthy(transform);
              var tx = transform.tx,
                ty = transform.ty,
                ta = transform.ta,
                tb = transform.tb,
                tc = transform.tc,
                td = transform.td;
              if (tb === 0 && tc === 0) {
                var minX = tx;
                var maxX = tx + width * ta;
                var minY = ty;
                var maxY = ty + height * td;
                this.renderCoords = RenderCoords.translate(
                //top-left
                minX, minY,
                //top-right
                maxX, minY,
                //bottom-right
                maxX, maxY,
                //bottom-left
                minX, maxY, this.renderCoords);
              } else {
                this.renderCoords = RenderCoords.translate(
                //top-left
                tx, ty,
                //top-right
                tx + width * ta, ty + width * tc,
                //bottom-right
                tx + width * ta + height * tb, ty + width * tc + height * td,
                //bottom-left
                tx + height * tb, ty + height * td, this.renderCoords);
              }
            }
          }, {
            key: "updateBoundingRect",
            value: function updateBoundingRect() {
              var renderCoords = this.renderCoords,
                transform = this.globalTransform;
              assertTruthy(transform);
              assertTruthy(renderCoords);
              var tb = transform.tb,
                tc = transform.tc;
              var x1 = renderCoords.x1,
                y1 = renderCoords.y1,
                x3 = renderCoords.x3,
                y3 = renderCoords.y3;
              if (tb === 0 || tc === 0) {
                this.renderBound = createBound(x1, y1, x3, y3, this.renderBound);
              } else {
                var x2 = renderCoords.x2,
                  x4 = renderCoords.x4,
                  y2 = renderCoords.y2,
                  y4 = renderCoords.y4;
                this.renderBound = createBound(Math.min(x1, x2, x3, x4), Math.min(y1, y2, y3, y4), Math.max(x1, x2, x3, x4), Math.max(y1, y2, y3, y4), this.renderBound);
              }
            }
            /**
             * This function calculates the clipping rectangle for a node.
             *
             * The function then checks if the node is rotated. If the node requires clipping and is not rotated, a new clipping rectangle is created based on the node's global transform and dimensions.
             * If a parent clipping rectangle exists, it is intersected with the node's clipping rectangle (if it exists), or replaces the node's clipping rectangle.
             *
             * Finally, the node's parentClippingRect and clippingRect properties are updated.
             */
          }, {
            key: "calculateClippingRect",
            value: function calculateClippingRect(parentClippingRect) {
              assertTruthy(this.globalTransform);
              var clippingRect = this.clippingRect,
                props = this.props,
                gt = this.globalTransform;
              var clipping = props.clipping;
              var isRotated = gt.tb !== 0 || gt.tc !== 0;
              if (clipping && !isRotated) {
                clippingRect.x = gt.tx;
                clippingRect.y = gt.ty;
                clippingRect.width = this.width * gt.ta;
                clippingRect.height = this.height * gt.td;
                clippingRect.valid = true;
              } else {
                clippingRect.valid = false;
              }
              if (parentClippingRect.valid && clippingRect.valid) {
                // Intersect parent clipping rect with node clipping rect
                intersectRect(parentClippingRect, clippingRect, clippingRect);
              } else if (parentClippingRect.valid) {
                // Copy parent clipping rect
                copyRect(parentClippingRect, clippingRect);
                clippingRect.valid = true;
              }
            }
          }, {
            key: "calculateZIndex",
            value: function calculateZIndex() {
              var _props$parent, _props$parent2;
              var props = this.props;
              var z = props.zIndex || 0;
              var p = ((_props$parent = props.parent) === null || _props$parent === void 0 ? void 0 : _props$parent.zIndex) || 0;
              var zIndex = z;
              if ((_props$parent2 = props.parent) !== null && _props$parent2 !== void 0 && _props$parent2.zIndexLocked) {
                zIndex = z < p ? z : p;
              }
              this.calcZIndex = zIndex;
            }
            /**
             * Destroy the node and cleanup all resources
             */
          }, {
            key: "destroy",
            value: function destroy() {
              this.unloadTexture();
              this.clippingRect.valid = false;
              this.isRenderable = false;
              delete this.renderCoords;
              delete this.renderBound;
              delete this.strictBound;
              delete this.preloadBound;
              delete this.globalTransform;
              delete this.scaleRotateTransform;
              delete this.localTransform;
              this.props.texture = null;
              this.props.shader = this.stage.defShaderCtr;
              var children = _toConsumableArray(this.children);
              for (var i = 0; i < children.length; i++) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                children[i].destroy();
              }
              // This very action will also remove the node from the parent's children array
              this.parent = null;
              if (this.rtt) {
                this.stage.renderer.removeRTTNode(this);
              }
              this.removeAllListeners();
            }
          }, {
            key: "renderQuads",
            value: function renderQuads(renderer) {
              var _this$props3 = this.props,
                texture = _this$props3.texture,
                width = _this$props3.width,
                height = _this$props3.height,
                textureOptions = _this$props3.textureOptions,
                rtt = _this$props3.rtt,
                shader = _this$props3.shader;
              // Prevent quad rendering if parent has a render texture
              // and renderer is not currently rendering to a texture
              if (this.parentHasRenderTexture) {
                if (!renderer.renderToTextureActive) {
                  return;
                }
                // Prevent quad rendering if parent render texture is not the active render texture
                if (this.parentRenderTexture !== renderer.activeRttNode) {
                  return;
                }
              }
              var premultipliedColorTl = this.premultipliedColorTl,
                premultipliedColorTr = this.premultipliedColorTr,
                premultipliedColorBl = this.premultipliedColorBl,
                premultipliedColorBr = this.premultipliedColorBr;
              var zIndex = this.zIndex,
                worldAlpha = this.worldAlpha,
                gt = this.globalTransform,
                clippingRect = this.clippingRect,
                renderCoords = this.renderCoords;
              assertTruthy(gt);
              assertTruthy(renderCoords);
              // add to list of renderables to be sorted before rendering
              renderer.addQuad({
                width: width,
                height: height,
                colorTl: premultipliedColorTl,
                colorTr: premultipliedColorTr,
                colorBl: premultipliedColorBl,
                colorBr: premultipliedColorBr,
                texture: texture,
                textureOptions: textureOptions,
                zIndex: zIndex,
                shader: shader.shader,
                shaderProps: shader.getResolvedProps(),
                alpha: worldAlpha,
                clippingRect: clippingRect,
                tx: gt.tx,
                ty: gt.ty,
                ta: gt.ta,
                tb: gt.tb,
                tc: gt.tc,
                td: gt.td,
                renderCoords: renderCoords,
                rtt: rtt,
                parentHasRenderTexture: this.parentHasRenderTexture,
                framebufferDimensions: this.framebufferDimensions
              });
            }
            //#region Properties
          }, {
            key: "id",
            get: function get() {
              return this._id;
            }
          }, {
            key: "data",
            get: function get() {
              return this.props.data;
            },
            set: function set(d) {
              this.props.data = d;
            }
          }, {
            key: "x",
            get: function get() {
              return this.props.x;
            },
            set: function set(value) {
              if (this.props.x !== value) {
                this.props.x = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "absX",
            get: function get() {
              var _this$props$parent2, _this$props$parent3;
              return this.props.x + -this.props.width * this.props.mountX + (((_this$props$parent2 = this.props.parent) === null || _this$props$parent2 === void 0 ? void 0 : _this$props$parent2.absX) || ((_this$props$parent3 = this.props.parent) === null || _this$props$parent3 === void 0 || (_this$props$parent3 = _this$props$parent3.globalTransform) === null || _this$props$parent3 === void 0 ? void 0 : _this$props$parent3.tx) || 0);
            }
          }, {
            key: "absY",
            get: function get() {
              var _this$props$parent$ab, _this$props$parent4;
              return this.props.y + -this.props.height * this.props.mountY + ((_this$props$parent$ab = (_this$props$parent4 = this.props.parent) === null || _this$props$parent4 === void 0 ? void 0 : _this$props$parent4.absY) !== null && _this$props$parent$ab !== void 0 ? _this$props$parent$ab : 0);
            }
          }, {
            key: "y",
            get: function get() {
              return this.props.y;
            },
            set: function set(value) {
              if (this.props.y !== value) {
                this.props.y = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "width",
            get: function get() {
              return this.props.width;
            },
            set: function set(value) {
              if (this.props.width !== value) {
                this.props.width = value;
                this.setUpdateType(UpdateType.Local);
                if (this.props.rtt) {
                  this.texture = this.stage.txManager.loadTexture('RenderTexture', {
                    width: this.width,
                    height: this.height
                  });
                  this.textureOptions.preload = true;
                  this.setUpdateType(UpdateType.RenderTexture);
                }
              }
            }
          }, {
            key: "height",
            get: function get() {
              return this.props.height;
            },
            set: function set(value) {
              if (this.props.height !== value) {
                this.props.height = value;
                this.setUpdateType(UpdateType.Local);
                if (this.props.rtt) {
                  this.texture = this.stage.txManager.loadTexture('RenderTexture', {
                    width: this.width,
                    height: this.height
                  });
                  this.textureOptions.preload = true;
                  this.setUpdateType(UpdateType.RenderTexture);
                }
              }
            }
          }, {
            key: "scale",
            get: function get() {
              // The CoreNode `scale` property is only used by Animations.
              // Unlike INode, `null` should never be possibility for Animations.
              return this.scaleX;
            },
            set: function set(value) {
              // The CoreNode `scale` property is only used by Animations.
              // Unlike INode, `null` should never be possibility for Animations.
              this.scaleX = value;
              this.scaleY = value;
            }
          }, {
            key: "scaleX",
            get: function get() {
              return this.props.scaleX;
            },
            set: function set(value) {
              if (this.props.scaleX !== value) {
                this.props.scaleX = value;
                this.setUpdateType(UpdateType.ScaleRotate);
              }
            }
          }, {
            key: "scaleY",
            get: function get() {
              return this.props.scaleY;
            },
            set: function set(value) {
              if (this.props.scaleY !== value) {
                this.props.scaleY = value;
                this.setUpdateType(UpdateType.ScaleRotate);
              }
            }
          }, {
            key: "mount",
            get: function get() {
              return this.props.mount;
            },
            set: function set(value) {
              if (this.props.mountX !== value || this.props.mountY !== value) {
                this.props.mountX = value;
                this.props.mountY = value;
                this.props.mount = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "mountX",
            get: function get() {
              return this.props.mountX;
            },
            set: function set(value) {
              if (this.props.mountX !== value) {
                this.props.mountX = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "mountY",
            get: function get() {
              return this.props.mountY;
            },
            set: function set(value) {
              if (this.props.mountY !== value) {
                this.props.mountY = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "pivot",
            get: function get() {
              return this.props.pivot;
            },
            set: function set(value) {
              if (this.props.pivotX !== value || this.props.pivotY !== value) {
                this.props.pivotX = value;
                this.props.pivotY = value;
                this.props.pivot = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "pivotX",
            get: function get() {
              return this.props.pivotX;
            },
            set: function set(value) {
              if (this.props.pivotX !== value) {
                this.props.pivotX = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "pivotY",
            get: function get() {
              return this.props.pivotY;
            },
            set: function set(value) {
              if (this.props.pivotY !== value) {
                this.props.pivotY = value;
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "rotation",
            get: function get() {
              return this.props.rotation;
            },
            set: function set(value) {
              if (this.props.rotation !== value) {
                this.props.rotation = value;
                this.setUpdateType(UpdateType.ScaleRotate);
              }
            }
          }, {
            key: "alpha",
            get: function get() {
              return this.props.alpha;
            },
            set: function set(value) {
              this.props.alpha = value;
              this.setUpdateType(UpdateType.PremultipliedColors | UpdateType.WorldAlpha);
            }
          }, {
            key: "autosize",
            get: function get() {
              return this.props.autosize;
            },
            set: function set(value) {
              this.props.autosize = value;
            }
          }, {
            key: "clipping",
            get: function get() {
              return this.props.clipping;
            },
            set: function set(value) {
              this.props.clipping = value;
              this.setUpdateType(UpdateType.Clipping);
            }
          }, {
            key: "color",
            get: function get() {
              return this.props.color;
            },
            set: function set(value) {
              this.colorTop = value;
              this.colorBottom = value;
              this.colorLeft = value;
              this.colorRight = value;
              this.props.color = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorTop",
            get: function get() {
              return this.props.colorTop;
            },
            set: function set(value) {
              if (this.props.colorTl !== value || this.props.colorTr !== value) {
                this.colorTl = value;
                this.colorTr = value;
              }
              this.props.colorTop = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorBottom",
            get: function get() {
              return this.props.colorBottom;
            },
            set: function set(value) {
              if (this.props.colorBl !== value || this.props.colorBr !== value) {
                this.colorBl = value;
                this.colorBr = value;
              }
              this.props.colorBottom = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorLeft",
            get: function get() {
              return this.props.colorLeft;
            },
            set: function set(value) {
              if (this.props.colorTl !== value || this.props.colorBl !== value) {
                this.colorTl = value;
                this.colorBl = value;
              }
              this.props.colorLeft = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorRight",
            get: function get() {
              return this.props.colorRight;
            },
            set: function set(value) {
              if (this.props.colorTr !== value || this.props.colorBr !== value) {
                this.colorTr = value;
                this.colorBr = value;
              }
              this.props.colorRight = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorTl",
            get: function get() {
              return this.props.colorTl;
            },
            set: function set(value) {
              this.props.colorTl = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorTr",
            get: function get() {
              return this.props.colorTr;
            },
            set: function set(value) {
              this.props.colorTr = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorBl",
            get: function get() {
              return this.props.colorBl;
            },
            set: function set(value) {
              this.props.colorBl = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
          }, {
            key: "colorBr",
            get: function get() {
              return this.props.colorBr;
            },
            set: function set(value) {
              this.props.colorBr = value;
              this.setUpdateType(UpdateType.PremultipliedColors);
            }
            // we're only interested in parent zIndex to test
            // if we should use node zIndex is higher then parent zIndex
          }, {
            key: "zIndexLocked",
            get: function get() {
              return this.props.zIndexLocked || 0;
            },
            set: function set(value) {
              this.props.zIndexLocked = value;
              this.setUpdateType(UpdateType.CalculatedZIndex | UpdateType.Children);
              this.children.forEach(function (child) {
                child.setUpdateType(UpdateType.CalculatedZIndex);
              });
            }
          }, {
            key: "zIndex",
            get: function get() {
              return this.props.zIndex;
            },
            set: function set(value) {
              this.props.zIndex = value;
              this.setUpdateType(UpdateType.CalculatedZIndex | UpdateType.Children);
              this.children.forEach(function (child) {
                child.setUpdateType(UpdateType.CalculatedZIndex);
              });
            }
          }, {
            key: "parent",
            get: function get() {
              return this.props.parent;
            },
            set: function set(newParent) {
              var oldParent = this.props.parent;
              if (oldParent === newParent) {
                return;
              }
              this.props.parent = newParent;
              if (oldParent) {
                var index = oldParent.children.indexOf(this);
                assertTruthy(index !== -1, "CoreNode.parent: Node not found in old parent's children!");
                oldParent.children.splice(index, 1);
                oldParent.setUpdateType(UpdateType.Children | UpdateType.ZIndexSortedChildren);
              }
              if (newParent) {
                newParent.children.push(this);
                // Since this node has a new parent, to be safe, have it do a full update.
                this.setUpdateType(UpdateType.All);
                // Tell parent that it's children need to be updated and sorted.
                newParent.setUpdateType(UpdateType.Children | UpdateType.ZIndexSortedChildren);
                if (newParent.rtt || newParent.parentHasRenderTexture) {
                  this.setRTTUpdates(UpdateType.All);
                }
              }
              this.updateScaleRotateTransform();
            }
          }, {
            key: "preventCleanup",
            get: function get() {
              return this.props.preventCleanup;
            },
            set: function set(value) {
              this.props.preventCleanup = value;
            }
          }, {
            key: "rtt",
            get: function get() {
              return this.props.rtt;
            },
            set: function set(value) {
              var _this$stage$renderer2;
              if (this.props.rtt === true) {
                this.props.rtt = value;
                // unload texture if we used to have a render texture
                if (value === false && this.texture !== null) {
                  var _this$stage$renderer;
                  this.unloadTexture();
                  this.setUpdateType(UpdateType.All);
                  this.children.forEach(function (child) {
                    child.parentHasRenderTexture = false;
                  });
                  (_this$stage$renderer = this.stage.renderer) === null || _this$stage$renderer === void 0 || _this$stage$renderer.removeRTTNode(this);
                  return;
                }
              }
              // if the new value is false and we didnt have rtt previously, we don't need to do anything
              if (value === false) {
                return;
              }
              // load texture
              this.texture = this.stage.txManager.loadTexture('RenderTexture', {
                width: this.width,
                height: this.height
              });
              this.textureOptions.preload = true;
              this.props.rtt = true;
              this.hasRTTupdates = true;
              this.setUpdateType(UpdateType.All);
              this.children.forEach(function (child) {
                child.setUpdateType(UpdateType.All);
              });
              // Store RTT nodes in a separate list
              (_this$stage$renderer2 = this.stage.renderer) === null || _this$stage$renderer2 === void 0 || _this$stage$renderer2.renderToTexture(this);
            }
          }, {
            key: "shader",
            get: function get() {
              return this.props.shader;
            },
            set: function set(value) {
              if (this.props.shader === value) {
                return;
              }
              this.props.shader = value;
              this.setUpdateType(UpdateType.IsRenderable);
            }
          }, {
            key: "src",
            get: function get() {
              return this.props.src;
            },
            set: function set(imageUrl) {
              if (this.props.src === imageUrl) {
                return;
              }
              this.props.src = imageUrl;
              if (!imageUrl) {
                this.texture = null;
                return;
              }
              this.texture = this.stage.txManager.loadTexture('ImageTexture', {
                src: imageUrl,
                width: this.props.width,
                height: this.props.height,
                type: this.props.imageType,
                sx: this.props.srcX,
                sy: this.props.srcY,
                sw: this.props.srcWidth,
                sh: this.props.srcHeight
              });
            }
          }, {
            key: "imageType",
            get: function get() {
              return this.props.imageType || null;
            },
            set: function set(type) {
              if (this.props.imageType === type) {
                return;
              }
              this.props.imageType = type;
            }
          }, {
            key: "srcHeight",
            get: function get() {
              return this.props.srcHeight;
            },
            set: function set(value) {
              this.props.srcHeight = value;
            }
          }, {
            key: "srcWidth",
            get: function get() {
              return this.props.srcWidth;
            },
            set: function set(value) {
              this.props.srcWidth = value;
            }
          }, {
            key: "srcX",
            get: function get() {
              return this.props.srcX;
            },
            set: function set(value) {
              this.props.srcX = value;
            }
          }, {
            key: "srcY",
            get: function get() {
              return this.props.srcY;
            },
            set: function set(value) {
              this.props.srcY = value;
            }
            /**
             * Returns the framebuffer dimensions of the node.
             * If the node has a render texture, the dimensions are the same as the node's dimensions.
             * If the node does not have a render texture, the dimensions are inherited from the parent.
             * If the node parent has a render texture and the node is a render texture, the nodes dimensions are used.
             */
          }, {
            key: "framebufferDimensions",
            get: function get() {
              if (this.parentHasRenderTexture && !this.rtt && this.parent) {
                return this.parent.framebufferDimensions;
              }
              return {
                width: this.width,
                height: this.height
              };
            }
            /**
             * Returns the parent render texture node if it exists.
             */
          }, {
            key: "parentRenderTexture",
            get: function get() {
              var parent = this.parent;
              while (parent) {
                if (parent.rtt) {
                  return parent;
                }
                parent = parent.parent;
              }
              return null;
            }
          }, {
            key: "texture",
            get: function get() {
              return this.props.texture;
            },
            set: function set(value) {
              if (this.props.texture === value) {
                return;
              }
              var oldTexture = this.props.texture;
              if (oldTexture) {
                oldTexture.setRenderableOwner(this, false);
                this.unloadTexture();
              }
              this.props.texture = value;
              if (value) {
                value.setRenderableOwner(this, this.isRenderable);
                this.loadTexture();
              }
              this.setUpdateType(UpdateType.IsRenderable);
            }
          }, {
            key: "textureOptions",
            get: function get() {
              return this.props.textureOptions;
            },
            set: function set(value) {
              this.props.textureOptions = value;
            }
          }, {
            key: "setRTTUpdates",
            value: function setRTTUpdates(type) {
              var _this$parent;
              this.hasRTTupdates = true;
              (_this$parent = this.parent) === null || _this$parent === void 0 || _this$parent.setRTTUpdates(type);
            }
          }, {
            key: "animate",
            value: function animate(props, settings) {
              var animation = new CoreAnimation(this, props, settings);
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
              var controller = new CoreAnimationController(this.stage.animationManager, animation);
              // eslint-disable-next-line @typescript-eslint/no-unsafe-return
              return controller;
            }
          }, {
            key: "flush",
            value: function flush() {
              // no-op
            }
          }]);
        }(EventEmitter);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Platform render loop initiator
         */
        var startLoop = function startLoop(stage) {
          var isIdle = false;
          var _runLoop = function runLoop() {
            stage.updateFrameTime();
            stage.updateAnimations();
            if (!stage.hasSceneUpdates()) {
              // We still need to calculate the fps else it looks like the app is frozen
              stage.calculateFps();
              setTimeout(_runLoop, 16.666666666666668);
              if (!isIdle) {
                if (stage.txMemManager.checkCleanup()) {
                  stage.txMemManager.cleanup();
                }
                stage.eventBus.emit('idle');
                isIdle = true;
              }
              stage.flushFrameEvents();
              return;
            }
            isIdle = false;
            stage.drawFrame();
            stage.flushFrameEvents();
            requestAnimationFrame(_runLoop);
          };
          requestAnimationFrame(_runLoop);
        };
        /**
         * Return unix timestamp
         * @return {number}
         */
        var getTimeStamp = function getTimeStamp() {
          return performance ? performance.now() : Date.now();
        };

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var AnimationManager = /*#__PURE__*/function () {
          function AnimationManager() {
            _classCallCheck(this, AnimationManager);
            _defineProperty(this, "activeAnimations", new Set());
          }
          return _createClass(AnimationManager, [{
            key: "registerAnimation",
            value: function registerAnimation(animation) {
              this.activeAnimations.add(animation);
            }
          }, {
            key: "unregisterAnimation",
            value: function unregisterAnimation(animation) {
              this.activeAnimations.delete(animation);
            }
          }, {
            key: "update",
            value: function update(dt) {
              this.activeAnimations.forEach(function (animation) {
                animation.update(dt);
              });
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Represents a source of texture data for a CoreContextTexture.
         *
         * @remarks
         * Texture sources are used to populate a CoreContextTexture when that texture
         * is loaded. Texture data retrieved by the CoreContextTexture by the
         * `getTextureData` method. It's the responsibility of the concerete `Texture`
         * subclass to implement this method appropriately.
         */
        var Texture = /*#__PURE__*/function (_EventEmitter5) {
          function Texture(txManager) {
            var _this9;
            _classCallCheck(this, Texture);
            _this9 = _callSuper(this, Texture);
            _defineProperty(_this9, "txManager", void 0);
            /**
             * The dimensions of the texture
             *
             * @remarks
             * Until the texture data is loaded for the first time the value will be
             * `null`.
             */
            _defineProperty(_this9, "dimensions", null);
            _defineProperty(_this9, "error", null);
            _defineProperty(_this9, "state", 'freed');
            _defineProperty(_this9, "renderableOwners", new Set());
            _defineProperty(_this9, "renderable", false);
            _defineProperty(_this9, "lastRenderableChangeTime", 0);
            _defineProperty(_this9, "preventCleanup", false);
            _this9.txManager = txManager;
            return _this9;
          }
          /**
           * Add/remove an owner to/from the Texture based on its renderability.
           *
           * @remarks
           * Any object can own a texture, be it a CoreNode or even the state object
           * from a Text Renderer.
           *
           * When the reference to the texture that an owner object holds is replaced
           * or cleared it must call this with `renderable=false` to release the owner
           * association.
           *
           * @param owner
           * @param renderable
           */
          _inherits(Texture, _EventEmitter5);
          return _createClass(Texture, [{
            key: "setRenderableOwner",
            value: function setRenderableOwner(owner, renderable) {
              var oldSize = this.renderableOwners.size;
              if (renderable) {
                this.renderableOwners.add(owner);
                var newSize = this.renderableOwners.size;
                if (newSize > oldSize && newSize === 1) {
                  var _this$onChangeIsRende;
                  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                  this.renderable = true;
                  this.lastRenderableChangeTime = this.txManager.frameTime;
                  (_this$onChangeIsRende = this.onChangeIsRenderable) === null || _this$onChangeIsRende === void 0 || _this$onChangeIsRende.call(this, true);
                }
              } else {
                this.renderableOwners.delete(owner);
                var _newSize = this.renderableOwners.size;
                if (_newSize < oldSize && _newSize === 0) {
                  var _this$onChangeIsRende2;
                  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                  this.renderable = false;
                  this.lastRenderableChangeTime = this.txManager.frameTime;
                  (_this$onChangeIsRende2 = this.onChangeIsRenderable) === null || _this$onChangeIsRende2 === void 0 || _this$onChangeIsRende2.call(this, false);
                }
              }
            }
            /**
             * Get the CoreContextTexture for this Texture
             *
             * @remarks
             * Each Texture has a corresponding CoreContextTexture that is used to
             * manage the texture's native data depending on the renderer's mode
             * (WebGL, Canvas, etc).
             *
             * The Texture and CoreContextTexture are always linked together in a 1:1
             * relationship.
             */
          }, {
            key: "ctxTexture",
            get: function get() {
              // The first time this is called, create the ctxTexture
              var ctxTexture = this.txManager.renderer.createCtxTexture(this);
              // And replace this getter with the value for future calls
              Object.defineProperty(this, 'ctxTexture', {
                value: ctxTexture
              });
              return ctxTexture;
            }
            /**
             * Set the state of the texture
             *
             * @remark
             * Intended for internal-use only but declared public so that it can be set
             * by it's associated {@link CoreContextTexture}
             *
             * @param state
             * @param args
             */
          }, {
            key: "setState",
            value: function setState(state) {
              if (this.state !== state) {
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                this.state = state;
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {
                  args[_key3 - 1] = arguments[_key3];
                }
                if (state === 'loaded') {
                  var loadedArgs = args;
                  this.dimensions = loadedArgs[0];
                } else if (state === 'failed') {
                  var failedArgs = args;
                  this.error = failedArgs[0];
                }
                this.emit.apply(this, [state].concat(args));
              }
            }
            /**
             * Make a cache key for this texture.
             *
             * @remarks
             * Each concrete `Texture` subclass must implement this method to provide an
             * appropriate cache key for the texture type including the texture's
             * properties that uniquely identify a copy of the texture. If the texture
             * type does not support caching, then this method should return `false`.
             *
             * @param props
             * @returns
             * A cache key for this texture or `false` if the texture type does not
             * support caching.
             */
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
          }], [{
            key: "makeCacheKey",
            value: function makeCacheKey(props) {
              return false;
            }
            /**
             * Resolve the default values for the texture's properties.
             *
             * @remarks
             * Each concrete `Texture` subclass must implement this method to provide
             * default values for the texture's optional properties.
             *
             * @param props
             * @returns
             * The default values for the texture's properties.
             */
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            props) {
              return {};
            }
          }]);
        }(EventEmitter);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Note that, within the createImageWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as
         *  the converted code of this section is converted to a blob and used as the js of the web worker thread.
         *
         * The createImageWorker function is a web worker that fetches an image from a URL and returns an ImageBitmap object.
         * The eslint @typescript rule is disabled for the entire function because the function is converted to a blob and used as the
         * js of the web worker thread, so the typescript syntax is not valid in this context.
         */
        /* eslint-disable */
        function createImageWorker() {
          function hasAlphaChannel(mimeType) {
            return mimeType.indexOf('image/png') !== -1;
          }
          function getImage(src, premultiplyAlpha, x, y, width, height) {
            return new Promise(function (resolve, reject) {
              var xhr = new XMLHttpRequest();
              xhr.open('GET', src, true);
              xhr.responseType = 'blob';
              xhr.onload = function () {
                if (xhr.status !== 200) {
                  return reject(new Error('Failed to load image: ' + xhr.statusText));
                }
                var blob = xhr.response;
                var withAlphaChannel = premultiplyAlpha !== undefined ? premultiplyAlpha : hasAlphaChannel(blob.type);
                if (width !== null && height !== null) {
                  createImageBitmap(blob, x || 0, y || 0, width, height, {
                    premultiplyAlpha: withAlphaChannel ? 'premultiply' : 'none',
                    colorSpaceConversion: 'none',
                    imageOrientation: 'none'
                  }).then(function (data) {
                    resolve({
                      data: data,
                      premultiplyAlpha: premultiplyAlpha
                    });
                  }).catch(function (error) {
                    reject(error);
                  });
                  return;
                }
                createImageBitmap(blob, {
                  premultiplyAlpha: withAlphaChannel ? 'premultiply' : 'none',
                  colorSpaceConversion: 'none',
                  imageOrientation: 'none'
                }).then(function (data) {
                  resolve({
                    data: data,
                    premultiplyAlpha: premultiplyAlpha
                  });
                }).catch(function (error) {
                  reject(error);
                });
              };
              xhr.onerror = function () {
                reject(new Error('Network error occurred while trying to fetch the image.'));
              };
              xhr.send();
            });
          }
          self.onmessage = function (event) {
            var src = event.data.src;
            var id = event.data.id;
            var premultiplyAlpha = event.data.premultiplyAlpha;
            var x = event.data.sx;
            var y = event.data.sy;
            var width = event.data.sw;
            var height = event.data.sh;
            getImage(src, premultiplyAlpha, x, y, width, height).then(function (data) {
              self.postMessage({
                id: id,
                src: src,
                data: data
              });
            }).catch(function (error) {
              self.postMessage({
                id: id,
                src: src,
                error: error.message
              });
            });
          };
        }
        /* eslint-enable */
        var ImageWorkerManager = /*#__PURE__*/function () {
          function ImageWorkerManager(numImageWorkers) {
            var _this10 = this;
            _classCallCheck(this, ImageWorkerManager);
            _defineProperty(this, "imageWorkersEnabled", true);
            _defineProperty(this, "messageManager", {});
            _defineProperty(this, "workers", []);
            _defineProperty(this, "workerIndex", 0);
            _defineProperty(this, "nextId", 0);
            this.workers = this.createWorkers(numImageWorkers);
            this.workers.forEach(function (worker) {
              worker.onmessage = _this10.handleMessage.bind(_this10);
            });
          }
          return _createClass(ImageWorkerManager, [{
            key: "handleMessage",
            value: function handleMessage(event) {
              var _event$data = event.data,
                id = _event$data.id,
                data = _event$data.data,
                error = _event$data.error;
              var msg = this.messageManager[id];
              if (msg) {
                var _msg = _slicedToArray(msg, 2),
                  resolve = _msg[0],
                  reject = _msg[1];
                delete this.messageManager[id];
                if (error) {
                  reject(new Error(error));
                } else {
                  resolve(data);
                }
              }
            }
          }, {
            key: "createWorkers",
            value: function createWorkers() {
              var numWorkers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
              var workerCode = "(".concat(createImageWorker.toString(), ")()");
              var blob = new Blob([workerCode.replace('"use strict";', '')], {
                type: 'application/javascript'
              });
              var blobURL = (self.URL ? URL : webkitURL).createObjectURL(blob);
              var workers = [];
              for (var i = 0; i < numWorkers; i++) {
                workers.push(new Worker(blobURL));
              }
              return workers;
            }
          }, {
            key: "getNextWorker",
            value: function getNextWorker() {
              var worker = this.workers[this.workerIndex];
              this.workerIndex = (this.workerIndex + 1) % this.workers.length;
              return worker;
            }
          }, {
            key: "getImage",
            value: function getImage(src, premultiplyAlpha, sx, sy, sw, sh) {
              var _this11 = this;
              return new Promise(function (resolve, reject) {
                try {
                  if (_this11.workers) {
                    var id = _this11.nextId++;
                    _this11.messageManager[id] = [resolve, reject];
                    var nextWorker = _this11.getNextWorker();
                    if (nextWorker) {
                      nextWorker.postMessage({
                        id: id,
                        src: src,
                        premultiplyAlpha: premultiplyAlpha,
                        sx: sx,
                        sy: sy,
                        sw: sw,
                        sh: sh
                      });
                    }
                  }
                } catch (error) {
                  reject(error);
                }
              });
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Texture consisting of only a 1x1 color pixel
         *
         * @remarks
         * The pixel color is set with the {@link ColorTextureProps.color} prop.
         *
         * This is the default texture used for a Node if it's
         * {@link INodeProps.texture} prop is set to `null` (the default)
         *
         * Generally the 1x1 color pixel is stretched to whatever the set dimensions of
         * a Node are.
         */
        var ColorTexture = /*#__PURE__*/function (_Texture2) {
          function ColorTexture(txManager, props) {
            var _this12;
            _classCallCheck(this, ColorTexture);
            _this12 = _callSuper(this, ColorTexture, [txManager]);
            _defineProperty(_this12, "props", void 0);
            _this12.props = ColorTexture.resolveDefaults(props || {});
            return _this12;
          }
          _inherits(ColorTexture, _Texture2);
          return _createClass(ColorTexture, [{
            key: "color",
            get: function get() {
              return this.props.color;
            },
            set: function set(color) {
              this.props.color = color;
            }
          }, {
            key: "getTextureData",
            value: function () {
              var _getTextureData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                var pixelData32, pixelData8;
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      pixelData32 = new Uint32Array([this.color]);
                      pixelData8 = new Uint8ClampedArray(pixelData32.buffer);
                      return _context.abrupt("return", {
                        data: new ImageData(pixelData8, 1, 1),
                        premultiplyAlpha: true
                      });
                    case 3:
                    case "end":
                      return _context.stop();
                  }
                }, _callee, this);
              }));
              function getTextureData() {
                return _getTextureData.apply(this, arguments);
              }
              return getTextureData;
            }()
          }], [{
            key: "makeCacheKey",
            value: function makeCacheKey(props) {
              var resolvedProps = ColorTexture.resolveDefaults(props);
              return "ColorTexture,".concat(resolvedProps.color);
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              return {
                color: props.color || 0xffffffff
              };
            }
          }]);
        }(Texture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Tests if the given location is a compressed texture container
         * @param url
         * @remarks
         * This function is used to determine if the given image url is a compressed
         * and only supports the following extensions: .ktx and .pvr
         * @returns
         */
        _defineProperty(ColorTexture, "z$__type__Props", void 0);
        function isCompressedTextureContainer(url) {
          return /\.(ktx|pvr)$/.test(url);
        }
        /**
         * Loads a compressed texture container
         * @param url
         * @returns
         */
        var loadCompressedTexture = /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {
            var response, arrayBuffer;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return fetch(url);
                case 2:
                  response = _context2.sent;
                  _context2.next = 5;
                  return response.arrayBuffer();
                case 5:
                  arrayBuffer = _context2.sent;
                  if (!(url.indexOf('.ktx') !== -1)) {
                    _context2.next = 8;
                    break;
                  }
                  return _context2.abrupt("return", loadKTXData(arrayBuffer));
                case 8:
                  return _context2.abrupt("return", loadPVRData(arrayBuffer));
                case 9:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          return function loadCompressedTexture(_x) {
            return _ref.apply(this, arguments);
          };
        }();
        /**
         * Loads a KTX texture container and returns the texture data
         * @param buffer
         * @returns
         */
        var loadKTXData = /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buffer) {
            var view, littleEndian, mipmaps, data, offset, i, imageSize;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  view = new DataView(buffer);
                  littleEndian = view.getUint32(12) === 16909060 ? true : false;
                  mipmaps = [];
                  data = {
                    glInternalFormat: view.getUint32(28, littleEndian),
                    pixelWidth: view.getUint32(36, littleEndian),
                    pixelHeight: view.getUint32(40, littleEndian),
                    numberOfMipmapLevels: view.getUint32(56, littleEndian),
                    bytesOfKeyValueData: view.getUint32(60, littleEndian)
                  };
                  offset = 64; // Key Value Pairs of data start at byte offset 64
                  // But the only known kvp is the API version, so skipping parsing.
                  offset += data.bytesOfKeyValueData;
                  for (i = 0; i < data.numberOfMipmapLevels; i++) {
                    imageSize = view.getUint32(offset);
                    offset += 4;
                    mipmaps.push(view.buffer.slice(offset, imageSize));
                    offset += imageSize;
                  }
                  return _context3.abrupt("return", {
                    data: {
                      glInternalFormat: data.glInternalFormat,
                      mipmaps: mipmaps,
                      width: data.pixelWidth || 0,
                      height: data.pixelHeight || 0,
                      type: 'ktx'
                    },
                    premultiplyAlpha: false
                  });
                case 8:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          return function loadKTXData(_x2) {
            return _ref2.apply(this, arguments);
          };
        }();
        /**
         * Loads a PVR texture container and returns the texture data
         * @param buffer
         * @returns
         */
        var loadPVRData = /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(buffer) {
            var pvrHeaderLength, pvrFormatEtc1, pvrWidth, pvrHeight, pvrMipmapCount, pvrMetadata, arrayBuffer, header, dataOffset, pvrtcData, mipmaps, data, offset, width, height, i, level, view;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  // pvr header length in 32 bits
                  pvrHeaderLength = 13; // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL
                  pvrFormatEtc1 = 0x8d64;
                  pvrWidth = 7;
                  pvrHeight = 6;
                  pvrMipmapCount = 11;
                  pvrMetadata = 12;
                  arrayBuffer = buffer;
                  header = new Int32Array(arrayBuffer, 0, pvrHeaderLength); // @ts-expect-error Object possibly undefined
                  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
                  dataOffset = header[pvrMetadata] + 52;
                  pvrtcData = new Uint8Array(arrayBuffer, dataOffset);
                  mipmaps = [];
                  data = {
                    pixelWidth: header[pvrWidth],
                    pixelHeight: header[pvrHeight],
                    numberOfMipmapLevels: header[pvrMipmapCount] || 0
                  };
                  offset = 0;
                  width = data.pixelWidth || 0;
                  height = data.pixelHeight || 0;
                  for (i = 0; i < data.numberOfMipmapLevels; i++) {
                    level = (width + 3 >> 2) * (height + 3 >> 2) * 8;
                    view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);
                    mipmaps.push(view);
                    offset += level;
                    width = width >> 1;
                    height = height >> 1;
                  }
                  return _context4.abrupt("return", {
                    data: {
                      glInternalFormat: pvrFormatEtc1,
                      mipmaps: mipmaps,
                      width: data.pixelWidth || 0,
                      height: data.pixelHeight || 0,
                      type: 'pvr'
                    },
                    premultiplyAlpha: false
                  });
                case 17:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          return function loadPVRData(_x3) {
            return _ref3.apply(this, arguments);
          };
        }();

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Tests if the given location is a SVG
         * @param url
         * @remarks
         * This function is used to determine if the given image url is a SVG
         * image
         * @returns
         */
        function isSvgImage(url) {
          return /\.(svg)$/.test(url);
        }
        /**
         * Loads a SVG image
         * @param url
         * @returns
         */
        var loadSvg = function loadSvg(url, width, height, sx, sy, sw, sh) {
          return new Promise(function (resolve, reject) {
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            assertTruthy(ctx);
            ctx.imageSmoothingEnabled = true;
            var img = new Image();
            img.onload = function () {
              var x = sx !== null && sx !== void 0 ? sx : 0;
              var y = sy !== null && sy !== void 0 ? sy : 0;
              var w = width || img.width;
              var h = height || img.height;
              canvas.width = w;
              canvas.height = h;
              ctx.drawImage(img, 0, 0, w, h);
              resolve({
                data: ctx.getImageData(x, y, sw !== null && sw !== void 0 ? sw : w, sh !== null && sh !== void 0 ? sh : h),
                premultiplyAlpha: false
              });
            };
            img.onerror = function (err) {
              reject(err);
            };
            img.src = url;
          });
        };

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Texture consisting of an image loaded from a URL
         *
         * @remarks
         * The ImageTexture's {@link ImageTextureProps.src} prop defines the image URL
         * to be downloaded.
         *
         * By default, the texture's alpha values will be premultiplied into its color
         * values which is generally the desired setting before they are sent to the
         * texture's associated {@link Shader}. However, in special cases you may want
         * the Shader to receive straight (non-premultiplied) values. In that case you
         * can disable the default behavior by setting the
         * {@link ImageTextureProps.premultiplyAlpha} prop to `false`.
         */
        var ImageTexture = /*#__PURE__*/function (_Texture3) {
          function ImageTexture(txManager, props) {
            var _this13;
            _classCallCheck(this, ImageTexture);
            _this13 = _callSuper(this, ImageTexture, [txManager]);
            _defineProperty(_this13, "props", void 0);
            _this13.props = ImageTexture.resolveDefaults(props);
            return _this13;
          }
          _inherits(ImageTexture, _Texture3);
          return _createClass(ImageTexture, [{
            key: "hasAlphaChannel",
            value: function hasAlphaChannel(mimeType) {
              return mimeType.indexOf('image/png') !== -1;
            }
          }, {
            key: "loadImage",
            value: function () {
              var _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(src) {
                var _this$props4, premultiplyAlpha, sx, sy, sw, sh, width, height, response, blob, hasAlphaChannel, img;
                return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                  while (1) switch (_context5.prev = _context5.next) {
                    case 0:
                      _this$props4 = this.props, premultiplyAlpha = _this$props4.premultiplyAlpha, sx = _this$props4.sx, sy = _this$props4.sy, sw = _this$props4.sw, sh = _this$props4.sh, width = _this$props4.width, height = _this$props4.height;
                      if (!(this.txManager.imageWorkerManager !== null)) {
                        _context5.next = 7;
                        break;
                      }
                      _context5.next = 4;
                      return this.txManager.imageWorkerManager.getImage(src, premultiplyAlpha, sx, sy, sw, sh);
                    case 4:
                      return _context5.abrupt("return", _context5.sent);
                    case 7:
                      if (!(this.txManager.hasCreateImageBitmap === true)) {
                        _context5.next = 28;
                        break;
                      }
                      _context5.next = 10;
                      return fetch(src);
                    case 10:
                      response = _context5.sent;
                      _context5.next = 13;
                      return response.blob();
                    case 13:
                      blob = _context5.sent;
                      hasAlphaChannel = premultiplyAlpha !== null && premultiplyAlpha !== void 0 ? premultiplyAlpha : this.hasAlphaChannel(blob.type);
                      if (!(sw !== null && sh !== null)) {
                        _context5.next = 21;
                        break;
                      }
                      _context5.next = 18;
                      return createImageBitmap(blob, sx !== null && sx !== void 0 ? sx : 0, sy !== null && sy !== void 0 ? sy : 0, sw, sh, {
                        premultiplyAlpha: hasAlphaChannel ? 'premultiply' : 'none',
                        colorSpaceConversion: 'none',
                        imageOrientation: 'none'
                      });
                    case 18:
                      _context5.t0 = _context5.sent;
                      _context5.t1 = hasAlphaChannel;
                      return _context5.abrupt("return", {
                        data: _context5.t0,
                        premultiplyAlpha: _context5.t1
                      });
                    case 21:
                      _context5.next = 23;
                      return createImageBitmap(blob, {
                        premultiplyAlpha: hasAlphaChannel ? 'premultiply' : 'none',
                        colorSpaceConversion: 'none',
                        imageOrientation: 'none'
                      });
                    case 23:
                      _context5.t2 = _context5.sent;
                      _context5.t3 = hasAlphaChannel;
                      return _context5.abrupt("return", {
                        data: _context5.t2,
                        premultiplyAlpha: _context5.t3
                      });
                    case 28:
                      img = new Image(width || undefined, height || undefined);
                      if (!(src.substr(0, 5) === 'data:')) {
                        img.crossOrigin = 'Anonymous';
                      }
                      img.src = src;
                      _context5.next = 33;
                      return new Promise(function (resolve, reject) {
                        img.onload = function () {
                          return resolve();
                        };
                        img.onerror = function () {
                          return reject(new Error("Failed to load image"));
                        };
                      }).catch(function (e) {
                        console.error(e);
                      });
                    case 33:
                      return _context5.abrupt("return", {
                        data: img,
                        premultiplyAlpha: premultiplyAlpha !== null && premultiplyAlpha !== void 0 ? premultiplyAlpha : true
                      });
                    case 34:
                    case "end":
                      return _context5.stop();
                  }
                }, _callee5, this);
              }));
              function loadImage(_x4) {
                return _loadImage.apply(this, arguments);
              }
              return loadImage;
            }()
          }, {
            key: "getTextureData",
            value: function () {
              var _getTextureData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
                var _this$props5, src, premultiplyAlpha, type, absoluteSrc;
                return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                  while (1) switch (_context6.prev = _context6.next) {
                    case 0:
                      _this$props5 = this.props, src = _this$props5.src, premultiplyAlpha = _this$props5.premultiplyAlpha, type = _this$props5.type;
                      if (!(src === null)) {
                        _context6.next = 3;
                        break;
                      }
                      return _context6.abrupt("return", {
                        data: null
                      });
                    case 3:
                      if (!(typeof src !== 'string')) {
                        _context6.next = 7;
                        break;
                      }
                      if (!(src instanceof ImageData)) {
                        _context6.next = 6;
                        break;
                      }
                      return _context6.abrupt("return", {
                        data: src,
                        premultiplyAlpha: premultiplyAlpha
                      });
                    case 6:
                      return _context6.abrupt("return", {
                        data: src(),
                        premultiplyAlpha: premultiplyAlpha
                      });
                    case 7:
                      absoluteSrc = convertUrlToAbsolute(src);
                      if (!(type === 'regular')) {
                        _context6.next = 10;
                        break;
                      }
                      return _context6.abrupt("return", this.loadImage(absoluteSrc));
                    case 10:
                      if (!(type === 'svg')) {
                        _context6.next = 12;
                        break;
                      }
                      return _context6.abrupt("return", loadSvg(absoluteSrc, this.props.width, this.props.height, this.props.sx, this.props.sy, this.props.sw, this.props.sh));
                    case 12:
                      if (!(isSvgImage(src) === true)) {
                        _context6.next = 14;
                        break;
                      }
                      return _context6.abrupt("return", loadSvg(absoluteSrc, this.props.width, this.props.height, this.props.sx, this.props.sy, this.props.sw, this.props.sh));
                    case 14:
                      if (!(type === 'compressed')) {
                        _context6.next = 16;
                        break;
                      }
                      return _context6.abrupt("return", loadCompressedTexture(absoluteSrc));
                    case 16:
                      if (!(isCompressedTextureContainer(src) === true)) {
                        _context6.next = 18;
                        break;
                      }
                      return _context6.abrupt("return", loadCompressedTexture(absoluteSrc));
                    case 18:
                      return _context6.abrupt("return", this.loadImage(absoluteSrc));
                    case 19:
                    case "end":
                      return _context6.stop();
                  }
                }, _callee6, this);
              }));
              function getTextureData() {
                return _getTextureData2.apply(this, arguments);
              }
              return getTextureData;
            }()
            /**
             * Generates a cache key for the ImageTexture based on the provided props.
             * @param props - The props used to generate the cache key.
             * @returns The cache key as a string, or `false` if the key cannot be generated.
             */
          }], [{
            key: "makeCacheKey",
            value: function makeCacheKey(props) {
              var _resolvedProps$premul;
              var resolvedProps = ImageTexture.resolveDefaults(props);
              // Only cache key-able textures; prioritise key
              var key = resolvedProps.key || resolvedProps.src;
              if (typeof key !== 'string') {
                return false;
              }
              // if we have source dimensions, cache the texture separately
              var dimensionProps = '';
              if (resolvedProps.sh !== null && resolvedProps.sw !== null) {
                var _resolvedProps$sx, _resolvedProps$sy;
                dimensionProps += ',';
                dimensionProps += (_resolvedProps$sx = resolvedProps.sx) !== null && _resolvedProps$sx !== void 0 ? _resolvedProps$sx : '';
                dimensionProps += (_resolvedProps$sy = resolvedProps.sy) !== null && _resolvedProps$sy !== void 0 ? _resolvedProps$sy : '';
                dimensionProps += resolvedProps.sw || '';
                dimensionProps += resolvedProps.sh || '';
              }
              return "ImageTexture,".concat(key, ",").concat((_resolvedProps$premul = resolvedProps.premultiplyAlpha) !== null && _resolvedProps$premul !== void 0 ? _resolvedProps$premul : 'true').concat(dimensionProps);
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$src, _props$premultiplyAlp, _props$key, _props$type, _props$width, _props$height, _props$sx, _props$sy, _props$sw, _props$sh;
              return {
                src: (_props$src = props.src) !== null && _props$src !== void 0 ? _props$src : '',
                premultiplyAlpha: (_props$premultiplyAlp = props.premultiplyAlpha) !== null && _props$premultiplyAlp !== void 0 ? _props$premultiplyAlp : true,
                key: (_props$key = props.key) !== null && _props$key !== void 0 ? _props$key : null,
                type: (_props$type = props.type) !== null && _props$type !== void 0 ? _props$type : null,
                width: (_props$width = props.width) !== null && _props$width !== void 0 ? _props$width : null,
                height: (_props$height = props.height) !== null && _props$height !== void 0 ? _props$height : null,
                sx: (_props$sx = props.sx) !== null && _props$sx !== void 0 ? _props$sx : null,
                sy: (_props$sy = props.sy) !== null && _props$sy !== void 0 ? _props$sy : null,
                sw: (_props$sw = props.sw) !== null && _props$sw !== void 0 ? _props$sw : null,
                sh: (_props$sh = props.sh) !== null && _props$sh !== void 0 ? _props$sh : null
              };
            }
          }]);
        }(Texture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Texture consisting of a random grid of greyscale pixels
         *
         * @remarks
         * The width and height of the NoiseTexture are defined by it's
         * {@link NoiseTextureProps.width} and {@link NoiseTextureProps.height}
         * properties. The {@link NoiseTextureProps.cacheId} prop can be varied in order
         * to bypass cache and get newly randomized texture data.
         */
        _defineProperty(ImageTexture, "z$__type__Props", void 0);
        var NoiseTexture = /*#__PURE__*/function (_Texture4) {
          function NoiseTexture(txManager, props) {
            var _this14;
            _classCallCheck(this, NoiseTexture);
            _this14 = _callSuper(this, NoiseTexture, [txManager]);
            _defineProperty(_this14, "props", void 0);
            _this14.props = NoiseTexture.resolveDefaults(props);
            return _this14;
          }
          _inherits(NoiseTexture, _Texture4);
          return _createClass(NoiseTexture, [{
            key: "getTextureData",
            value: function () {
              var _getTextureData3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
                var _this$props6, width, height, size, pixelData8, i, v;
                return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                  while (1) switch (_context7.prev = _context7.next) {
                    case 0:
                      _this$props6 = this.props, width = _this$props6.width, height = _this$props6.height;
                      size = width * height * 4;
                      pixelData8 = new Uint8ClampedArray(size);
                      for (i = 0; i < size; i += 4) {
                        v = Math.floor(Math.random() * 256);
                        pixelData8[i] = v;
                        pixelData8[i + 1] = v;
                        pixelData8[i + 2] = v;
                        pixelData8[i + 3] = 255;
                      }
                      return _context7.abrupt("return", {
                        data: new ImageData(pixelData8, width, height)
                      });
                    case 5:
                    case "end":
                      return _context7.stop();
                  }
                }, _callee7, this);
              }));
              function getTextureData() {
                return _getTextureData3.apply(this, arguments);
              }
              return getTextureData;
            }()
          }], [{
            key: "makeCacheKey",
            value: function makeCacheKey(props) {
              if (props.cacheId === undefined) {
                return false;
              }
              var resolvedProps = NoiseTexture.resolveDefaults(props);
              return "NoiseTexture,".concat(resolvedProps.width, ",").concat(resolvedProps.height, ",").concat(resolvedProps.cacheId);
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width2, _props$height2, _props$cacheId;
              return {
                width: (_props$width2 = props.width) !== null && _props$width2 !== void 0 ? _props$width2 : 128,
                height: (_props$height2 = props.height) !== null && _props$height2 !== void 0 ? _props$height2 : 128,
                cacheId: (_props$cacheId = props.cacheId) !== null && _props$cacheId !== void 0 ? _props$cacheId : 0
              };
            }
          }]);
        }(Texture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A Texture that is a sub-region of another Texture.
         *
         * @remarks
         * The parent texture can be a Sprite Sheet/Texture Atlas and set using the
         * {@link SubTextureProps.texture} prop. The sub-region relative to the parent
         * texture is defined with the {@link SubTextureProps.x},
         * {@link SubTextureProps.y}, {@link SubTextureProps.width}, and
         * {@link SubTextureProps.height} pixel values.
         */
        _defineProperty(NoiseTexture, "z$__type__Props", void 0);
        var SubTexture = /*#__PURE__*/function (_Texture5) {
          function SubTexture(txManager, props) {
            var _this15;
            _classCallCheck(this, SubTexture);
            _this15 = _callSuper(this, SubTexture, [txManager]);
            _defineProperty(_this15, "props", void 0);
            _defineProperty(_this15, "parentTexture", void 0);
            _defineProperty(_this15, "onParentTxLoaded", function () {
              // We ignore the parent's passed dimensions, and simply use the SubTexture's
              // configured dimensions (because that's all that matters here)
              _this15.setState('loaded', {
                width: _this15.props.width,
                height: _this15.props.height
              });
            });
            _defineProperty(_this15, "onParentTxFailed", function (target, error) {
              _this15.setState('failed', error);
            });
            _this15.props = SubTexture.resolveDefaults(props || {});
            _this15.parentTexture = _this15.props.texture;
            // If parent texture is already loaded / failed, trigger loaded event manually
            // so that users get a consistent event experience.
            // We do this in a microtask to allow listeners to be attached in the same
            // synchronous task after calling loadTexture()
            queueMicrotask(function () {
              var parentTx = _this15.parentTexture;
              if (parentTx.state === 'loaded') {
                _this15.onParentTxLoaded(parentTx, parentTx.dimensions);
              } else if (parentTx.state === 'failed') {
                _this15.onParentTxFailed(parentTx, parentTx.error);
              }
              parentTx.on('loaded', _this15.onParentTxLoaded);
              parentTx.on('failed', _this15.onParentTxFailed);
            });
            return _this15;
          }
          _inherits(SubTexture, _Texture5);
          return _createClass(SubTexture, [{
            key: "onChangeIsRenderable",
            value: function onChangeIsRenderable(isRenderable) {
              // Propagate the renderable owner change to the parent texture
              this.parentTexture.setRenderableOwner(this, isRenderable);
            }
          }, {
            key: "getTextureData",
            value: function () {
              var _getTextureData4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
                return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                  while (1) switch (_context8.prev = _context8.next) {
                    case 0:
                      return _context8.abrupt("return", {
                        data: this.props
                      });
                    case 1:
                    case "end":
                      return _context8.stop();
                  }
                }, _callee8, this);
              }));
              function getTextureData() {
                return _getTextureData4.apply(this, arguments);
              }
              return getTextureData;
            }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
          }], [{
            key: "makeCacheKey",
            value: function makeCacheKey(props) {
              return false;
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              return {
                texture: props.texture,
                x: props.x || 0,
                y: props.y || 0,
                width: props.width || 0,
                height: props.height || 0
              };
            }
          }]);
        }(Texture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(SubTexture, "z$__type__Props", void 0);
        var RenderTexture = /*#__PURE__*/function (_Texture6) {
          function RenderTexture(txManager, props) {
            var _this16;
            _classCallCheck(this, RenderTexture);
            _this16 = _callSuper(this, RenderTexture, [txManager]);
            _defineProperty(_this16, "props", void 0);
            _this16.props = RenderTexture.resolveDefaults(props || {});
            return _this16;
          }
          _inherits(RenderTexture, _Texture6);
          return _createClass(RenderTexture, [{
            key: "width",
            get: function get() {
              return this.props.width;
            },
            set: function set(value) {
              this.props.width = value;
            }
          }, {
            key: "height",
            get: function get() {
              return this.props.height;
            },
            set: function set(value) {
              this.props.height = value;
            }
          }, {
            key: "getTextureData",
            value: function () {
              var _getTextureData5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
                return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                  while (1) switch (_context9.prev = _context9.next) {
                    case 0:
                      return _context9.abrupt("return", {
                        data: null,
                        premultiplyAlpha: null
                      });
                    case 1:
                    case "end":
                      return _context9.stop();
                  }
                }, _callee9);
              }));
              function getTextureData() {
                return _getTextureData5.apply(this, arguments);
              }
              return getTextureData;
            }()
          }], [{
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              return {
                width: props.width || 256,
                height: props.height || 256
              };
            }
          }]);
        }(Texture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(RenderTexture, "z$__type__Props", void 0);
        var CoreTextureManager = /*#__PURE__*/function () {
          function CoreTextureManager(numImageWorkers) {
            _classCallCheck(this, CoreTextureManager);
            /**
             * Map of textures by cache key
             */
            _defineProperty(this, "keyCache", new Map());
            /**
             * Map of cache keys by texture
             */
            _defineProperty(this, "inverseKeyCache", new WeakMap());
            /**
             * Map of texture constructors by their type name
             */
            _defineProperty(this, "txConstructors", {});
            _defineProperty(this, "imageWorkerManager", null);
            _defineProperty(this, "hasCreateImageBitmap", !!self.createImageBitmap);
            _defineProperty(this, "hasWorker", !!self.Worker);
            /**
             * Renderer that this texture manager is associated with
             *
             * @remarks
             * This MUST be set before the texture manager is used. Otherwise errors
             * will occur when using the texture manager.
             */
            _defineProperty(this, "renderer", void 0);
            /**
             * The current frame time in milliseconds
             *
             * @remarks
             * This is used to populate the `lastRenderableChangeTime` property of
             * {@link Texture} instances when their renderable state changes.
             *
             * Set by stage via `updateFrameTime` method.
             */
            _defineProperty(this, "frameTime", 0);
            // Register default known texture types
            if (this.hasCreateImageBitmap && this.hasWorker && numImageWorkers > 0) {
              this.imageWorkerManager = new ImageWorkerManager(numImageWorkers);
            }
            if (!this.hasCreateImageBitmap) {
              console.warn('[Lightning] createImageBitmap is not supported on this browser. ImageTexture will be slower.');
            }
            this.registerTextureType('ImageTexture', ImageTexture);
            this.registerTextureType('ColorTexture', ColorTexture);
            this.registerTextureType('NoiseTexture', NoiseTexture);
            this.registerTextureType('SubTexture', SubTexture);
            this.registerTextureType('RenderTexture', RenderTexture);
          }
          return _createClass(CoreTextureManager, [{
            key: "registerTextureType",
            value: function registerTextureType(textureType, textureClass) {
              this.txConstructors[textureType] = textureClass;
            }
          }, {
            key: "loadTexture",
            value: function loadTexture(textureType, props) {
              var texture;
              var TextureClass = this.txConstructors[textureType];
              if (!TextureClass) {
                throw new Error("Texture type \"".concat(textureType, "\" is not registered"));
              }
              if (!texture) {
                var cacheKey = TextureClass.makeCacheKey(props);
                if (cacheKey && this.keyCache.has(cacheKey)) {
                  // console.log('Getting texture by cache key', cacheKey);
                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                  texture = this.keyCache.get(cacheKey);
                } else {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any
                  texture = new TextureClass(this, props);
                  if (cacheKey) {
                    this.initTextureToCache(texture, cacheKey);
                  }
                }
              }
              return texture;
            }
          }, {
            key: "initTextureToCache",
            value: function initTextureToCache(texture, cacheKey) {
              var keyCache = this.keyCache,
                inverseKeyCache = this.inverseKeyCache;
              keyCache.set(cacheKey, texture);
              inverseKeyCache.set(texture, cacheKey);
            }
            /**
             * Remove a texture from the cache
             *
             * @remarks
             * Called by Texture Cleanup when a texture is freed.
             *
             * @param texture
             */
          }, {
            key: "removeTextureFromCache",
            value: function removeTextureFromCache(texture) {
              var inverseKeyCache = this.inverseKeyCache,
                keyCache = this.keyCache;
              var cacheKey = inverseKeyCache.get(texture);
              if (cacheKey) {
                keyCache.delete(cacheKey);
              }
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var fontCache = new Map();
        var weightConversions = {
          normal: 400,
          bold: 700,
          bolder: 900,
          lighter: 100
        };
        var fontWeightToNumber = function fontWeightToNumber(weight) {
          if (typeof weight === 'number') {
            return weight;
          }
          return weightConversions[weight] || 400;
        };
        function resolveFontToUse(familyMapsByPriority, family, weightIn, style, stretch) {
          var weight = fontWeightToNumber(weightIn);
          var _iterator4 = _createForOfIteratorHelper(familyMapsByPriority),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var fontFamiles = _step4.value;
              var fontFaces = fontFamiles[family];
              if (!fontFaces) {
                continue;
              }
              if (fontFaces.size === 1) {
                // No Exact match found, find nearest weight match
                console.warn("TrFontManager: Only one font face found for family: '".concat(family, "' - will be used for all weights and styles"));
                return fontFaces.values().next().value;
              }
              var weightMap = new Map();
              var _iterator5 = _createForOfIteratorHelper(fontFaces),
                _step5;
              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var fontFace = _step5.value;
                  var fontFamilyWeight = fontWeightToNumber(fontFace.descriptors.weight);
                  if (fontFamilyWeight === weight && fontFace.descriptors.style === style && fontFace.descriptors.stretch === stretch) {
                    return fontFace;
                  }
                  weightMap.set(fontFamilyWeight, fontFace);
                }
                // No Exact match found, find nearest weight match
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
              var msg = "TrFontManager: No exact match: '".concat(family, " Weight: ").concat(weight, " Style: ").concat(style, " Stretch: ").concat(stretch, "'");
              console.error(msg);
              // Follow the CSS font-weight algorithm to find the nearest weight match
              // https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#font-matching-algorithm
              if (weight === 400 && weightMap.has(500)) {
                return weightMap.get(500);
              }
              if (weight === 500 && weightMap.has(400)) {
                return weightMap.get(400);
              }
              if (weight < 400) {
                while (weight > 0) {
                  if (weightMap.has(weight)) {
                    return weightMap.get(weight);
                  }
                  weight -= 100;
                }
                // reset back for the next loop
                weight = 600;
              }
              while (weight < 1000) {
                if (weightMap.has(weight)) {
                  return weightMap.get(weight);
                }
                weight += 100;
              }
              // finally check lower again
              weight = 500;
              while (weight > 0) {
                if (weightMap.has(weight)) {
                  return weightMap.get(weight);
                }
                weight -= 100;
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          return;
        }
        var TrFontManager = /*#__PURE__*/function () {
          function TrFontManager(textRenderers) {
            _classCallCheck(this, TrFontManager);
            _defineProperty(this, "textRenderers", void 0);
            this.textRenderers = textRenderers;
            // Intentionally left blank
          }
          return _createClass(TrFontManager, [{
            key: "addFontFace",
            value: function addFontFace(font) {
              // All the font face to all of the text renderers that support it
              for (var trId in this.textRenderers) {
                var tr = this.textRenderers[trId];
                if (tr && tr.isFontFaceSupported(font)) {
                  tr.addFontFace(font);
                }
              }
            }
            /**
             * Utility method to resolve a single font face from a list of prioritized family maps based on
             * a set of font properties.
             *
             * @remarks
             * These are to be used by a text renderer to resolve a font face if needed.
             *
             * @param familyMapsByPriority
             * @param props
             * @returns
             */
          }], [{
            key: "resolveFontFace",
            value: function resolveFontFace(familyMapsByPriority, props) {
              var fontFamily = props.fontFamily,
                fontWeight = props.fontWeight,
                fontStyle = props.fontStyle,
                fontStretch = props.fontStretch;
              var fontCacheString = "".concat(fontFamily).concat(fontStyle).concat(fontWeight).concat(fontStretch);
              if (fontCache.has(fontCacheString) === true) {
                return fontCache.get(fontCacheString);
              }
              var resolvedFont = resolveFontToUse(familyMapsByPriority, fontFamily, fontWeight, fontStyle, fontStretch);
              if (resolvedFont !== undefined) {
                fontCache.set(fontCacheString, resolvedFont);
              }
              return resolvedFont;
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreShader = /*#__PURE__*/function () {
          function CoreShader() {
            _classCallCheck(this, CoreShader);
          }
          return _createClass(CoreShader, null, [{
            key: "makeCacheKey",
            value:
            // abstract draw(): void;
            function makeCacheKey(props) {
              return false;
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              return {};
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        //#endregion Types
        function createShader(glw, type, source) {
          var shader = glw.createShader(type);
          if (!shader) {
            throw new Error();
          }
          glw.shaderSource(shader, source);
          glw.compileShader(shader);
          var success = glw.getShaderParameter(shader, glw.COMPILE_STATUS);
          if (success) {
            return shader;
          }
          console.log(glw.getShaderInfoLog(shader));
          glw.deleteShader(shader);
        }
        function createProgram(glw, vertexShader, fragmentShader) {
          var program = glw.createProgram();
          if (!program) {
            throw new Error();
          }
          glw.attachShader(program, vertexShader);
          glw.attachShader(program, fragmentShader);
          glw.linkProgram(program);
          var success = glw.getProgramParameter(program, glw.LINK_STATUS);
          if (success) {
            return program;
          }
          console.log(glw.getProgramInfoLog(program));
          glw.deleteProgram(program);
          return undefined;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var WebGlCoreShader = /*#__PURE__*/function (_CoreShader) {
          function WebGlCoreShader(options) {
            var _this17;
            _classCallCheck(this, WebGlCoreShader);
            _this17 = _callSuper(this, WebGlCoreShader);
            _defineProperty(_this17, "boundBufferCollection", null);
            _defineProperty(_this17, "buffersBound", false);
            _defineProperty(_this17, "program", void 0);
            /**
             * Vertex Array Object
             *
             * @remarks
             * Used by WebGL2 Only
             */
            _defineProperty(_this17, "vao", void 0);
            _defineProperty(_this17, "renderer", void 0);
            _defineProperty(_this17, "glw", void 0);
            _defineProperty(_this17, "attributeBuffers", void 0);
            _defineProperty(_this17, "attributeLocations", void 0);
            _defineProperty(_this17, "attributeNames", void 0);
            _defineProperty(_this17, "uniformLocations", void 0);
            _defineProperty(_this17, "uniformTypes", void 0);
            _defineProperty(_this17, "supportsIndexedTextures", void 0);
            var renderer = _this17.renderer = options.renderer;
            var glw = _this17.glw = _this17.renderer.glw;
            _this17.supportsIndexedTextures = options.supportsIndexedTextures || false;
            // Check that extensions are supported
            var webGl2 = glw.isWebGl2();
            var requiredExtensions = webGl2 && options.webgl2Extensions || !webGl2 && options.webgl1Extensions || [];
            var glVersion = webGl2 ? '2.0' : '1.0';
            requiredExtensions.forEach(function (extensionName) {
              if (!glw.getExtension(extensionName)) {
                throw new Error("Shader \"".concat(_this17.constructor.name, "\" requires extension \"").concat(extensionName, "\" for WebGL ").concat(glVersion, " but wasn't found"));
              }
            });
            // Gather shader sources
            // - If WebGL 2 and special WebGL 2 sources are provided, we copy those sources and delete
            // the extra copy of them to save memory.
            // TODO: This could be further made optimal by just caching the compiled shaders and completely deleting
            // the source code
            var shaderSources = options.shaderSources || _this17.constructor.shaderSources;
            if (!shaderSources) {
              throw new Error("Shader \"".concat(_this17.constructor.name, "\" is missing shaderSources."));
            } else if (webGl2 && shaderSources !== null && shaderSources !== void 0 && shaderSources.webGl2) {
              shaderSources.fragment = shaderSources.webGl2.fragment;
              shaderSources.vertex = shaderSources.webGl2.vertex;
              delete shaderSources.webGl2;
            }
            var textureUnits = renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
            var vertexSource = shaderSources.vertex instanceof Function ? shaderSources.vertex(textureUnits) : shaderSources.vertex;
            var fragmentSource = shaderSources.fragment instanceof Function ? shaderSources.fragment(textureUnits) : shaderSources.fragment;
            var vertexShader = createShader(glw, glw.VERTEX_SHADER, vertexSource);
            var fragmentShader = createShader(glw, glw.FRAGMENT_SHADER, fragmentSource);
            if (!vertexShader || !fragmentShader) {
              throw new Error();
            }
            var program = createProgram(glw, vertexShader, fragmentShader);
            if (!program) {
              throw new Error();
            }
            _this17.program = program;
            if (webGl2) {
              var vao = glw.createVertexArray();
              if (!vao) {
                throw new Error();
              }
              _this17.vao = vao;
              glw.bindVertexArray(_this17.vao);
            }
            _this17.attributeLocations = {};
            _this17.attributeBuffers = {};
            _this17.attributeNames = [];
            _toConsumableArray(options.attributes).forEach(function (attributeName) {
              var location = glw.getAttribLocation(_this17.program, attributeName);
              if (location < 0) {
                throw new Error("".concat(_this17.constructor.name, ": Vertex shader must have an attribute \"").concat(attributeName, "\"!"));
              }
              var buffer = glw.createBuffer();
              if (!buffer) {
                throw new Error("".concat(_this17.constructor.name, ": Could not create buffer for attribute \"").concat(attributeName, "\""));
              }
              _this17.attributeLocations[attributeName] = location;
              _this17.attributeBuffers[attributeName] = buffer;
              _this17.attributeNames.push(attributeName);
            });
            _this17.uniformLocations = {};
            _this17.uniformTypes = {};
            options.uniforms.forEach(function (uniform) {
              var location = glw.getUniformLocation(_this17.program, uniform.name);
              _this17.uniformTypes[uniform.name] = uniform.uniform;
              if (!location) {
                console.warn("Shader \"".concat(_this17.constructor.name, "\" could not get uniform location for \"").concat(uniform.name, "\""));
                return;
              }
              _this17.uniformLocations[uniform.name] = location;
            });
            return _this17;
          }
          _inherits(WebGlCoreShader, _CoreShader);
          return _createClass(WebGlCoreShader, [{
            key: "bindBufferAttribute",
            value: function bindBufferAttribute(location, buffer, attribute) {
              var glw = this.glw;
              glw.enableVertexAttribArray(location);
              glw.vertexAttribPointer(buffer, location, attribute.size, attribute.type, attribute.normalized, attribute.stride, attribute.offset);
            }
          }, {
            key: "disableAttribute",
            value: function disableAttribute(location) {
              this.glw.disableVertexAttribArray(location);
            }
          }, {
            key: "disableAttributes",
            value: function disableAttributes() {
              for (var loc in this.attributeLocations) {
                this.disableAttribute(this.attributeLocations[loc]);
              }
              this.boundBufferCollection = null;
            }
            /**
             * Given two sets of Shader props destined for this Shader, determine if they can be batched together
             * to reduce the number of draw calls.
             *
             * @remarks
             * This is used by the {@link WebGlCoreRenderer} to determine if it can batch multiple consecutive draw
             * calls into a single draw call.
             *
             * By default, this returns false (meaning no batching is allowed), but can be
             * overridden by child classes to provide more efficient batching.
             *
             * @param propsA
             * @param propsB
             * @returns
             */
          }, {
            key: "canBatchShaderProps",
            value: function canBatchShaderProps(propsA, propsB) {
              return false;
            }
          }, {
            key: "bindRenderOp",
            value: function bindRenderOp(renderOp, props) {
              this.bindBufferCollection(renderOp.buffers);
              if (renderOp.textures.length > 0) {
                this.bindTextures(renderOp.textures);
              }
              var glw = renderOp.glw,
                parentHasRenderTexture = renderOp.parentHasRenderTexture,
                renderToTexture = renderOp.renderToTexture;
              // Skip if the parent and current operation both have render textures
              if (renderToTexture && parentHasRenderTexture) {
                return;
              }
              // Bind render texture framebuffer dimensions as resolution
              // if the parent has a render texture
              if (parentHasRenderTexture) {
                var _ref4 = renderOp.framebufferDimensions || {},
                  width = _ref4.width,
                  height = _ref4.height;
                // Force pixel ratio to 1.0 for render textures since they are always 1:1
                // the final render texture will be rendered to the screen with the correct pixel ratio
                this.setUniform('u_pixelRatio', 1.0);
                // Set resolution to the framebuffer dimensions
                this.setUniform('u_resolution', new Float32Array([width !== null && width !== void 0 ? width : 0, height !== null && height !== void 0 ? height : 0]));
              } else {
                this.setUniform('u_pixelRatio', renderOp.options.pixelRatio);
                this.setUniform('u_resolution', new Float32Array([glw.canvas.width, glw.canvas.height]));
              }
              if (props) {
                // Bind optional automatic uniforms
                // These are only bound if their keys are present in the props.
                if (hasOwn(props, '$dimensions')) {
                  var dimensions = props.$dimensions;
                  if (!dimensions) {
                    dimensions = renderOp.dimensions;
                  }
                  this.setUniform('u_dimensions', [dimensions.width, dimensions.height]);
                }
                if (hasOwn(props, '$alpha')) {
                  var alpha = props.$alpha;
                  if (!alpha) {
                    alpha = renderOp.alpha;
                  }
                  this.setUniform('u_alpha', alpha);
                }
                this.bindProps(props);
              }
            }
          }, {
            key: "setUniform",
            value: function setUniform(name) {
              var _this$glw;
              for (var _len2 = arguments.length, value = new Array(_len2 > 1 ? _len2 - 1 : 0), _key4 = 1; _key4 < _len2; _key4++) {
                value[_key4 - 1] = arguments[_key4];
              }
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unsafe-argument
              (_this$glw = this.glw).setUniform.apply(_this$glw, [this.uniformTypes[name], this.uniformLocations[name]].concat(value));
            }
          }, {
            key: "bindBufferCollection",
            value: function bindBufferCollection(buffer) {
              if (this.boundBufferCollection === buffer) {
                return;
              }
              for (var attributeName in this.attributeLocations) {
                var resolvedBuffer = buffer.getBuffer(attributeName);
                var resolvedInfo = buffer.getAttributeInfo(attributeName);
                assertTruthy(resolvedBuffer, "Buffer for \"".concat(attributeName, "\" not found"));
                assertTruthy(resolvedInfo);
                this.bindBufferAttribute(this.attributeLocations[attributeName], resolvedBuffer, resolvedInfo);
              }
              this.boundBufferCollection = buffer;
            }
          }, {
            key: "bindProps",
            value: function bindProps(props) {
              // Implement in child class
            }
          }, {
            key: "bindTextures",
            value: function bindTextures(textures) {
              // no defaults
            }
          }, {
            key: "attach",
            value: function attach() {
              this.glw.useProgram(this.program);
              this.glw.useProgram(this.program);
              if (this.glw.isWebGl2() && this.vao) {
                this.glw.bindVertexArray(this.vao);
              }
            }
          }, {
            key: "detach",
            value: function detach() {
              this.disableAttributes();
            }
          }]);
        }(CoreShader);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(WebGlCoreShader, "shaderSources", void 0);
        var DefaultShader = /*#__PURE__*/function (_WebGlCoreShader2) {
          function DefaultShader(renderer) {
            _classCallCheck(this, DefaultShader);
            return _callSuper(this, DefaultShader, [{
              renderer: renderer,
              attributes: ['a_position', 'a_textureCoordinate', 'a_color'],
              uniforms: [{
                name: 'u_resolution',
                uniform: 'uniform2fv'
              }, {
                name: 'u_pixelRatio',
                uniform: 'uniform1f'
              }, {
                name: 'u_texture',
                uniform: 'uniform2fv'
              }]
            }]);
          }
          _inherits(DefaultShader, _WebGlCoreShader2);
          return _createClass(DefaultShader, [{
            key: "bindTextures",
            value: function bindTextures(textures) {
              var glw = this.glw;
              glw.activeTexture(0);
              glw.bindTexture(textures[0].ctxTexture);
            }
          }]);
        }(WebGlCoreShader);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // import type { Texture } from '../textures/Texture';
        _defineProperty(DefaultShader, "shaderSources", {
          vertex: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n\n      attribute vec2 a_position;\n      attribute vec2 a_textureCoordinate;\n      attribute vec4 a_color;\n\n      uniform vec2 u_resolution;\n      uniform float u_pixelRatio;\n\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n\n      void main() {\n        vec2 normalized = a_position * u_pixelRatio;\n        vec2 screenSpace = vec2(2.0 / u_resolution.x, -2.0 / u_resolution.y);\n\n        v_color = a_color;\n        v_textureCoordinate = a_textureCoordinate;\n\n        gl_Position = vec4(normalized.x * screenSpace.x - 1.0, normalized.y * -abs(screenSpace.y) + 1.0, 0.0, 1.0);\n        gl_Position.y = -sign(screenSpace.y) * gl_Position.y;\n      }\n    ",
          fragment: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n\n      uniform vec2 u_resolution;\n      uniform sampler2D u_texture;\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n\n      void main() {\n          vec4 color = texture2D(u_texture, v_textureCoordinate);\n          gl_FragColor = vec4(v_color) * texture2D(u_texture, v_textureCoordinate);\n      }\n    "
        });
        var DefaultShaderBatched = /*#__PURE__*/function (_WebGlCoreShader3) {
          function DefaultShaderBatched(renderer) {
            var _this18;
            _classCallCheck(this, DefaultShaderBatched);
            _this18 = _callSuper(this, DefaultShaderBatched, [{
              renderer: renderer,
              attributes: ['a_position', 'a_textureCoordinate', 'a_color', 'a_textureIndex'],
              uniforms: [{
                name: 'u_resolution',
                uniform: 'uniform2fv'
              }, {
                name: 'u_pixelRatio',
                uniform: 'uniform1f'
              }, {
                name: 'u_textures[0]',
                uniform: 'uniform1iv'
              }]
            }]);
            _defineProperty(_this18, "supportsIndexedTextures", true);
            return _this18;
          }
          _inherits(DefaultShaderBatched, _WebGlCoreShader3);
          return _createClass(DefaultShaderBatched, [{
            key: "bindTextures",
            value: function bindTextures(texture) {
              var renderer = this.renderer,
                glw = this.glw;
              if (texture.length > renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS) {
                throw new Error("DefaultShaderBatched: Cannot bind more than ".concat(renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS, " textures"));
              }
              texture.forEach(function (t, i) {
                glw.activeTexture(i);
                glw.bindTexture(t.ctxTexture);
              });
              var samplers = Array.from(Array(texture.length).keys());
              this.setUniform('u_textures[0]', samplers);
            }
          }]);
        }(WebGlCoreShader);
        _defineProperty(DefaultShaderBatched, "shaderSources", {
          vertex: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n\n      attribute vec2 a_textureCoordinate;\n      attribute vec2 a_position;\n      attribute vec4 a_color;\n      attribute float a_textureIndex;\n      attribute float a_depth;\n\n      uniform vec2 u_resolution;\n      uniform float u_pixelRatio;\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n      varying float v_textureIndex;\n\n      void main(){\n        vec2 normalized = a_position * u_pixelRatio / u_resolution;\n        vec2 zero_two = normalized * 2.0;\n        vec2 clip_space = zero_two - 1.0;\n\n        // pass to fragment\n        v_color = a_color;\n        v_textureCoordinate = a_textureCoordinate;\n        v_textureIndex = a_textureIndex;\n\n        // flip y\n        gl_Position = vec4(clip_space * vec2(1.0, -1.0), 0, 1);\n      }\n    ",
          fragment: function fragment(textureUnits) {
            return "\n      #define txUnits ".concat(textureUnits, "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n\n      uniform vec2 u_resolution;\n      uniform sampler2D u_image;\n      uniform sampler2D u_textures[txUnits];\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n      varying float v_textureIndex;\n\n      vec4 sampleFromTexture(sampler2D textures[").concat(textureUnits, "], int idx, vec2 uv) {\n        ").concat(Array.from(Array(textureUnits).keys()).map(function (idx) {
              return "\n          ".concat(idx !== 0 ? 'else ' : '', "if (idx == ").concat(idx, ") {\n            return texture2D(textures[").concat(idx, "], uv);\n          }\n        ");
            }).join(''), "\n        return texture2D(textures[0], uv);\n      }\n\n      void main(){\n        gl_FragColor = vec4(v_color) * sampleFromTexture(u_textures, int(v_textureIndex), v_textureCoordinate);\n      }\n    ");
          }
        });
        var ShaderEffect = /*#__PURE__*/function () {
          function ShaderEffect(options) {
            _classCallCheck(this, ShaderEffect);
            _defineProperty(this, "priority", 1);
            _defineProperty(this, "name", '');
            _defineProperty(this, "ref", void 0);
            _defineProperty(this, "target", void 0);
            _defineProperty(this, "passParameters", '');
            _defineProperty(this, "declaredUniforms", '');
            _defineProperty(this, "uniformInfo", {});
            var ref = options.ref,
              target = options.target,
              _options$props = options.props,
              props = _options$props === void 0 ? {} : _options$props;
            this.ref = ref;
            this.target = target;
            var uniformInfo = {};
            var passParameters = [];
            var declaredUniforms = '';
            var uniforms = this.constructor.uniforms || {};
            for (var u in uniforms) {
              var unif = uniforms[u];
              var uniType = unif.type;
              //make unique uniform name
              var uniformName = "".concat(ref, "_").concat(u);
              var define = '';
              if (unif.size) {
                define = "[".concat(unif.size(props), "]");
              }
              passParameters.push(uniformName);
              declaredUniforms += "uniform ".concat(uniType, " ").concat(uniformName).concat(define, ";");
              uniformInfo[u] = {
                name: uniformName,
                uniform: uniforms[u].method
              };
            }
            this.passParameters = passParameters.join(',');
            this.declaredUniforms = declaredUniforms;
            this.uniformInfo = uniformInfo;
          }
          return _createClass(ShaderEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey(props) {
              return '';
            }
          }, {
            key: "getMethodParameters",
            value: function getMethodParameters(uniforms, props) {
              var res = [];
              for (var u in uniforms) {
                var uni = uniforms[u];
                var define = '';
                if (uni.size) {
                  define = "[".concat(uni.size(props), "]");
                }
                res.push("".concat(uni.type, " ").concat(u).concat(define));
              }
              return res.join(',');
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              return {};
            }
          }, {
            key: "makeEffectKey",
            value: function makeEffectKey(props) {
              return false;
            }
          }]);
        }();
        _defineProperty(ShaderEffect, "uniforms", {});
        _defineProperty(ShaderEffect, "methods", void 0);
        _defineProperty(ShaderEffect, "onShaderMask", void 0);
        _defineProperty(ShaderEffect, "onColorize", void 0);
        _defineProperty(ShaderEffect, "onEffectMask", void 0);
        var effectCache = new Map();
        var getResolvedEffect = function getResolvedEffect(effects, effectContructors) {
          var _effects;
          var key = JSON.stringify(effects);
          if (effectCache.has(key)) {
            return effectCache.get(key);
          }
          effects = (_effects = effects) !== null && _effects !== void 0 ? _effects : [];
          var resolvedEffects = [];
          var effectsLength = effects.length;
          var i = 0;
          for (; i < effectsLength; i++) {
            var _effects$i = effects[i],
              name = _effects$i.name,
              _type = _effects$i.type,
              props = _effects$i.props;
            var resolvedEffect = {
              name: name,
              type: _type,
              props: {}
            };
            var effectConstructor = effectContructors[_type];
            var defaultPropValues = effectConstructor.resolveDefaults(props);
            var uniforms = effectConstructor.uniforms;
            var uniformKeys = Object.keys(uniforms);
            var uniformsLength = uniformKeys.length;
            var j = 0;
            for (; j < uniformsLength; j++) {
              var _key5 = uniformKeys[j];
              var uniform = uniforms[_key5];
              var result = {
                value: defaultPropValues[_key5],
                programValue: undefined,
                updateOnBind: uniform.updateOnBind || false,
                hasValidator: uniform.validator !== undefined,
                hasProgramValueUpdater: uniform.updateProgramValue !== undefined
              };
              var validatedValue = result.hasValidator && uniform.validator(defaultPropValues[_key5], defaultPropValues) || defaultPropValues[_key5];
              if (defaultPropValues[_key5] !== validatedValue) {
                result.validatedValue = validatedValue;
              }
              if (result.hasProgramValueUpdater) {
                uniform.updateProgramValue(result);
              }
              if (result.programValue === undefined) {
                result.programValue = result.value;
              }
              resolvedEffect.props[_key5] = result;
            }
            resolvedEffects.push(resolvedEffect);
          }
          effectCache.set(key, resolvedEffects);
          return resolvedEffects;
        };
        var DynamicShader = /*#__PURE__*/function (_WebGlCoreShader4) {
          function DynamicShader(renderer, props, effectContructors) {
            var _this19;
            _classCallCheck(this, DynamicShader);
            var shader = DynamicShader.createShader(props, effectContructors);
            _this19 = _callSuper(this, DynamicShader, [{
              renderer: renderer,
              attributes: ['a_position', 'a_textureCoordinate', 'a_color'],
              uniforms: [{
                name: 'u_resolution',
                uniform: 'uniform2fv'
              }, {
                name: 'u_pixelRatio',
                uniform: 'uniform1f'
              }, {
                name: 'u_texture',
                uniform: 'uniform2fv'
              }, {
                name: 'u_dimensions',
                uniform: 'uniform2fv'
              }, {
                name: 'u_alpha',
                uniform: 'uniform1f'
              }].concat(_toConsumableArray(shader.uniforms)),
              shaderSources: {
                vertex: shader.vertex,
                fragment: shader.fragment
              }
            }]);
            _defineProperty(_this19, "effects", []);
            _this19.effects = shader.effects;
            return _this19;
          }
          _inherits(DynamicShader, _WebGlCoreShader4);
          return _createClass(DynamicShader, [{
            key: "bindTextures",
            value: function bindTextures(textures) {
              var glw = this.glw;
              glw.activeTexture(0);
              glw.bindTexture(textures[0].ctxTexture);
            }
          }, {
            key: "bindProps",
            value: function bindProps(props) {
              var effects = props.effects;
              var effectsL = effects.length;
              var i = 0;
              for (; i < effectsL; i++) {
                var effect = effects[i];
                var uniformInfo = this.effects[i].uniformInfo;
                var propKeys = Object.keys(effect.props);
                var propsLength = propKeys.length;
                var j = 0;
                for (; j < propsLength; j++) {
                  var key = propKeys[j];
                  var prop = effect.props[key];
                  if (prop.updateOnBind === true) {
                    var _this$renderer$shMana;
                    var uniform = (_this$renderer$shMana = this.renderer.shManager.getRegisteredEffects()[effect.type]) === null || _this$renderer$shMana === void 0 ? void 0 : _this$renderer$shMana.uniforms[key];
                    uniform === null || uniform === void 0 || uniform.updateProgramValue(effect.props[key], props);
                  }
                  this.setUniform(uniformInfo[key].name, effect.props[key].programValue);
                }
              }
            }
          }, {
            key: "canBatchShaderProps",
            value: function canBatchShaderProps(propsA, propsB) {
              if (propsA.$dimensions.width !== propsB.$dimensions.width || propsA.$dimensions.height !== propsB.$dimensions.height || propsA.effects.length !== propsB.effects.length) {
                return false;
              }
              var propsEffectsLen = propsA.effects.length;
              var i = 0;
              for (; i < propsEffectsLen; i++) {
                var effectA = propsA.effects[i];
                var effectB = propsB.effects[i];
                if (effectA.type !== effectB.type) {
                  return false;
                }
                for (var key in effectA.props) {
                  if (effectB.props && !effectB.props[key] || effectA.props[key].value !== effectB.props[key].value) {
                    return false;
                  }
                }
              }
              return true;
            }
          }], [{
            key: "createShader",
            value: function createShader(props, effectContructors) {
              //counts duplicate effects
              var effectNameCount = {};
              var methods = {};
              var declareUniforms = '';
              var uniforms = [];
              var uFx = [];
              var effects = props.effects.map(function (effect) {
                var baseClass = effectContructors[effect.type];
                var key = baseClass.getEffectKey(effect.props || {});
                effectNameCount[key] = effectNameCount[key] ? ++effectNameCount[key] : 1;
                var nr = effectNameCount[key];
                if (nr === 1) {
                  uFx.push({
                    key: key,
                    type: effect.type,
                    props: effect.props
                  });
                }
                //initialize new effect class;
                var fxClass = new baseClass({
                  ref: "".concat(key).concat(nr === 1 ? '' : nr),
                  target: key,
                  props: effect.props
                });
                declareUniforms += fxClass.declaredUniforms;
                uniforms.push.apply(uniforms, _toConsumableArray(Object.values(fxClass.uniformInfo)));
                return fxClass;
              });
              //build source
              var effectMethods = '';
              uFx === null || uFx === void 0 || uFx.forEach(function (fx) {
                var _fx$props;
                var fxClass = effectContructors[fx.type];
                var fxProps = fxClass.resolveDefaults((_fx$props = fx.props) !== null && _fx$props !== void 0 ? _fx$props : {});
                var remap = [];
                for (var m in fxClass.methods) {
                  var cm = m;
                  var fxMethod = fxClass.methods[m];
                  if (methods[m] && methods[m] !== fxMethod) {
                    cm = DynamicShader.resolveMethodDuplicate(m, fxMethod, methods);
                  }
                  methods[cm] = fxMethod.replace('function', cm);
                  remap.push({
                    m: m,
                    cm: cm
                  });
                }
                var onShaderMask = fxClass.onShaderMask instanceof Function ? fxClass.onShaderMask(fxProps) : fxClass.onShaderMask;
                var onColorize = fxClass.onColorize instanceof Function ? fxClass.onColorize(fxProps) : fxClass.onColorize;
                var onEffectMask = fxClass.onEffectMask instanceof Function ? fxClass.onEffectMask(fxProps) : fxClass.onEffectMask;
                remap.forEach(function (r) {
                  var m = r.m,
                    cm = r.cm;
                  var reg = new RegExp("\\$".concat(m), 'g');
                  if (onShaderMask) {
                    onShaderMask = onShaderMask.replace(reg, cm);
                  }
                  if (onColorize) {
                    onColorize = onColorize.replace(reg, cm);
                  }
                  if (onEffectMask) {
                    onEffectMask = onEffectMask.replace(reg, cm);
                  }
                });
                var methodParameters = fxClass.getMethodParameters(fxClass.uniforms, fxProps);
                var pm = methodParameters.length > 0 ? ", ".concat(methodParameters) : '';
                if (onShaderMask) {
                  effectMethods += "\n        float fx_".concat(fx.key, "_onShaderMask(float shaderMask ").concat(pm, ") {\n          ").concat(onShaderMask, "\n        }\n        ");
                }
                if (onColorize) {
                  effectMethods += "\n          vec4 fx_".concat(fx.key, "_onColorize(float shaderMask, vec4 maskColor, vec4 shaderColor").concat(pm, ") {\n            ").concat(onColorize, "\n          }\n        ");
                }
                if (onEffectMask) {
                  effectMethods += "\n          vec4 fx_".concat(fx.key, "_onEffectMask(float shaderMask, vec4 maskColor, vec4 shaderColor").concat(pm, ") {\n            ").concat(onEffectMask, "\n          }\n        ");
                }
              });
              var sharedMethods = '';
              for (var m in methods) {
                sharedMethods += methods[m];
              }
              //fill main functions
              var currentMask = "mix(shaderColor, maskColor, clamp(-(lng_DefaultMask), 0.0, 1.0))";
              var drawEffects = "\n\n    ";
              for (var i = 0; i < effects.length; i++) {
                var current = effects[i];
                var pm = current.passParameters.length > 0 ? ", ".concat(current.passParameters) : '';
                var currentClass = effectContructors[current.name];
                if (currentClass.onShaderMask) {
                  drawEffects += "\n        shaderMask = fx_".concat(current.target, "_onShaderMask(shaderMask ").concat(pm, ");\n        ");
                }
                if (currentClass.onColorize) {
                  drawEffects += "\n        maskColor = fx_".concat(current.target, "_onColorize(shaderMask, maskColor, shaderColor").concat(pm, ");\n        ");
                }
                if (currentClass.onEffectMask) {
                  currentMask = "fx_".concat(current.target, "_onEffectMask(shaderMask, maskColor, shaderColor").concat(pm, ")");
                }
                var next = effects[i + 1];
                if (next === undefined || effectContructors[next.name].onEffectMask) {
                  drawEffects += "\n          shaderColor = ".concat(currentMask, ";\n        ");
                }
              }
              return {
                effects: effects,
                uniforms: uniforms,
                fragment: DynamicShader.fragment(declareUniforms, sharedMethods, effectMethods, drawEffects),
                vertex: DynamicShader.vertex()
              };
            }
          }, {
            key: "resolveMethodDuplicate",
            value: function resolveMethodDuplicate(key, effectMethod, methodCollection) {
              var increment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
              var m = key + (increment > 0 ? increment : '');
              if (methodCollection[m] && methodCollection[m] !== effectMethod) {
                return this.resolveMethodDuplicate(key, effectMethod, methodCollection, ++increment);
              }
              return m;
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props, effectContructors) {
              var _props$effects;
              assertTruthy(effectContructors);
              return {
                effects: getResolvedEffect((_props$effects = props.effects) !== null && _props$effects !== void 0 ? _props$effects : [], effectContructors),
                $dimensions: {
                  width: 0,
                  height: 0
                },
                $alpha: 0
              };
            }
          }, {
            key: "makeCacheKey",
            value: function makeCacheKey(props, effectContructors) {
              var _props$effects2;
              var fx = '';
              (_props$effects2 = props.effects) === null || _props$effects2 === void 0 || _props$effects2.forEach(function (effect) {
                var baseClass = effectContructors[effect.type];
                var key = baseClass.getEffectKey(effect.props || {});
                fx += ",".concat(key);
              });
              return "DynamicShader".concat(fx);
            }
          }]);
        }(WebGlCoreShader);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Similar to the {@link DefaultShader} but cuts out 4 rounded rectangle corners
         * as defined by the specified corner {@link RoundedRectangleProps.radius}
         */
        _defineProperty(DynamicShader, "z$__type__Props", void 0);
        _defineProperty(DynamicShader, "vertex", function () {
          return "\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision mediump float;\n    # endif\n\n    attribute vec2 a_textureCoordinate;\n    attribute vec2 a_position;\n    attribute vec4 a_color;\n    attribute float a_textureIndex;\n\n    uniform vec2 u_resolution;\n    uniform float u_pixelRatio;\n\n    varying vec4 v_color;\n    varying vec2 v_textureCoordinate;\n    varying float v_textureIndex;\n\n    void main(){\n      vec2 normalized = a_position * u_pixelRatio / u_resolution;\n      vec2 zero_two = normalized * 2.0;\n      vec2 clip_space = zero_two - 1.0;\n\n      // pass to fragment\n      v_color = a_color;\n      v_textureCoordinate = a_textureCoordinate;\n      v_textureIndex = a_textureIndex;\n\n      // flip y\n      gl_Position = vec4(clip_space * vec2(1.0, -1.0), 0, 1);\n    }\n  ";
        });
        _defineProperty(DynamicShader, "fragment", function (uniforms, methods, effectMethods, drawEffects) {
          return "\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision mediump float;\n    # endif\n\n    #define PI 3.14159265359\n\n    uniform vec2 u_resolution;\n    uniform vec2 u_dimensions;\n    uniform float u_alpha;\n    uniform float u_radius;\n    uniform sampler2D u_texture;\n    uniform float u_pixelRatio;\n\n    ".concat(uniforms, "\n\n    varying vec4 v_color;\n    varying vec2 v_textureCoordinate;\n\n    ").concat(methods, "\n\n    ").concat(effectMethods, "\n\n    void main() {\n      vec2 p = v_textureCoordinate.xy * u_dimensions - u_dimensions * 0.5;\n      vec2 d = abs(p) - (u_dimensions) * 0.5;\n      float lng_DefaultMask = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n\n      vec4 shaderColor = vec4(0.0);\n      float shaderMask = lng_DefaultMask;\n\n      vec4 maskColor = texture2D(u_texture, v_textureCoordinate) * v_color;\n\n      shaderColor = mix(shaderColor, maskColor, clamp(-(lng_DefaultMask + 0.5), 0.0, 1.0));\n\n      ").concat(drawEffects, "\n\n      gl_FragColor = shaderColor * u_alpha;\n    }\n  ");
        });
        var RoundedRectangle = /*#__PURE__*/function (_WebGlCoreShader5) {
          function RoundedRectangle(renderer) {
            _classCallCheck(this, RoundedRectangle);
            return _callSuper(this, RoundedRectangle, [{
              renderer: renderer,
              attributes: ['a_position', 'a_textureCoordinate', 'a_color'],
              uniforms: [{
                name: 'u_resolution',
                uniform: 'uniform2fv'
              }, {
                name: 'u_pixelRatio',
                uniform: 'uniform1f'
              }, {
                name: 'u_texture',
                uniform: 'uniform2f'
              }, {
                name: 'u_dimensions',
                uniform: 'uniform2fv'
              }, {
                name: 'u_radius',
                uniform: 'uniform1f'
              }]
            }]);
          }
          _inherits(RoundedRectangle, _WebGlCoreShader5);
          return _createClass(RoundedRectangle, [{
            key: "bindTextures",
            value: function bindTextures(textures) {
              var glw = this.glw;
              glw.activeTexture(0);
              glw.bindTexture(textures[0].ctxTexture);
            }
          }, {
            key: "bindProps",
            value: function bindProps(props) {
              var radiusFactor = Math.min(props.$dimensions.width, props.$dimensions.height) / (2.0 * props.radius);
              this.setUniform('u_radius', props.radius * Math.min(radiusFactor, 1));
            }
          }, {
            key: "canBatchShaderProps",
            value: function canBatchShaderProps(propsA, propsB) {
              return propsA.radius === propsB.radius && propsA.$dimensions.width === propsB.$dimensions.width && propsA.$dimensions.height === propsB.$dimensions.height;
            }
          }], [{
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              return {
                radius: props.radius || 10,
                $dimensions: {
                  width: 0,
                  height: 0
                }
              };
            }
          }]);
        }(WebGlCoreShader);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(RoundedRectangle, "z$__type__Props", void 0);
        _defineProperty(RoundedRectangle, "shaderSources", {
          vertex: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n\n      attribute vec2 a_position;\n      attribute vec2 a_textureCoordinate;\n      attribute vec4 a_color;\n      attribute float a_textureIndex;\n      attribute float a_depth;\n\n      uniform vec2 u_resolution;\n      uniform float u_pixelRatio;\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n\n      void main() {\n        vec2 normalized = a_position * u_pixelRatio / u_resolution;\n        vec2 zero_two = normalized * 2.0;\n        vec2 clip_space = zero_two - 1.0;\n\n        // pass to fragment\n        v_color = a_color;\n        v_textureCoordinate = a_textureCoordinate;\n\n        // flip y\n        gl_Position = vec4(clip_space * vec2(1.0, -1.0), 0, 1);\n      }\n    ",
          fragment: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n\n      uniform vec2 u_resolution;\n      uniform vec2 u_dimensions;\n      uniform float u_radius;\n      uniform sampler2D u_texture;\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n\n      float boxDist(vec2 p, vec2 size, float radius){\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n      }\n\n      float fillMask(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n\n      void main() {\n        vec4 color = texture2D(u_texture, v_textureCoordinate) * v_color;\n        vec2 halfDimensions = u_dimensions * 0.5;\n\n        float d = boxDist(v_textureCoordinate.xy * u_dimensions - halfDimensions, halfDimensions + 0.5, u_radius);\n        gl_FragColor = mix(vec4(0.0), color, fillMask(d));\n      }\n    "
        });
        var IDENTITY_MATRIX_3x3 = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
        /**
         * SdfShader supports multi-channel and single-channel signed distance field textures.
         *
         * @remarks
         * This Shader is used by the {@link SdfTextRenderer}. Do not use thie Shader
         * directly. Instead create a Text Node and assign a SDF font family to it.
         *
         * @internalRemarks
         * The only thing this shader does to support multi-channel SDFs is to
         * add a median function to the fragment shader. If this one function call
         * ends up being a performance bottleneck we can always look at ways to
         * remove it.
         */
        var SdfShader = /*#__PURE__*/function (_WebGlCoreShader6) {
          function SdfShader(renderer) {
            _classCallCheck(this, SdfShader);
            return _callSuper(this, SdfShader, [{
              renderer: renderer,
              attributes: ['a_position', 'a_textureCoordinate'],
              uniforms: [{
                name: 'u_resolution',
                uniform: 'uniform2fv'
              }, {
                name: 'u_transform',
                uniform: 'uniformMatrix3fv'
              }, {
                name: 'u_scrollY',
                uniform: 'uniform1f'
              }, {
                name: 'u_pixelRatio',
                uniform: 'uniform1f'
              }, {
                name: 'u_texture',
                uniform: 'uniform2f'
              }, {
                name: 'u_color',
                uniform: 'uniform4fv'
              }, {
                name: 'u_size',
                uniform: 'uniform1f'
              }, {
                name: 'u_distanceRange',
                uniform: 'uniform1f'
              }, {
                name: 'u_debug',
                uniform: 'uniform1i'
              }]
            }]);
          }
          _inherits(SdfShader, _WebGlCoreShader6);
          return _createClass(SdfShader, [{
            key: "bindTextures",
            value: function bindTextures(textures) {
              var glw = this.glw;
              glw.activeTexture(0);
              glw.bindTexture(textures[0].ctxTexture);
            }
          }, {
            key: "bindProps",
            value: function bindProps(props) {
              var resolvedProps = SdfShader.resolveDefaults(props);
              for (var key in resolvedProps) {
                if (key === 'transform') {
                  this.setUniform('u_transform', false, resolvedProps[key]);
                } else if (key === 'scrollY') {
                  this.setUniform('u_scrollY', resolvedProps[key]);
                } else if (key === 'color') {
                  var components = getNormalizedRgbaComponents(resolvedProps.color);
                  this.setUniform('u_color', components);
                } else if (key === 'size') {
                  this.setUniform('u_size', resolvedProps[key]);
                } else if (key === 'distanceRange') {
                  this.setUniform('u_distanceRange', resolvedProps[key]);
                } else if (key === 'debug') {
                  this.setUniform('u_debug', resolvedProps[key] ? 1.0 : 0.0);
                }
              }
            }
          }], [{
            key: "resolveDefaults",
            value: function resolveDefaults() {
              var _props$transform, _props$scrollY, _props$color, _props$size, _props$distanceRange, _props$debug;
              var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              return {
                transform: (_props$transform = props.transform) !== null && _props$transform !== void 0 ? _props$transform : IDENTITY_MATRIX_3x3,
                scrollY: (_props$scrollY = props.scrollY) !== null && _props$scrollY !== void 0 ? _props$scrollY : 0,
                color: (_props$color = props.color) !== null && _props$color !== void 0 ? _props$color : 0xffffffff,
                size: (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : 16,
                distanceRange: (_props$distanceRange = props.distanceRange) !== null && _props$distanceRange !== void 0 ? _props$distanceRange : 1.0,
                debug: (_props$debug = props.debug) !== null && _props$debug !== void 0 ? _props$debug : false
              };
            }
          }]);
        }(WebGlCoreShader);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(SdfShader, "shaderSources", {
          vertex: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n      // an attribute is an input (in) to a vertex shader.\n      // It will receive data from a buffer\n      attribute vec2 a_position;\n      attribute vec2 a_textureCoordinate;\n\n      uniform vec2 u_resolution;\n      uniform mat3 u_transform;\n      uniform float u_scrollY;\n      uniform float u_pixelRatio;\n      uniform float u_size;\n\n      varying vec2 v_texcoord;\n\n      void main() {\n        vec2 scrolledPosition = a_position * u_size - vec2(0, u_scrollY);\n        vec2 transformedPosition = (u_transform * vec3(scrolledPosition, 1)).xy;\n\n        // Calculate screen space with pixel ratio\n        vec2 screenSpace = (transformedPosition * u_pixelRatio / u_resolution * 2.0 - 1.0) * vec2(1, -1);\n\n        gl_Position = vec4(screenSpace, 0.0, 1.0);\n        v_texcoord = a_textureCoordinate;\n\n      }\n    ",
          fragment: "\n      # ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      # else\n      precision mediump float;\n      # endif\n      uniform vec4 u_color;\n      uniform sampler2D u_texture;\n      uniform float u_distanceRange;\n      uniform float u_pixelRatio;\n      uniform int u_debug;\n\n      varying vec2 v_texcoord;\n\n      float median(float r, float g, float b) {\n          return max(min(r, g), min(max(r, g), b));\n      }\n\n      void main() {\n          vec3 sample = texture2D(u_texture, v_texcoord).rgb;\n          if (u_debug == 1) {\n            gl_FragColor = vec4(sample.r, sample.g, sample.b, 1.0);\n            return;\n          }\n          float scaledDistRange = u_distanceRange * u_pixelRatio;\n          float sigDist = scaledDistRange * (median(sample.r, sample.g, sample.b) - 0.5);\n          float opacity = clamp(sigDist + 0.5, 0.0, 1.0) * u_color.a;\n\n          // Build the final color.\n          // IMPORTANT: We must premultiply the color by the alpha value before returning it.\n          gl_FragColor = vec4(u_color.r * opacity, u_color.g * opacity, u_color.b * opacity, opacity);\n      }\n    "
        });
        var updateShaderEffectColor = function updateShaderEffectColor(values) {
          if (values.programValue === undefined) {
            values.programValue = new Float32Array(4);
          }
          var rgba = values.value;
          var floatArray = values.programValue;
          floatArray[0] = (rgba >>> 24) / 255;
          floatArray[1] = (rgba >>> 16 & 0xff) / 255;
          floatArray[2] = (rgba >>> 8 & 0xff) / 255;
          floatArray[3] = (rgba & 0xff) / 255;
        };
        var updateFloat32ArrayLength2 = function updateFloat32ArrayLength2(values) {
          var validatedValue = values.validatedValue || values.value;
          if (values.programValue instanceof Float32Array) {
            var floatArray = values.programValue;
            floatArray[0] = validatedValue[0];
            floatArray[1] = validatedValue[1];
          } else {
            values.programValue = new Float32Array(validatedValue);
          }
        };
        var updateFloat32ArrayLength4 = function updateFloat32ArrayLength4(values) {
          var validatedValue = values.validatedValue || values.value;
          if (values.programValue instanceof Float32Array) {
            var floatArray = values.programValue;
            floatArray[0] = validatedValue[0];
            floatArray[1] = validatedValue[1];
            floatArray[2] = validatedValue[1];
            floatArray[3] = validatedValue[1];
          } else {
            values.programValue = new Float32Array(validatedValue);
          }
        };
        var updateFloat32ArrayLengthN = function updateFloat32ArrayLengthN(values) {
          var validatedValue = values.validatedValue || values.value;
          if (values.programValue instanceof Float32Array) {
            var len = validatedValue.length;
            var programValue = values.programValue;
            for (var i = 0; i < len; i++) {
              programValue[i] = validatedValue[i];
            }
          } else {
            values.programValue = new Float32Array(validatedValue);
          }
        };
        var validateArrayLength4 = function validateArrayLength4(value) {
          var isArray = Array.isArray(value);
          if (!isArray) {
            return [value, value, value, value];
          } else if (isArray && value.length === 4) {
            return value;
          } else if (isArray && value.length === 2) {
            return [value[0], value[1], value[0], value[1]];
          } else if (isArray && value.length === 3) {
            return [value[0], value[1], value[2], value[0]];
          }
          return [value[0], value[0], value[0], value[0]];
        };
        var updateWebSafeRadius = function updateWebSafeRadius(values, shaderProps) {
          if (values.programValue === undefined) {
            values.programValue = new Float32Array(4);
          }
          var programValue = values.programValue;
          var validatedValue = values.validatedValue || values.value;
          if (shaderProps === undefined && values.$dimensions === undefined) {
            programValue[0] = validatedValue[0];
            programValue[1] = validatedValue[1];
            programValue[2] = validatedValue[2];
            programValue[3] = validatedValue[3];
            return;
          }
          var storedDimensions = values.$dimensions;
          if (shaderProps !== undefined) {
            var $dimensions = shaderProps.$dimensions;
            if (storedDimensions !== undefined && (storedDimensions.width === $dimensions.width || storedDimensions.height === $dimensions.height)) {
              return;
            }
            if (storedDimensions === undefined) {
              storedDimensions = {
                width: $dimensions === null || $dimensions === void 0 ? void 0 : $dimensions.width,
                height: $dimensions === null || $dimensions === void 0 ? void 0 : $dimensions.height
              };
              values.$dimensions = storedDimensions;
            }
          }
          var _storedDimensions = storedDimensions,
            width = _storedDimensions.width,
            height = _storedDimensions.height;
          var _validatedValue = _slicedToArray(validatedValue, 4),
            r0 = _validatedValue[0],
            r1 = _validatedValue[1],
            r2 = _validatedValue[2],
            r3 = _validatedValue[3];
          var factor = Math.min(Math.min(Math.min(width / Math.max(width, r0 + r1), width / Math.max(width, r2 + r3)), Math.min(height / Math.max(height, r0 + r2), height / Math.max(height, r1 + r3))), 1);
          programValue[0] = r0 * factor;
          programValue[1] = r1 * factor;
          programValue[2] = r2 * factor;
          programValue[3] = r3 * factor;
        };

        /**
         * Masks the current maskcolor with rounded corners similar to {@link RoundedRectangle}
         */
        var RadiusEffect = /*#__PURE__*/function (_ShaderEffect2) {
          function RadiusEffect() {
            var _this20;
            _classCallCheck(this, RadiusEffect);
            for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {
              args[_key6] = arguments[_key6];
            }
            _this20 = _callSuper(this, RadiusEffect, [].concat(args));
            _defineProperty(_this20, "name", 'radius');
            return _this20;
          }
          _inherits(RadiusEffect, _ShaderEffect2);
          return _createClass(RadiusEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "radius";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$radius;
              return {
                radius: (_props$radius = props.radius) !== null && _props$radius !== void 0 ? _props$radius : 10
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The BorderEffect renders a border along all edges of an element
         */
        _defineProperty(RadiusEffect, "z$__type__Props", void 0);
        _defineProperty(RadiusEffect, "uniforms", {
          radius: {
            value: 0,
            method: 'uniform4fv',
            type: 'vec4',
            updateOnBind: true,
            validator: validateArrayLength4,
            updateProgramValue: updateWebSafeRadius
          }
        });
        _defineProperty(RadiusEffect, "methods", {
          fillMask: "\n      float function(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n    ",
          boxDist: "\n      float function(vec2 p, vec2 size, float radius) {\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n      }\n    "
        });
        _defineProperty(RadiusEffect, "onShaderMask", "\n  vec2 halfDimensions = u_dimensions * 0.5;\n  float r = radius[0] * step(v_textureCoordinate.x, 0.5) * step(v_textureCoordinate.y, 0.5);\n  r = r + radius[1] * step(0.5, v_textureCoordinate.x) * step(v_textureCoordinate.y, 0.5);\n  r = r + radius[2] * step(0.5, v_textureCoordinate.x) * step(0.5, v_textureCoordinate.y);\n  r = r + radius[3] * step(v_textureCoordinate.x, 0.5) * step(0.5, v_textureCoordinate.y);\n  return $boxDist(v_textureCoordinate.xy * u_dimensions - halfDimensions, halfDimensions, r);\n  ");
        _defineProperty(RadiusEffect, "onEffectMask", "\n  return mix(vec4(0.0), maskColor, $fillMask(shaderMask));\n  ");
        var BorderEffect = /*#__PURE__*/function (_ShaderEffect3) {
          function BorderEffect() {
            var _this21;
            _classCallCheck(this, BorderEffect);
            for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {
              args[_key7] = arguments[_key7];
            }
            _this21 = _callSuper(this, BorderEffect, [].concat(args));
            _defineProperty(_this21, "name", 'border');
            return _this21;
          }
          _inherits(BorderEffect, _ShaderEffect3);
          return _createClass(BorderEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "border";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width3, _props$color2;
              return {
                width: (_props$width3 = props.width) !== null && _props$width3 !== void 0 ? _props$width3 : 10,
                color: (_props$color2 = props.color) !== null && _props$color2 !== void 0 ? _props$color2 : 0xffffffff
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Linear Gradient effect over a effect mask
         */
        _defineProperty(BorderEffect, "z$__type__Props", void 0);
        _defineProperty(BorderEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          color: {
            value: 0xffffffff,
            updateProgramValue: updateShaderEffectColor,
            method: 'uniform4fv',
            type: 'vec4'
          }
        });
        _defineProperty(BorderEffect, "onEffectMask", "\n  float intR = shaderMask + 1.0;\n  float mask = clamp(intR + width, 0.0, 1.0) - clamp(intR, 0.0, 1.0);\n  return mix(shaderColor, mix(shaderColor, maskColor, maskColor.a), mask);\n  ");
        _defineProperty(BorderEffect, "onColorize", "\n    return color;\n  ");
        var LinearGradientEffect = /*#__PURE__*/function (_ShaderEffect4) {
          function LinearGradientEffect() {
            var _this22;
            _classCallCheck(this, LinearGradientEffect);
            for (var _len5 = arguments.length, args = new Array(_len5), _key8 = 0; _key8 < _len5; _key8++) {
              args[_key8] = arguments[_key8];
            }
            _this22 = _callSuper(this, LinearGradientEffect, [].concat(args));
            _defineProperty(_this22, "name", 'linearGradient');
            return _this22;
          }
          _inherits(LinearGradientEffect, _ShaderEffect4);
          return _createClass(LinearGradientEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey(props) {
              return "linearGradient".concat(props.colors.length);
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$colors, _props$angle;
              var colors = (_props$colors = props.colors) !== null && _props$colors !== void 0 ? _props$colors : [0xff000000, 0xffffffff];
              var stops = props.stops || [];
              if (stops.length === 0 || stops.length !== colors.length) {
                var colorsL = colors.length;
                var i = 0;
                var tmp = stops;
                for (; i < colorsL; i++) {
                  if (stops[i]) {
                    tmp[i] = stops[i];
                    if (stops[i - 1] === undefined && tmp[i - 2] !== undefined) {
                      tmp[i - 1] = tmp[i - 2] + (stops[i] - tmp[i - 2]) / 2;
                    }
                  } else {
                    tmp[i] = i * (1 / (colors.length - 1));
                  }
                }
                stops = tmp;
              }
              return {
                colors: colors,
                stops: stops,
                angle: (_props$angle = props.angle) !== null && _props$angle !== void 0 ? _props$angle : 0
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Grayscale effect grayscales the color values of the current mask color
         */
        _LinearGradientEffect = LinearGradientEffect;
        _defineProperty(LinearGradientEffect, "z$__type__Props", void 0);
        _defineProperty(LinearGradientEffect, "uniforms", {
          angle: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          colors: {
            value: 0xffffffff,
            validator: function validator(rgbas) {
              return rgbas.reduce(function (acc, val) {
                return acc.concat(getNormalizedRgbaComponents(val));
              }, []);
            },
            updateProgramValue: updateFloat32ArrayLengthN,
            size: function size(props) {
              return props.colors.length;
            },
            method: 'uniform4fv',
            type: 'vec4'
          },
          stops: {
            value: [],
            size: function size(props) {
              return props.colors.length;
            },
            method: 'uniform1fv',
            type: 'float'
          }
        });
        _defineProperty(LinearGradientEffect, "methods", {
          fromLinear: "\n      vec4 function(vec4 linearRGB) {\n        vec4 higher = vec4(1.055)*pow(linearRGB, vec4(1.0/2.4)) - vec4(0.055);\n        vec4 lower = linearRGB * vec4(12.92);\n        return mix(higher, lower, 1.0);\n      }\n    ",
          toLinear: "\n      vec4 function(vec4 sRGB) {\n        vec4 higher = pow((sRGB + vec4(0.055))/vec4(1.055), vec4(2.4));\n        vec4 lower = sRGB/vec4(12.92);\n        return mix(higher, lower, 1.0);\n      }\n    ",
          calcPoint: "\n      vec2 function(float d, float angle) {\n        return d * vec2(cos(angle), sin(angle)) + (u_dimensions * 0.5);\n      }\n    "
        });
        _defineProperty(LinearGradientEffect, "ColorLoop", function (amount) {
          var loop = '';
          for (var i = 2; i < amount; i++) {
            loop += "colorOut = mix(colorOut, colors[".concat(i, "], clamp((dist - stops[").concat(i - 1, "]) / (stops[").concat(i, "] - stops[").concat(i - 1, "]), 0.0, 1.0));");
          }
          return loop;
        });
        _defineProperty(LinearGradientEffect, "onColorize", function (props) {
          var colors = props.colors.length || 1;
          return "\n      float a = angle - (PI / 180.0 * 90.0);\n      float lineDist = abs(u_dimensions.x * cos(a)) + abs(u_dimensions.y * sin(a));\n      vec2 f = $calcPoint(lineDist * 0.5, a);\n      vec2 t = $calcPoint(lineDist * 0.5, a + PI);\n      vec2 gradVec = t - f;\n      float dist = dot(v_textureCoordinate.xy * u_dimensions - f, gradVec) / dot(gradVec, gradVec);\n\n      float stopCalc = (dist - stops[0]) / (stops[1] - stops[0]);\n      vec4 colorOut = $fromLinear(mix($toLinear(colors[0]), $toLinear(colors[1]), stopCalc));\n      ".concat(_LinearGradientEffect.ColorLoop(colors), "\n      return mix(maskColor, colorOut, clamp(colorOut.a, 0.0, 1.0));\n    ");
        });
        var GrayscaleEffect = /*#__PURE__*/function (_ShaderEffect5) {
          function GrayscaleEffect() {
            var _this23;
            _classCallCheck(this, GrayscaleEffect);
            for (var _len6 = arguments.length, args = new Array(_len6), _key9 = 0; _key9 < _len6; _key9++) {
              args[_key9] = arguments[_key9];
            }
            _this23 = _callSuper(this, GrayscaleEffect, [].concat(args));
            _defineProperty(_this23, "name", 'grayscale');
            return _this23;
          }
          _inherits(GrayscaleEffect, _ShaderEffect5);
          return _createClass(GrayscaleEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "grayscale";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$amount;
              return {
                amount: (_props$amount = props.amount) !== null && _props$amount !== void 0 ? _props$amount : 1
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The BorderBottomEffect renders a border on the right side of an element
         */
        _defineProperty(GrayscaleEffect, "uniforms", {
          amount: {
            value: 1,
            method: 'uniform1f',
            type: 'float'
          }
        });
        _defineProperty(GrayscaleEffect, "onColorize", "\n    float grayness = 0.2 * maskColor.r + 0.6 * maskColor.g + 0.2 * maskColor.b;\n    return vec4(amount * vec3(grayness) + (1.0 - amount) * maskColor.rgb, maskColor.a);\n  ");
        var BorderRightEffect = /*#__PURE__*/function (_ShaderEffect6) {
          function BorderRightEffect() {
            var _this24;
            _classCallCheck(this, BorderRightEffect);
            for (var _len7 = arguments.length, args = new Array(_len7), _key10 = 0; _key10 < _len7; _key10++) {
              args[_key10] = arguments[_key10];
            }
            _this24 = _callSuper(this, BorderRightEffect, [].concat(args));
            _defineProperty(_this24, "name", 'borderRight');
            return _this24;
          }
          _inherits(BorderRightEffect, _ShaderEffect6);
          return _createClass(BorderRightEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "borderRight";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width4, _props$color3;
              return {
                width: (_props$width4 = props.width) !== null && _props$width4 !== void 0 ? _props$width4 : 10,
                color: (_props$color3 = props.color) !== null && _props$color3 !== void 0 ? _props$color3 : 0xffffffff
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The BorderBottomEffect renders a border on the top side of an element
         */
        _defineProperty(BorderRightEffect, "z$__type__Props", void 0);
        _defineProperty(BorderRightEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          color: {
            value: 0xffffffff,
            updateProgramValue: updateShaderEffectColor,
            method: 'uniform4fv',
            type: 'vec4'
          }
        });
        _defineProperty(BorderRightEffect, "methods", {
          fillMask: "\n      float function(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n    ",
          rectDist: "\n      float function(vec2 p, vec2 size) {\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n      }\n    "
        });
        _defineProperty(BorderRightEffect, "onEffectMask", "\n  vec2 pos = vec2(u_dimensions.x - width * 0.5, 0.0);\n  float mask = $rectDist(v_textureCoordinate.xy * u_dimensions - pos, vec2(width*0.5, u_dimensions.y));\n  return mix(shaderColor, maskColor, $fillMask(mask));\n  ");
        _defineProperty(BorderRightEffect, "onColorize", "\n    return color;\n  ");
        var BorderTopEffect = /*#__PURE__*/function (_ShaderEffect7) {
          function BorderTopEffect() {
            var _this25;
            _classCallCheck(this, BorderTopEffect);
            for (var _len8 = arguments.length, args = new Array(_len8), _key11 = 0; _key11 < _len8; _key11++) {
              args[_key11] = arguments[_key11];
            }
            _this25 = _callSuper(this, BorderTopEffect, [].concat(args));
            _defineProperty(_this25, "name", 'borderTop');
            return _this25;
          }
          _inherits(BorderTopEffect, _ShaderEffect7);
          return _createClass(BorderTopEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "borderTop";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width5, _props$color4;
              return {
                width: (_props$width5 = props.width) !== null && _props$width5 !== void 0 ? _props$width5 : 10,
                color: (_props$color4 = props.color) !== null && _props$color4 !== void 0 ? _props$color4 : 0xffffffff
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The BorderBottomEffect renders a border on the bottom side of an element
         */
        _defineProperty(BorderTopEffect, "z$__type__Props", void 0);
        _defineProperty(BorderTopEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          color: {
            value: 0xffffffff,
            updateProgramValue: updateShaderEffectColor,
            method: 'uniform4fv',
            type: 'vec4'
          }
        });
        _defineProperty(BorderTopEffect, "methods", {
          fillMask: "\n      float function(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n    ",
          rectDist: "\n      float function(vec2 p, vec2 size) {\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n      }\n    "
        });
        _defineProperty(BorderTopEffect, "onEffectMask", "\n  vec2 pos = vec2(0.0, width * 0.5);\n  float mask = $rectDist(v_textureCoordinate.xy * u_dimensions - pos, vec2(u_dimensions.x, width*0.5));\n  return mix(shaderColor, maskColor, $fillMask(mask));\n  ");
        _defineProperty(BorderTopEffect, "onColorize", "\n    return color;\n  ");
        var BorderBottomEffect = /*#__PURE__*/function (_ShaderEffect8) {
          function BorderBottomEffect() {
            var _this26;
            _classCallCheck(this, BorderBottomEffect);
            for (var _len9 = arguments.length, args = new Array(_len9), _key12 = 0; _key12 < _len9; _key12++) {
              args[_key12] = arguments[_key12];
            }
            _this26 = _callSuper(this, BorderBottomEffect, [].concat(args));
            _defineProperty(_this26, "name", 'borderBottom');
            return _this26;
          }
          _inherits(BorderBottomEffect, _ShaderEffect8);
          return _createClass(BorderBottomEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "borderBottom";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width6, _props$color5;
              return {
                width: (_props$width6 = props.width) !== null && _props$width6 !== void 0 ? _props$width6 : 10,
                color: (_props$color5 = props.color) !== null && _props$color5 !== void 0 ? _props$color5 : 0xffffffff
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The BorderBottomEffect renders a border on the left of an element
         */
        _defineProperty(BorderBottomEffect, "z$__type__Props", void 0);
        _defineProperty(BorderBottomEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          color: {
            value: 0xffffffff,
            updateProgramValue: updateShaderEffectColor,
            method: 'uniform4fv',
            type: 'vec4'
          }
        });
        _defineProperty(BorderBottomEffect, "methods", {
          fillMask: "\n      float function(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n    ",
          rectDist: "\n      float function(vec2 p, vec2 size) {\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n      }\n    "
        });
        _defineProperty(BorderBottomEffect, "onEffectMask", "\n  vec2 pos = vec2(0.0, u_dimensions.y - width * 0.5);\n  float mask = $rectDist(v_textureCoordinate.xy * u_dimensions - pos, vec2(u_dimensions.x, width*0.5));\n  return mix(shaderColor, maskColor, $fillMask(mask));\n  ");
        _defineProperty(BorderBottomEffect, "onColorize", "\n    return color;\n  ");
        var BorderLeftEffect = /*#__PURE__*/function (_ShaderEffect9) {
          function BorderLeftEffect() {
            var _this27;
            _classCallCheck(this, BorderLeftEffect);
            for (var _len10 = arguments.length, args = new Array(_len10), _key13 = 0; _key13 < _len10; _key13++) {
              args[_key13] = arguments[_key13];
            }
            _this27 = _callSuper(this, BorderLeftEffect, [].concat(args));
            _defineProperty(_this27, "name", 'borderLeft');
            return _this27;
          }
          _inherits(BorderLeftEffect, _ShaderEffect9);
          return _createClass(BorderLeftEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "borderLeft";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width7, _props$color6;
              return {
                width: (_props$width7 = props.width) !== null && _props$width7 !== void 0 ? _props$width7 : 10,
                color: (_props$color6 = props.color) !== null && _props$color6 !== void 0 ? _props$color6 : 0xffffffff
              };
            }
          }]);
        }(ShaderEffect);
        /**
         * Renders a Glitch effect using the incoming texture
         */
        _defineProperty(BorderLeftEffect, "z$__type__Props", void 0);
        _defineProperty(BorderLeftEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          color: {
            value: 0xffffffff,
            updateProgramValue: updateShaderEffectColor,
            method: 'uniform4fv',
            type: 'vec4'
          }
        });
        _defineProperty(BorderLeftEffect, "methods", {
          fillMask: "\n      float function(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n    ",
          rectDist: "\n      float function(vec2 p, vec2 size) {\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n      }\n    "
        });
        _defineProperty(BorderLeftEffect, "onEffectMask", "\n  vec2 pos = vec2(width * 0.5, 0.0);\n  float mask = $rectDist(v_textureCoordinate.xy * u_dimensions - pos, vec2(width*0.5, u_dimensions.y));\n  return mix(shaderColor, maskColor, $fillMask(mask));\n  ");
        _defineProperty(BorderLeftEffect, "onColorize", "\n    return color;\n  ");
        var GlitchEffect = /*#__PURE__*/function (_ShaderEffect10) {
          function GlitchEffect() {
            var _this28;
            _classCallCheck(this, GlitchEffect);
            for (var _len11 = arguments.length, args = new Array(_len11), _key14 = 0; _key14 < _len11; _key14++) {
              args[_key14] = arguments[_key14];
            }
            _this28 = _callSuper(this, GlitchEffect, [].concat(args));
            _defineProperty(_this28, "name", 'glitch');
            return _this28;
          }
          _inherits(GlitchEffect, _ShaderEffect10);
          return _createClass(GlitchEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey(props) {
              return "glitch";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$amplitude, _props$narrowness, _props$blockiness, _props$minimizer, _props$time;
              return {
                amplitude: (_props$amplitude = props.amplitude) !== null && _props$amplitude !== void 0 ? _props$amplitude : 0.2,
                narrowness: (_props$narrowness = props.narrowness) !== null && _props$narrowness !== void 0 ? _props$narrowness : 4.0,
                blockiness: (_props$blockiness = props.blockiness) !== null && _props$blockiness !== void 0 ? _props$blockiness : 2.0,
                minimizer: (_props$minimizer = props.minimizer) !== null && _props$minimizer !== void 0 ? _props$minimizer : 8.0,
                time: (_props$time = props.time) !== null && _props$time !== void 0 ? _props$time : Date.now()
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(GlitchEffect, "z$__type__Props", void 0);
        _defineProperty(GlitchEffect, "uniforms", {
          amplitude: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          narrowness: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          blockiness: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          minimizer: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          time: {
            value: 0,
            method: 'uniform1f',
            updateOnBind: true,
            updateProgramValue: function updateProgramValue(values) {
              var value = values.value = (Date.now() - values.value) % 1000;
              values.programValue = value;
            },
            type: 'float'
          }
        });
        _defineProperty(GlitchEffect, "methods", {
          rand: "\n      float function(vec2 p, float time) {\n        float t = floor(time * 20.) / 10.;\n        return fract(sin(dot(p, vec2(t * 12.9898, t * 78.233))) * 43758.5453);\n      }\n    ",
          noise: "\n      float function(vec2 uv, float blockiness, float time) {\n        vec2 lv = fract(uv);\n        vec2 id = floor(uv);\n\n        float n1 = rand(id, time);\n        float n2 = rand(id+vec2(1,0), time);\n        float n3 = rand(id+vec2(0,1), time);\n        float n4 = rand(id+vec2(1,1), time);\n        vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n        return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n      }\n    ",
          fbm: "\n      float function(vec2 uv, int count, float blockiness, float complexity, float time) {\n        float val = 0.0;\n        float amp = 0.5;\n        const int MAX_ITERATIONS = 10;\n\n        for(int i = 0; i < MAX_ITERATIONS; i++) {\n          if(i >= count) {break;}\n          val += amp * noise(uv, blockiness, time);\n          amp *= 0.5;\n          uv *= complexity;\n        }\n        return val;\n      }\n    "
        });
        _defineProperty(GlitchEffect, "onColorize", "\n    vec2 uv = v_textureCoordinate.xy;\n    float aspect = u_dimensions.x / u_dimensions.y;\n    vec2 a = vec2(uv.x * aspect , uv.y);\n    vec2 uv2 = vec2(a.x / u_dimensions.x, exp(a.y));\n\n    float shift = amplitude * pow($fbm(uv2, 4, blockiness, narrowness, time), minimizer);\n    float colR = texture2D(u_texture, vec2(uv.x + shift, uv.y)).r * (1. - shift);\n    float colG = texture2D(u_texture, vec2(uv.x - shift, uv.y)).g * (1. - shift);\n    float colB = texture2D(u_texture, vec2(uv.x - shift, uv.y)).b * (1. - shift);\n\n    vec3 f = vec3(colR, colG, colB);\n    return vec4(f, texture2D(u_texture, vec2(uv.x - shift, uv.y)).a);\n  ");
        var FadeOutEffect = /*#__PURE__*/function (_ShaderEffect11) {
          function FadeOutEffect() {
            var _this29;
            _classCallCheck(this, FadeOutEffect);
            for (var _len12 = arguments.length, args = new Array(_len12), _key15 = 0; _key15 < _len12; _key15++) {
              args[_key15] = arguments[_key15];
            }
            _this29 = _callSuper(this, FadeOutEffect, [].concat(args));
            _defineProperty(_this29, "name", 'fadeOut');
            return _this29;
          }
          _inherits(FadeOutEffect, _ShaderEffect11);
          return _createClass(FadeOutEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "fadeOut";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$fade;
              return {
                fade: (_props$fade = props.fade) !== null && _props$fade !== void 0 ? _props$fade : 10
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(FadeOutEffect, "z$__type__Props", void 0);
        _defineProperty(FadeOutEffect, "uniforms", {
          fade: {
            value: 0,
            method: 'uniform4fv',
            type: 'vec4',
            validator: validateArrayLength4,
            updateProgramValue: updateFloat32ArrayLength4
          }
        });
        _defineProperty(FadeOutEffect, "onColorize", "\n  vec2 point = v_textureCoordinate.xy * u_dimensions.xy;\n  vec2 pos1;\n  vec2 pos2;\n  vec2 d;\n  float c;\n  vec4 result = maskColor;\n\n\n  if(fade[0] > 0.0) {\n    pos1 = vec2(point.x, point.y);\n    pos2 = vec2(point.x, point.y + fade[0]);\n    d = pos2 - pos1;\n    c = dot(pos1, d) / dot(d, d);\n    result = mix(vec4(0.0), result, smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0)));\n  }\n\n  if(fade[1] > 0.0) {\n    pos1 = vec2(point.x - u_dimensions.x - fade[1], v_textureCoordinate.y);\n    pos2 = vec2(point.x - u_dimensions.x, v_textureCoordinate.y);\n    d = pos1 - pos2;\n    c = dot(pos2, d) / dot(d, d);\n    result = mix(vec4(0.0), result, smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0)));\n  }\n\n  if(fade[2] > 0.0) {\n    pos1 = vec2(v_textureCoordinate.x, point.y - u_dimensions.y - fade[2]);\n    pos2 = vec2(v_textureCoordinate.x, point.y - u_dimensions.y);\n    d = pos1 - pos2;\n    c = dot(pos2, d) / dot(d, d);\n    result = mix(vec4(0.0), result, smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0)));\n  }\n\n  if(fade[3] > 0.0) {\n    pos1 = vec2(point.x, point.y);\n    pos2 = vec2(point.x + fade[3], point.y);\n    d = pos2 - pos1;\n    c = dot(pos1, d) / dot(d, d);\n    result = mix(vec4(0.0), result, smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0)));\n  }\n\n  return result;\n  ");
        var RadialGradientEffect = /*#__PURE__*/function (_ShaderEffect12) {
          function RadialGradientEffect() {
            var _this30;
            _classCallCheck(this, RadialGradientEffect);
            for (var _len13 = arguments.length, args = new Array(_len13), _key16 = 0; _key16 < _len13; _key16++) {
              args[_key16] = arguments[_key16];
            }
            _this30 = _callSuper(this, RadialGradientEffect, [].concat(args));
            _defineProperty(_this30, "name", 'radialGradient');
            return _this30;
          }
          _inherits(RadialGradientEffect, _ShaderEffect12);
          return _createClass(RadialGradientEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey(props) {
              return "radialGradient".concat(props.colors.length);
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$colors2, _props$width8, _ref5, _props$height3, _props$pivot;
              var colors = (_props$colors2 = props.colors) !== null && _props$colors2 !== void 0 ? _props$colors2 : [0xff000000, 0xffffffff];
              var stops = props.stops || [];
              if (stops.length === 0 || stops.length !== colors.length) {
                var colorsL = colors.length;
                var i = 0;
                var tmp = stops;
                for (; i < colorsL; i++) {
                  if (stops[i]) {
                    tmp[i] = stops[i];
                    if (stops[i - 1] === undefined && tmp[i - 2] !== undefined) {
                      tmp[i - 1] = tmp[i - 2] + (stops[i] - tmp[i - 2]) / 2;
                    }
                  } else {
                    tmp[i] = i * (1 / (colors.length - 1));
                  }
                }
                stops = tmp;
              }
              return {
                colors: colors,
                stops: stops,
                width: (_props$width8 = props.width) !== null && _props$width8 !== void 0 ? _props$width8 : 0,
                height: (_ref5 = (_props$height3 = props.height) !== null && _props$height3 !== void 0 ? _props$height3 : props.width) !== null && _ref5 !== void 0 ? _ref5 : 0,
                pivot: (_props$pivot = props.pivot) !== null && _props$pivot !== void 0 ? _props$pivot : [0.5, 0.5]
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The RadialProgressEffect renders a border along all edges of an element
         */
        _RadialGradientEffect = RadialGradientEffect;
        _defineProperty(RadialGradientEffect, "z$__type__Props", void 0);
        _defineProperty(RadialGradientEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          height: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          pivot: {
            value: [0.5, 0.5],
            updateProgramValue: updateFloat32ArrayLength2,
            method: 'uniform2fv',
            type: 'vec2'
          },
          colors: {
            value: 0xffffffff,
            validator: function validator(rgbas) {
              return rgbas.reduce(function (acc, val) {
                return acc.concat(getNormalizedRgbaComponents(val));
              }, []);
            },
            updateProgramValue: updateFloat32ArrayLengthN,
            size: function size(props) {
              return props.colors.length;
            },
            method: 'uniform4fv',
            type: 'vec4'
          },
          stops: {
            value: [],
            size: function size(props) {
              return props.colors.length;
            },
            method: 'uniform1fv',
            type: 'float'
          }
        });
        _defineProperty(RadialGradientEffect, "ColorLoop", function (amount) {
          var loop = '';
          for (var i = 2; i < amount; i++) {
            loop += "colorOut = mix(colorOut, colors[".concat(i, "], clamp((dist - stops[").concat(i - 1, "]) / (stops[").concat(i, "] - stops[").concat(i - 1, "]), 0.0, 1.0));");
          }
          return loop;
        });
        _defineProperty(RadialGradientEffect, "onColorize", function (props) {
          var colors = props.colors.length || 1;
          return "\n      vec2 point = v_textureCoordinate.xy * u_dimensions;\n      vec2 projection = vec2(pivot.x * u_dimensions.x, pivot.y * u_dimensions.y);\n\n      float dist = length((point - projection) / vec2(width, height));\n\n      float stopCalc = (dist - stops[0]) / (stops[1] - stops[0]);\n      vec4 colorOut = mix(colors[0], colors[1], stopCalc);\n      ".concat(_RadialGradientEffect.ColorLoop(colors), "\n      return mix(maskColor, colorOut, clamp(colorOut.a, 0.0, 1.0));\n    ");
        });
        var RadialProgressEffect = /*#__PURE__*/function (_ShaderEffect13) {
          function RadialProgressEffect() {
            var _this31;
            _classCallCheck(this, RadialProgressEffect);
            for (var _len14 = arguments.length, args = new Array(_len14), _key17 = 0; _key17 < _len14; _key17++) {
              args[_key17] = arguments[_key17];
            }
            _this31 = _callSuper(this, RadialProgressEffect, [].concat(args));
            _defineProperty(_this31, "name", 'radialProgress');
            return _this31;
          }
          _inherits(RadialProgressEffect, _ShaderEffect13);
          return _createClass(RadialProgressEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "radialProgress";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$width9, _props$progress, _props$offset, _props$range, _props$rounded, _props$radius2, _props$color7;
              return {
                width: (_props$width9 = props.width) !== null && _props$width9 !== void 0 ? _props$width9 : 10,
                progress: (_props$progress = props.progress) !== null && _props$progress !== void 0 ? _props$progress : 0.5,
                offset: (_props$offset = props.offset) !== null && _props$offset !== void 0 ? _props$offset : 0,
                range: (_props$range = props.range) !== null && _props$range !== void 0 ? _props$range : Math.PI * 2,
                rounded: (_props$rounded = props.rounded) !== null && _props$rounded !== void 0 ? _props$rounded : false,
                radius: (_props$radius2 = props.radius) !== null && _props$radius2 !== void 0 ? _props$radius2 : 1,
                color: (_props$color7 = props.color) !== null && _props$color7 !== void 0 ? _props$color7 : 0xffffffff
              };
            }
          }]);
        }(ShaderEffect);
        /**
         * Masks the current maskcolor a holepunch effect with rounded corners similar to {@link RoundedRectangle}
         */
        _defineProperty(RadialProgressEffect, "z$__type__Props", void 0);
        _defineProperty(RadialProgressEffect, "uniforms", {
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          progress: {
            value: 0.5,
            method: 'uniform1f',
            type: 'float'
          },
          offset: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          range: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          rounded: {
            value: 0,
            method: 'uniform1f',
            type: 'float',
            validator: function validator(value) {
              return value ? 1 : 0;
            }
          },
          radius: {
            value: 1,
            method: 'uniform1f',
            type: 'float'
          },
          color: {
            value: 0xffffffff,
            updateProgramValue: updateShaderEffectColor,
            method: 'uniform4fv',
            type: 'vec4'
          }
        });
        _defineProperty(RadialProgressEffect, "methods", {
          rotateUV: "\n    vec2 function(vec2 uv, float d) {\n      float s = sin(d);\n      float c = cos(d);\n      mat2 rotMatrix = mat2(c, -s, s, c);\n      return uv * rotMatrix;\n    }\n    ",
          drawDot: "\n    float function(vec2 uv, vec2 p, float r) {\n      uv += p;\n      float circle = length(uv) - r;\n      return clamp(-circle, 0.0, 1.0);\n    }\n    "
        });
        _defineProperty(RadialProgressEffect, "onEffectMask", "\n    float outerRadius = radius * u_dimensions.y * 0.5;\n\n    float endAngle = range * progress - 0.0005;\n\n    vec2 uv = v_textureCoordinate.xy * u_dimensions.xy - u_dimensions * 0.5;\n\n    uv = $rotateUV(uv, -(offset));\n    float linewidth = width * u_pixelRatio;\n    float circle = length(uv) - (outerRadius - linewidth) ;\n    circle = abs(circle) - linewidth;\n    circle = clamp(-circle, 0.0, 1.0);\n\n    float angle = (atan(uv.x, -uv.y) / 3.14159265359 * 0.5);\n    float p = endAngle / (PI * 2.);\n\n    circle *= step(fract(angle), fract(p));\n\n    circle = rounded < 1. ? circle : max(circle, $drawDot(uv, vec2(0, outerRadius - linewidth), linewidth));\n    circle = rounded < 1. ? circle : max(circle, $drawDot($rotateUV(uv, -(endAngle)), vec2(0, outerRadius - linewidth), linewidth));\n\n    return mix(shaderColor, maskColor, circle);\n  ");
        _defineProperty(RadialProgressEffect, "onColorize", "\n    return color;\n  ");
        var HolePunchEffect = /*#__PURE__*/function (_ShaderEffect14) {
          function HolePunchEffect() {
            var _this32;
            _classCallCheck(this, HolePunchEffect);
            for (var _len15 = arguments.length, args = new Array(_len15), _key18 = 0; _key18 < _len15; _key18++) {
              args[_key18] = arguments[_key18];
            }
            _this32 = _callSuper(this, HolePunchEffect, [].concat(args));
            _defineProperty(_this32, "name", 'holePunch');
            return _this32;
          }
          _inherits(HolePunchEffect, _ShaderEffect14);
          return _createClass(HolePunchEffect, null, [{
            key: "getEffectKey",
            value: function getEffectKey() {
              return "holePunch";
            }
          }, {
            key: "resolveDefaults",
            value: function resolveDefaults(props) {
              var _props$radius3;
              return {
                x: props.x || 0,
                y: props.y || 0,
                width: props.width || 50,
                height: props.height || 50,
                radius: (_props$radius3 = props.radius) !== null && _props$radius3 !== void 0 ? _props$radius3 : 0
              };
            }
          }]);
        }(ShaderEffect);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _defineProperty(HolePunchEffect, "z$__type__Props", void 0);
        _defineProperty(HolePunchEffect, "uniforms", {
          x: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          y: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          width: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          height: {
            value: 0,
            method: 'uniform1f',
            type: 'float'
          },
          radius: {
            value: 0,
            method: 'uniform4fv',
            type: 'vec4',
            updateOnBind: true,
            validator: validateArrayLength4,
            updateProgramValue: updateWebSafeRadius
          }
        });
        _defineProperty(HolePunchEffect, "methods", {
          fillMask: "\n      float function(float dist) {\n        return clamp(-dist, 0.0, 1.0);\n      }\n    ",
          boxDist: "\n      float function(vec2 p, vec2 size, float radius) {\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n      }\n    "
        });
        _defineProperty(HolePunchEffect, "onShaderMask", "\n  vec2 halfDimensions = u_dimensions * 0.5;\n  vec2 size = vec2(width, height) * 0.5;\n  vec2 basePos = v_textureCoordinate.xy * u_dimensions.xy - vec2(x, y);\n  vec2 pos = basePos - size;\n  float r = radius[0] * step(pos.x, 0.5) * step(pos.y, 0.5);\n  r = r + radius[1] * step(0.5, pos.x) * step(pos.y, 0.5);\n  r = r + radius[2] * step(0.5, pos.x) * step(0.5, pos.y);\n  r = r + radius[3] * step(pos.x, 0.5) * step(0.5, pos.y);\n  return $boxDist(pos, size, r);\n  ");
        _defineProperty(HolePunchEffect, "onEffectMask", "\n  return mix(maskColor, vec4(0.0), $fillMask(shaderMask));\n  ");
        var ROUNDED_RECTANGLE_SHADER_TYPE = 'RoundedRectangle';
        var UnsupportedShader = /*#__PURE__*/function (_CoreShader2) {
          function UnsupportedShader(shType) {
            var _this33;
            _classCallCheck(this, UnsupportedShader);
            _this33 = _callSuper(this, UnsupportedShader);
            _defineProperty(_this33, "shType", void 0);
            _this33.shType = shType;
            if (shType !== ROUNDED_RECTANGLE_SHADER_TYPE) {
              console.warn('Unsupported shader:', shType);
            }
            return _this33;
          }
          _inherits(UnsupportedShader, _CoreShader2);
          return _createClass(UnsupportedShader, [{
            key: "bindRenderOp",
            value: function bindRenderOp() {
              // noop
            }
          }, {
            key: "bindProps",
            value: function bindProps() {
              // noop
            }
          }, {
            key: "attach",
            value: function attach() {
              // noop
            }
          }, {
            key: "detach",
            value: function detach() {
              // noop
            }
          }]);
        }(CoreShader);
        /**
         * Shader Controller Class
         *
         * @remarks
         * This class is used to control shader props.
         */
        var ShaderController = /*#__PURE__*/function () {
          function ShaderController(type, shader, props, stage) {
            var _this34 = this;
            _classCallCheck(this, ShaderController);
            _defineProperty(this, "type", void 0);
            _defineProperty(this, "shader", void 0);
            _defineProperty(this, "resolvedProps", void 0);
            _defineProperty(this, "props", void 0);
            this.type = type;
            this.shader = shader;
            this.resolvedProps = props;
            var keys = Object.keys(props);
            var l = keys.length;
            var definedProps = {};
            var _loop = function _loop() {
              var name = keys[i];
              Object.defineProperty(definedProps, name, {
                get: function get() {
                  return _this34.resolvedProps[name];
                },
                set: function set(value) {
                  _this34.resolvedProps[name] = value;
                  stage.requestRender();
                }
              });
            };
            for (var i = 0; i < l; i++) {
              _loop();
            }
            this.props = definedProps;
          }
          return _createClass(ShaderController, [{
            key: "getResolvedProps",
            value: function getResolvedProps() {
              return this.resolvedProps;
            }
          }]);
        }();
        var DynamicShaderController = /*#__PURE__*/function () {
          function DynamicShaderController(shader, props, shManager) {
            var _this35 = this;
            _classCallCheck(this, DynamicShaderController);
            _defineProperty(this, "shader", void 0);
            _defineProperty(this, "resolvedProps", void 0);
            _defineProperty(this, "props", void 0);
            _defineProperty(this, "type", void 0);
            this.shader = shader;
            this.type = 'DynamicShader';
            this.resolvedProps = props;
            var effectConstructors = shManager.getRegisteredEffects();
            var definedProps = {};
            var effects = props.effects;
            var effectsLength = effects.length;
            var _loop2 = function _loop2(i) {
              var _effects$i2 = effects[i],
                effectName = _effects$i2.name,
                effectProps = _effects$i2.props,
                effectType = _effects$i2.type;
              if (effectName === undefined) {
                return 1; // continue
              }
              var definedEffectProps = {};
              var propEntries = Object.keys(effectProps);
              var propEntriesLength = propEntries.length;
              var _loop3 = function _loop3() {
                var propName = propEntries[j];
                Object.defineProperty(definedEffectProps, propName, {
                  get: function get() {
                    return _this35.resolvedProps.effects[i].props[propName].value;
                  },
                  set: function set(value) {
                    var target = _this35.resolvedProps.effects[i].props[propName];
                    target.value = value;
                    if (target.hasValidator) {
                      var _effectConstructors$e;
                      value = target.validatedValue = (_effectConstructors$e = effectConstructors[effectType].uniforms[propName]) === null || _effectConstructors$e === void 0 ? void 0 : _effectConstructors$e.validator(value, effectProps);
                    }
                    if (target.hasProgramValueUpdater) {
                      var _effectConstructors$e2;
                      (_effectConstructors$e2 = effectConstructors[effectType].uniforms[propName]) === null || _effectConstructors$e2 === void 0 || _effectConstructors$e2.updateProgramValue(target);
                    } else {
                      target.programValue = value;
                    }
                    shManager.renderer.stage.requestRender();
                  }
                });
              };
              for (var j = 0; j < propEntriesLength; j++) {
                _loop3();
              }
              Object.defineProperty(definedProps, effectName, {
                get: function get() {
                  return definedEffectProps;
                }
              });
            };
            for (var i = 0; i < effectsLength; i++) {
              if (_loop2(i)) continue;
            }
            this.props = definedProps;
          }
          return _createClass(DynamicShaderController, [{
            key: "getResolvedProps",
            value: function getResolvedProps() {
              return this.resolvedProps;
            }
          }]);
        }();
        var CoreShaderManager = /*#__PURE__*/function () {
          function CoreShaderManager() {
            _classCallCheck(this, CoreShaderManager);
            _defineProperty(this, "shCache", new Map());
            _defineProperty(this, "shConstructors", {});
            _defineProperty(this, "attachedShader", null);
            _defineProperty(this, "effectConstructors", {});
            _defineProperty(this, "renderer", void 0);
            this.registerShaderType('DefaultShader', DefaultShader);
            this.registerShaderType('DefaultShaderBatched', DefaultShaderBatched);
            this.registerShaderType('RoundedRectangle', RoundedRectangle);
            this.registerShaderType('DynamicShader', DynamicShader);
            this.registerShaderType('SdfShader', SdfShader);
            this.registerEffectType('border', BorderEffect);
            this.registerEffectType('borderBottom', BorderBottomEffect);
            this.registerEffectType('borderLeft', BorderLeftEffect);
            this.registerEffectType('borderRight', BorderRightEffect);
            this.registerEffectType('borderTop', BorderTopEffect);
            this.registerEffectType('fadeOut', FadeOutEffect);
            this.registerEffectType('linearGradient', LinearGradientEffect);
            this.registerEffectType('radialGradient', RadialGradientEffect);
            this.registerEffectType('grayscale', GrayscaleEffect);
            this.registerEffectType('glitch', GlitchEffect);
            this.registerEffectType('radius', RadiusEffect);
            this.registerEffectType('radialProgress', RadialProgressEffect);
            this.registerEffectType('holePunch', HolePunchEffect);
          }
          return _createClass(CoreShaderManager, [{
            key: "registerShaderType",
            value: function registerShaderType(shType, shClass) {
              this.shConstructors[shType] = shClass;
            }
          }, {
            key: "registerEffectType",
            value: function registerEffectType(effectType, effectClass) {
              this.effectConstructors[effectType] = effectClass;
            }
          }, {
            key: "getRegisteredEffects",
            value: function getRegisteredEffects() {
              return this.effectConstructors;
            }
          }, {
            key: "getRegisteredShaders",
            value: function getRegisteredShaders() {
              return this.shConstructors;
            }
            /**
             * Loads a shader (if not already loaded) and returns a controller for it.
             *
             * @param shType
             * @param props
             * @returns
             */
          }, {
            key: "loadShader",
            value: function loadShader(shType, props) {
              if (!this.renderer) {
                throw new Error("Renderer is not been defined");
              }
              var ShaderClass = this.shConstructors[shType];
              if (!ShaderClass) {
                throw new Error("Shader type \"".concat(shType, "\" is not registered"));
              }
              if (this.renderer.mode === 'canvas' && ShaderClass.prototype instanceof WebGlCoreShader) {
                return this._createShaderCtr(shType, new UnsupportedShader(shType), props);
              }
              if (shType === 'DynamicShader') {
                return this.loadDynamicShader(props);
              }
              var resolvedProps = ShaderClass.resolveDefaults(props);
              var cacheKey = ShaderClass.makeCacheKey(resolvedProps) || ShaderClass.name;
              if (cacheKey && this.shCache.has(cacheKey)) {
                return this._createShaderCtr(shType, this.shCache.get(cacheKey), resolvedProps);
              }
              // @ts-expect-error ShaderClass WILL accept a Renderer
              var shader = new ShaderClass(this.renderer, props);
              if (cacheKey) {
                this.shCache.set(cacheKey, shader);
              }
              return this._createShaderCtr(shType, shader, resolvedProps);
            }
          }, {
            key: "loadDynamicShader",
            value: function loadDynamicShader(props) {
              if (!this.renderer) {
                throw new Error("Renderer is not been defined");
              }
              var resolvedProps = DynamicShader.resolveDefaults(props, this.effectConstructors);
              var cacheKey = DynamicShader.makeCacheKey(resolvedProps, this.effectConstructors);
              if (cacheKey && this.shCache.has(cacheKey)) {
                return this._createDynShaderCtr(this.shCache.get(cacheKey), resolvedProps);
              }
              var shader = new DynamicShader(this.renderer, props, this.effectConstructors);
              if (cacheKey) {
                this.shCache.set(cacheKey, shader);
              }
              return this._createDynShaderCtr(shader, resolvedProps);
            }
          }, {
            key: "_createShaderCtr",
            value: function _createShaderCtr(type, shader, props) {
              return new ShaderController(type, shader, props, this.renderer.stage);
            }
          }, {
            key: "_createDynShaderCtr",
            value: function _createDynShaderCtr(shader, props) {
              return new DynamicShaderController(shader, props, this);
            }
          }, {
            key: "useShader",
            value: function useShader(shader) {
              if (this.attachedShader === shader) {
                return;
              }
              if (this.attachedShader) {
                this.attachedShader.detach();
              }
              shader.attach();
              this.attachedShader = shader;
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var trPropSetterDefaults = {
          x: function x(state, value) {
            state.props.x = value;
          },
          y: function y(state, value) {
            state.props.y = value;
          },
          width: function width(state, value) {
            state.props.width = value;
          },
          height: function height(state, value) {
            state.props.height = value;
          },
          color: function color(state, value) {
            state.props.color = value;
          },
          zIndex: function zIndex(state, value) {
            state.props.zIndex = value;
          },
          fontFamily: function fontFamily(state, value) {
            state.props.fontFamily = value;
          },
          fontWeight: function fontWeight(state, value) {
            state.props.fontWeight = value;
          },
          fontStyle: function fontStyle(state, value) {
            state.props.fontStyle = value;
          },
          fontStretch: function fontStretch(state, value) {
            state.props.fontStretch = value;
          },
          fontSize: function fontSize(state, value) {
            state.props.fontSize = value;
          },
          text: function text(state, value) {
            state.props.text = value;
          },
          textAlign: function textAlign(state, value) {
            state.props.textAlign = value;
          },
          contain: function contain(state, value) {
            state.props.contain = value;
          },
          offsetY: function offsetY(state, value) {
            state.props.offsetY = value;
          },
          scrollable: function scrollable(state, value) {
            state.props.scrollable = value;
          },
          scrollY: function scrollY(state, value) {
            state.props.scrollY = value;
          },
          letterSpacing: function letterSpacing(state, value) {
            state.props.letterSpacing = value;
          },
          lineHeight: function lineHeight(state, value) {
            state.props.lineHeight = value;
          },
          maxLines: function maxLines(state, value) {
            state.props.maxLines = value;
          },
          textBaseline: function textBaseline(state, value) {
            state.props.textBaseline = value;
          },
          verticalAlign: function verticalAlign(state, value) {
            state.props.verticalAlign = value;
          },
          overflowSuffix: function overflowSuffix(state, value) {
            state.props.overflowSuffix = value;
          },
          debug: function debug(state, value) {
            state.props.debug = value;
          }
        };
        var TextRenderer = /*#__PURE__*/function () {
          function TextRenderer(stage) {
            var _this36 = this;
            _classCallCheck(this, TextRenderer);
            _defineProperty(this, "stage", void 0);
            _defineProperty(this, "set", void 0);
            this.stage = stage;
            var propSetters = _objectSpread(_objectSpread({}, trPropSetterDefaults), this.getPropertySetters());
            // For each prop setter add a wrapper method that checks if the prop is
            // different before calling the setter
            this.set = Object.freeze(Object.fromEntries(Object.entries(propSetters).map(function (_ref6) {
              var _ref7 = _slicedToArray(_ref6, 2),
                key = _ref7[0],
                setter = _ref7[1];
              return [key, function (state, value) {
                if (state.props[key] !== value) {
                  setter(state, value);
                  // Assume any prop change will require a render
                  // This is required because otherwise a paused RAF will result
                  // in renders when text props are changed.
                  _this36.stage.requestRender();
                }
              }];
            })));
          }
          return _createClass(TextRenderer, [{
            key: "setStatus",
            value: function setStatus(state, status, error) {
              // Don't emit the same status twice
              if (state.status === status) {
                return;
              }
              state.status = status;
              state.emitter.emit(status, error);
            }
            /**
             * Allows the CoreTextNode to communicate changes to the isRenderable state of
             * the itself.
             *
             * @param state
             * @param renderable
             */
          }, {
            key: "setIsRenderable",
            value: function setIsRenderable(state, renderable) {
              state.isRenderable = renderable;
            }
            /**
             * Destroy/Clean up the state object
             *
             * @remarks
             * Opposite of createState(). Frees any event listeners / resources held by
             * the state that may not reliably get garbage collected.
             *
             * @param state
             */
          }, {
            key: "destroyState",
            value: function destroyState(state) {
              this.setStatus(state, 'destroyed');
              state.emitter.removeAllListeners();
            }
            /**
             * Schedule a state update via queueMicrotask
             *
             * @remarks
             * This method is used to schedule a state update via queueMicrotask. This
             * method should be called whenever a state update is needed, and it will
             * ensure that the state is only updated once per microtask.
             * @param state
             * @returns
             */
          }, {
            key: "scheduleUpdateState",
            value: function scheduleUpdateState(state) {
              var _this37 = this;
              if (state.updateScheduled) {
                return;
              }
              state.updateScheduled = true;
              queueMicrotask(function () {
                // If the state has been destroyed, don't update it
                if (state.status === 'destroyed') {
                  return;
                }
                state.updateScheduled = false;
                _this37.updateState(state);
              });
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Class that keeps track of the invocations of Context methods when
         * the `enableContextSpy` renderer option is enabled.
         */
        var ContextSpy = /*#__PURE__*/function () {
          function ContextSpy() {
            _classCallCheck(this, ContextSpy);
            _defineProperty(this, "data", {});
          }
          return _createClass(ContextSpy, [{
            key: "reset",
            value: function reset() {
              this.data = {};
            }
          }, {
            key: "increment",
            value: function increment(name) {
              if (!this.data[name]) {
                this.data[name] = 0;
              }
              this.data[name]++;
            }
          }, {
            key: "getData",
            value: function getData() {
              return _objectSpread({}, this.data);
            }
          }]);
        }();
        /**
         * LRU (Least Recently Used) style memory manager for textures
         *
         * @remarks
         * This class is responsible for managing the memory usage of textures
         * in the Renderer. It keeps track of the memory used by each texture
         * and triggers a cleanup when the memory usage exceeds a critical
         * threshold (`criticalThreshold`).
         *
         * The cleanup process will free up non-renderable textures until the
         * memory usage is below a target threshold (`targetThresholdLevel`).
         *
         * The memory manager's clean up process will also be triggered when the
         * scene is idle for a certain amount of time (`cleanupInterval`).
         */
        var TextureMemoryManager = /*#__PURE__*/function () {
          function TextureMemoryManager(stage, settings) {
            var _this38 = this;
            _classCallCheck(this, TextureMemoryManager);
            _defineProperty(this, "stage", void 0);
            _defineProperty(this, "memUsed", 0);
            _defineProperty(this, "loadedTextures", new Map());
            _defineProperty(this, "criticalThreshold", void 0);
            _defineProperty(this, "targetThreshold", void 0);
            _defineProperty(this, "cleanupInterval", void 0);
            _defineProperty(this, "debugLogging", void 0);
            _defineProperty(this, "lastCleanupTime", 0);
            _defineProperty(this, "criticalCleanupRequested", false);
            /**
             * The current frame time in milliseconds
             *
             * @remarks
             * This is used to determine when to perform Idle Texture Cleanups.
             *
             * Set by stage via `updateFrameTime` method.
             */
            _defineProperty(this, "frameTime", 0);
            this.stage = stage;
            var criticalThreshold = settings.criticalThreshold;
            this.criticalThreshold = Math.round(criticalThreshold);
            var targetFraction = Math.max(0, Math.min(1, settings.targetThresholdLevel));
            this.targetThreshold = Math.round(criticalThreshold * targetFraction);
            this.cleanupInterval = settings.cleanupInterval;
            this.debugLogging = settings.debugLogging;
            if (settings.debugLogging) {
              var lastMemUse = 0;
              setInterval(function () {
                if (lastMemUse !== _this38.memUsed) {
                  lastMemUse = _this38.memUsed;
                  console.log("[TextureMemoryManager] Memory used: ".concat(bytesToMb$1(_this38.memUsed), " mb / ").concat(bytesToMb$1(_this38.criticalThreshold), " mb (").concat((_this38.memUsed / _this38.criticalThreshold * 100).toFixed(1), "%)"));
                }
              }, 1000);
            }
            // If the threshold is 0, we disable the memory manager by replacing the
            // setTextureMemUse method with a no-op function.
            if (criticalThreshold === 0) {
              // eslint-disable-next-line @typescript-eslint/no-empty-function
              this.setTextureMemUse = function () {};
            }
          }
          return _createClass(TextureMemoryManager, [{
            key: "setTextureMemUse",
            value: function setTextureMemUse(texture, byteSize) {
              if (this.loadedTextures.has(texture)) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.memUsed -= this.loadedTextures.get(texture);
              }
              if (byteSize === 0) {
                this.loadedTextures.delete(texture);
                return;
              } else {
                this.memUsed += byteSize;
                this.loadedTextures.set(texture, byteSize);
              }
              if (this.memUsed > this.criticalThreshold) {
                this.criticalCleanupRequested = true;
              }
            }
          }, {
            key: "checkCleanup",
            value: function checkCleanup() {
              return this.criticalCleanupRequested || this.memUsed > this.targetThreshold && this.frameTime - this.lastCleanupTime >= this.cleanupInterval;
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var critical = this.criticalCleanupRequested;
              this.lastCleanupTime = this.frameTime;
              this.criticalCleanupRequested = false;
              if (critical) {
                this.stage.queueFrameEvent('criticalCleanup', {
                  memUsed: this.memUsed,
                  criticalThreshold: this.criticalThreshold
                });
              }
              if (this.debugLogging) {
                console.log("[TextureMemoryManager] Cleaning up textures. Critical: ".concat(critical));
              }
              /**
               * Sort the loaded textures by renderability, then by last touch time.
               *
               * This will ensure that the array is ordered by the following:
               * - Non-renderable textures, starting at the least recently rendered
               * - Renderable textures, starting at the least recently rendered
               */
              var textures = _toConsumableArray(this.loadedTextures.keys()).sort(function (textureA, textureB) {
                var txARenderable = textureA.renderable;
                var txBRenderable = textureB.renderable;
                if (txARenderable === txBRenderable) {
                  return textureA.lastRenderableChangeTime - textureB.lastRenderableChangeTime;
                } else if (txARenderable) {
                  return 1;
                } else if (txBRenderable) {
                  return -1;
                }
                return 0;
              });
              // Free non-renderable textures until we reach the target threshold
              var memTarget = this.targetThreshold;
              var txManager = this.stage.txManager;
              var _iterator6 = _createForOfIteratorHelper(textures),
                _step6;
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var texture = _step6.value;
                  if (texture.renderable) {
                    // Stop at the first renderable texture (The rest are renderable because of the sort above)
                    // We don't want to free renderable textures because they will just likely be reloaded in the next frame
                    break;
                  }
                  if (texture.preventCleanup === false) {
                    texture.ctxTexture.free();
                    txManager.removeTextureFromCache(texture);
                  }
                  if (this.memUsed <= memTarget) {
                    // Stop once we've freed enough textures to reach under the target threshold
                    break;
                  }
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
              if (this.memUsed >= this.criticalThreshold) {
                this.stage.queueFrameEvent('criticalCleanupFailed', {
                  memUsed: this.memUsed,
                  criticalThreshold: this.criticalThreshold
                });
                console.warn("[TextureMemoryManager] Memory usage above critical threshold after cleanup: ".concat(this.memUsed));
              }
            }
            /**
             * Get the current texture memory usage information
             *
             * @remarks
             * This method is for debugging purposes and returns information about the
             * current memory usage of the textures in the Renderer.
             */
          }, {
            key: "getMemoryInfo",
            value: function getMemoryInfo() {
              var _this39 = this;
              var renderableTexturesLoaded = 0;
              var renderableMemUsed = _toConsumableArray(this.loadedTextures.keys()).reduce(
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              function (acc, texture) {
                renderableTexturesLoaded += texture.renderable ? 1 : 0;
                return acc + (texture.renderable ? _this39.loadedTextures.get(texture) : 0);
              }, 0);
              return {
                criticalThreshold: this.criticalThreshold,
                targetThreshold: this.targetThreshold,
                renderableMemUsed: renderableMemUsed,
                memUsed: this.memUsed,
                renderableTexturesLoaded: renderableTexturesLoaded,
                loadedTextures: this.loadedTextures.size
              };
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreContextTexture = /*#__PURE__*/function () {
          function CoreContextTexture(memManager, textureSource) {
            _classCallCheck(this, CoreContextTexture);
            _defineProperty(this, "textureSource", void 0);
            _defineProperty(this, "memManager", void 0);
            this.memManager = memManager;
            this.textureSource = textureSource;
          }
          return _createClass(CoreContextTexture, [{
            key: "setTextureMemUse",
            value: function setTextureMemUse(byteSize) {
              this.memManager.setTextureMemUse(this.textureSource, byteSize);
            }
          }, {
            key: "renderable",
            get: function get() {
              return this.textureSource.renderable;
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreRenderer = /*#__PURE__*/_createClass(function CoreRenderer(options) {
          _classCallCheck(this, CoreRenderer);
          _defineProperty(this, "options", void 0);
          _defineProperty(this, "mode", void 0);
          _defineProperty(this, "stage", void 0);
          //// Core Managers
          _defineProperty(this, "txManager", void 0);
          _defineProperty(this, "txMemManager", void 0);
          _defineProperty(this, "shManager", void 0);
          _defineProperty(this, "rttNodes", []);
          this.options = options;
          this.stage = options.stage;
          this.txManager = options.txManager;
          this.txMemManager = options.txMemManager;
          this.shManager = options.shManager;
        });
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An CoreNode in the Renderer scene graph that renders text.
         *
         * @remarks
         * A Text Node is the second graphical building block of the Renderer scene
         * graph. It renders text using a specific text renderer that is automatically
         * chosen based on the font requested and what type of fonts are installed
         * into an app.
         *
         * The text renderer can be overridden by setting the `textRendererOverride`
         *
         * The `texture` and `shader` properties are managed by loaded text renderer and
         * should not be set directly.
         *
         * For non-text rendering, see {@link CoreNode}.
         */
        var CoreTextNode = /*#__PURE__*/function (_CoreNode2) {
          function CoreTextNode(stage, props, textRenderer) {
            var _this40;
            _classCallCheck(this, CoreTextNode);
            _this40 = _callSuper(this, CoreTextNode, [stage, props]);
            _defineProperty(_this40, "textRenderer", void 0);
            _defineProperty(_this40, "trState", void 0);
            _defineProperty(_this40, "_textRendererOverride", null);
            _defineProperty(_this40, "onTextLoaded", function () {
              var _this41 = _this40,
                contain = _this41.contain;
              var setWidth = _this40.trState.props.width;
              var setHeight = _this40.trState.props.height;
              var calcWidth = _this40.trState.textW || 0;
              var calcHeight = _this40.trState.textH || 0;
              if (contain === 'both') {
                _this40.props.width = setWidth;
                _this40.props.height = setHeight;
              } else if (contain === 'width') {
                _this40.props.width = setWidth;
                _this40.props.height = calcHeight;
              } else if (contain === 'none') {
                _this40.props.width = calcWidth;
                _this40.props.height = calcHeight;
              }
              _this40.updateLocalTransform();
              // Incase the RAF loop has been stopped already before text was loaded,
              // we request a render so it can be drawn.
              _this40.stage.requestRender();
              _this40.emit('loaded', {
                type: 'text',
                dimensions: {
                  width: _this40.trState.textW || 0,
                  height: _this40.trState.textH || 0
                }
              });
            });
            _defineProperty(_this40, "onTextFailed", function (target, error) {
              _this40.emit('failed', {
                type: 'text',
                error: error
              });
            });
            _this40._textRendererOverride = props.textRendererOverride;
            _this40.textRenderer = textRenderer;
            var textRendererState = _this40.createState({
              x: _this40.absX,
              y: _this40.absY,
              width: props.width,
              height: props.height,
              textAlign: props.textAlign,
              color: props.color,
              zIndex: props.zIndex,
              contain: props.contain,
              scrollable: props.scrollable,
              scrollY: props.scrollY,
              offsetY: props.offsetY,
              letterSpacing: props.letterSpacing,
              debug: props.debug,
              fontFamily: props.fontFamily,
              fontSize: props.fontSize,
              fontStretch: props.fontStretch,
              fontStyle: props.fontStyle,
              fontWeight: props.fontWeight,
              text: props.text,
              lineHeight: props.lineHeight,
              maxLines: props.maxLines,
              textBaseline: props.textBaseline,
              verticalAlign: props.verticalAlign,
              overflowSuffix: props.overflowSuffix
            });
            _this40.trState = textRendererState;
            return _this40;
          }
          _inherits(CoreTextNode, _CoreNode2);
          return _createClass(CoreTextNode, [{
            key: "width",
            get: function get() {
              return this.props.width;
            },
            set: function set(value) {
              this.props.width = value;
              this.textRenderer.set.width(this.trState, value);
              // If not containing, we must update the local transform to account for the
              // new width
              if (this.contain === 'none') {
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "height",
            get: function get() {
              return this.props.height;
            },
            set: function set(value) {
              this.props.height = value;
              this.textRenderer.set.height(this.trState, value);
              // If not containing in the horizontal direction, we must update the local
              // transform to account for the new height
              if (this.contain !== 'both') {
                this.setUpdateType(UpdateType.Local);
              }
            }
          }, {
            key: "color",
            get: function get() {
              return this.trState.props.color;
            },
            set: function set(value) {
              this.textRenderer.set.color(this.trState, value);
            }
          }, {
            key: "text",
            get: function get() {
              return this.trState.props.text;
            },
            set: function set(value) {
              this.textRenderer.set.text(this.trState, value);
            }
          }, {
            key: "textRendererOverride",
            get: function get() {
              return this._textRendererOverride;
            },
            set: function set(value) {
              this._textRendererOverride = value;
              this.textRenderer.destroyState(this.trState);
              var textRenderer = this.stage.resolveTextRenderer(this.trState.props, this._textRendererOverride);
              if (!textRenderer) {
                console.warn('Text Renderer not found for font', this.trState.props.fontFamily);
                return;
              }
              this.textRenderer = textRenderer;
              this.trState = this.createState(this.trState.props);
            }
          }, {
            key: "fontSize",
            get: function get() {
              return this.trState.props.fontSize;
            },
            set: function set(value) {
              this.textRenderer.set.fontSize(this.trState, value);
            }
          }, {
            key: "fontFamily",
            get: function get() {
              return this.trState.props.fontFamily;
            },
            set: function set(value) {
              this.textRenderer.set.fontFamily(this.trState, value);
            }
          }, {
            key: "fontStretch",
            get: function get() {
              return this.trState.props.fontStretch;
            },
            set: function set(value) {
              this.textRenderer.set.fontStretch(this.trState, value);
            }
          }, {
            key: "fontStyle",
            get: function get() {
              return this.trState.props.fontStyle;
            },
            set: function set(value) {
              this.textRenderer.set.fontStyle(this.trState, value);
            }
          }, {
            key: "fontWeight",
            get: function get() {
              return this.trState.props.fontWeight;
            },
            set: function set(value) {
              this.textRenderer.set.fontWeight(this.trState, value);
            }
          }, {
            key: "textAlign",
            get: function get() {
              return this.trState.props.textAlign;
            },
            set: function set(value) {
              this.textRenderer.set.textAlign(this.trState, value);
            }
          }, {
            key: "contain",
            get: function get() {
              return this.trState.props.contain;
            },
            set: function set(value) {
              this.textRenderer.set.contain(this.trState, value);
            }
          }, {
            key: "scrollable",
            get: function get() {
              return this.trState.props.scrollable;
            },
            set: function set(value) {
              this.textRenderer.set.scrollable(this.trState, value);
            }
          }, {
            key: "scrollY",
            get: function get() {
              return this.trState.props.scrollY;
            },
            set: function set(value) {
              this.textRenderer.set.scrollY(this.trState, value);
            }
          }, {
            key: "offsetY",
            get: function get() {
              return this.trState.props.offsetY;
            },
            set: function set(value) {
              this.textRenderer.set.offsetY(this.trState, value);
            }
          }, {
            key: "letterSpacing",
            get: function get() {
              return this.trState.props.letterSpacing;
            },
            set: function set(value) {
              this.textRenderer.set.letterSpacing(this.trState, value);
            }
          }, {
            key: "lineHeight",
            get: function get() {
              return this.trState.props.lineHeight;
            },
            set: function set(value) {
              this.textRenderer.set.lineHeight(this.trState, value);
            }
          }, {
            key: "maxLines",
            get: function get() {
              return this.trState.props.maxLines;
            },
            set: function set(value) {
              this.textRenderer.set.maxLines(this.trState, value);
            }
          }, {
            key: "textBaseline",
            get: function get() {
              return this.trState.props.textBaseline;
            },
            set: function set(value) {
              this.textRenderer.set.textBaseline(this.trState, value);
            }
          }, {
            key: "verticalAlign",
            get: function get() {
              return this.trState.props.verticalAlign;
            },
            set: function set(value) {
              this.textRenderer.set.verticalAlign(this.trState, value);
            }
          }, {
            key: "overflowSuffix",
            get: function get() {
              return this.trState.props.overflowSuffix;
            },
            set: function set(value) {
              this.textRenderer.set.overflowSuffix(this.trState, value);
            }
          }, {
            key: "debug",
            get: function get() {
              return this.trState.props.debug;
            },
            set: function set(value) {
              this.textRenderer.set.debug(this.trState, value);
            }
          }, {
            key: "update",
            value: function update(delta, parentClippingRect) {
              _superPropGet(CoreTextNode, "update", this, 3)([delta, parentClippingRect]);
              assertTruthy(this.globalTransform);
              // globalTransform is updated in super.update(delta)
              this.textRenderer.set.x(this.trState, this.globalTransform.tx);
              this.textRenderer.set.y(this.trState, this.globalTransform.ty);
            }
          }, {
            key: "checkRenderProps",
            value: function checkRenderProps() {
              if (this.trState && this.trState.props.text !== '') {
                return true;
              }
              return _superPropGet(CoreTextNode, "checkRenderProps", this, 3)([]);
            }
          }, {
            key: "onChangeIsRenderable",
            value: function onChangeIsRenderable(isRenderable) {
              _superPropGet(CoreTextNode, "onChangeIsRenderable", this, 3)([isRenderable]);
              this.textRenderer.setIsRenderable(this.trState, isRenderable);
            }
          }, {
            key: "renderQuads",
            value: function renderQuads(renderer) {
              var _this$props$parent5;
              assertTruthy(this.globalTransform);
              // If the text renderer does not support rendering quads, fallback to the
              // default renderQuads method
              if (!this.textRenderer.renderQuads) {
                _superPropGet(CoreTextNode, "renderQuads", this, 3)([renderer]);
                return;
              }
              // If the text renderer does support rendering quads, use it...
              // Prevent quad rendering if parent has a render texture
              // and this node is not the render texture
              if (this.parentHasRenderTexture) {
                if (!renderer.renderToTextureActive) {
                  return;
                }
                // Prevent quad rendering if parent render texture is not the active render texture
                if (this.parentRenderTexture !== renderer.activeRttNode) {
                  return;
                }
              }
              if (this.parentHasRenderTexture && (_this$props$parent5 = this.props.parent) !== null && _this$props$parent5 !== void 0 && _this$props$parent5.rtt) {
                this.globalTransform = Matrix3d.identity();
                if (this.localTransform) {
                  this.globalTransform.multiply(this.localTransform);
                }
              }
              assertTruthy(this.globalTransform);
              this.textRenderer.renderQuads(this.trState, this.globalTransform, this.clippingRect, this.worldAlpha, this.parentHasRenderTexture, this.framebufferDimensions);
            }
            /**
             * Destroy the node and cleanup all resources
             */
          }, {
            key: "destroy",
            value: function destroy() {
              _superPropGet(CoreTextNode, "destroy", this, 3)([]);
              this.textRenderer.destroyState(this.trState);
            }
            /**
             * Resolve a text renderer and a new state based on the current text renderer props provided
             * @param props
             * @returns
             */
          }, {
            key: "createState",
            value: function createState(props) {
              var textRendererState = this.textRenderer.createState(props, this);
              textRendererState.emitter.on('loaded', this.onTextLoaded);
              textRendererState.emitter.on('failed', this.onTextFailed);
              this.textRenderer.scheduleUpdateState(textRendererState);
              return textRendererState;
            }
          }]);
        }(CoreNode);
        function santizeCustomDataMap(d) {
          var validTypes = {
            boolean: true,
            string: true,
            number: true,
            undefined: true
          };
          var keys = Object.keys(d);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!key) {
              continue;
            }
            var value = d[key];
            var valueType = typeof value;
            // Typescript doesn't understand the above const valueType ¯\_(ツ)_/¯
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore-next-line
            if (valueType === 'string' && value.length > 2048) {
              console.warn("Custom Data value for ".concat(key, " is too long, it will be truncated to 2048 characters"));
              // same here, see above comment, this can only be a string at this point
              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
              // @ts-ignore-next-line
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
              d[key] = value.substring(0, 2048);
            }
            if (!validTypes[valueType]) {
              console.warn("Custom Data value for ".concat(key, " is not a boolean, string, or number, it will be ignored"));
              delete d[key];
            }
          }
          return d;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var bufferMemory = 2e6;
        var Stage = /*#__PURE__*/function () {
          /**
           * Stage constructor
           */
          function Stage(options) {
            var _this42 = this;
            _classCallCheck(this, Stage);
            _defineProperty(this, "options", void 0);
            /// Module Instances
            _defineProperty(this, "animationManager", void 0);
            _defineProperty(this, "txManager", void 0);
            _defineProperty(this, "txMemManager", void 0);
            _defineProperty(this, "fontManager", void 0);
            _defineProperty(this, "textRenderers", void 0);
            _defineProperty(this, "shManager", void 0);
            _defineProperty(this, "renderer", void 0);
            _defineProperty(this, "root", void 0);
            _defineProperty(this, "boundsMargin", void 0);
            _defineProperty(this, "defShaderCtr", void 0);
            /**
             * Renderer Event Bus for the Stage to emit events onto
             *
             * @remarks
             * In reality this is just the RendererMain instance, which is an EventEmitter.
             * this allows us to directly emit events from the Stage to RendererMain
             * without having to set up forwarding handlers.
             */
            _defineProperty(this, "eventBus", void 0);
            /// State
            _defineProperty(this, "deltaTime", 0);
            _defineProperty(this, "lastFrameTime", 0);
            _defineProperty(this, "currentFrameTime", 0);
            _defineProperty(this, "fpsNumFrames", 0);
            _defineProperty(this, "fpsElapsedTime", 0);
            _defineProperty(this, "renderRequested", false);
            _defineProperty(this, "frameEventQueue", []);
            _defineProperty(this, "fontResolveMap", {});
            /// Debug data
            _defineProperty(this, "contextSpy", null);
            this.options = options;
            var canvas = options.canvas,
              clearColor = options.clearColor,
              appWidth = options.appWidth,
              appHeight = options.appHeight,
              boundsMargin = options.boundsMargin,
              enableContextSpy = options.enableContextSpy,
              numImageWorkers = options.numImageWorkers,
              textureMemory = options.textureMemory,
              renderEngine = options.renderEngine,
              fontEngines = options.fontEngines;
            this.eventBus = options.eventBus;
            this.txManager = new CoreTextureManager(numImageWorkers);
            this.txMemManager = new TextureMemoryManager(this, textureMemory);
            this.shManager = new CoreShaderManager();
            this.animationManager = new AnimationManager();
            this.contextSpy = enableContextSpy ? new ContextSpy() : null;
            var bm = [0, 0, 0, 0];
            if (boundsMargin) {
              bm = Array.isArray(boundsMargin) ? boundsMargin : [boundsMargin, boundsMargin, boundsMargin, boundsMargin];
            }
            this.boundsMargin = bm;
            var rendererOptions = {
              stage: this,
              canvas: canvas,
              pixelRatio: options.devicePhysicalPixelRatio * options.deviceLogicalPixelRatio,
              clearColor: clearColor !== null && clearColor !== void 0 ? clearColor : 0xff000000,
              bufferMemory: bufferMemory,
              txManager: this.txManager,
              txMemManager: this.txMemManager,
              shManager: this.shManager,
              contextSpy: this.contextSpy
            };
            this.renderer = new renderEngine(rendererOptions);
            var renderMode = this.renderer.mode || 'webgl';
            this.defShaderCtr = this.renderer.getDefShaderCtr();
            setPremultiplyMode(renderMode);
            // Must do this after renderer is created
            this.txManager.renderer = this.renderer;
            // Create text renderers
            this.textRenderers = {};
            fontEngines.forEach(function (fontEngineConstructor) {
              var fontEngineInstance = new fontEngineConstructor(_this42);
              var className = fontEngineInstance.type;
              if (className === 'sdf' && renderMode === 'canvas') {
                console.warn('SdfTextRenderer is not compatible with Canvas renderer. Skipping...');
                return;
              }
              if (fontEngineInstance instanceof TextRenderer) {
                if (className === 'canvas') {
                  _this42.textRenderers['canvas'] = fontEngineInstance;
                } else if (className === 'sdf') {
                  _this42.textRenderers['sdf'] = fontEngineInstance;
                }
              }
            });
            if (Object.keys(this.textRenderers).length === 0) {
              console.warn('No text renderers available. Your text will not render.');
            }
            this.fontManager = new TrFontManager(this.textRenderers);
            // create root node
            var rootNode = new CoreNode(this, {
              x: 0,
              y: 0,
              width: appWidth,
              height: appHeight,
              alpha: 1,
              autosize: false,
              clipping: false,
              color: 0x00000000,
              colorTop: 0x00000000,
              colorBottom: 0x00000000,
              colorLeft: 0x00000000,
              colorRight: 0x00000000,
              colorTl: 0x00000000,
              colorTr: 0x00000000,
              colorBl: 0x00000000,
              colorBr: 0x00000000,
              zIndex: 0,
              zIndexLocked: 0,
              scaleX: 1,
              scaleY: 1,
              mountX: 0,
              mountY: 0,
              mount: 0,
              pivot: 0.5,
              pivotX: 0.5,
              pivotY: 0.5,
              rotation: 0,
              parent: null,
              texture: null,
              textureOptions: {},
              shader: this.defShaderCtr,
              rtt: false,
              src: null,
              scale: 1,
              preventCleanup: false
            });
            this.root = rootNode;
            // execute platform start loop
            {
              startLoop(this);
            }
          }
          return _createClass(Stage, [{
            key: "updateFrameTime",
            value: function updateFrameTime() {
              var newFrameTime = getTimeStamp();
              this.lastFrameTime = this.currentFrameTime;
              this.currentFrameTime = newFrameTime;
              this.deltaTime = !this.lastFrameTime ? 100 / 6 : newFrameTime - this.lastFrameTime;
              this.txManager.frameTime = newFrameTime;
              this.txMemManager.frameTime = newFrameTime;
              // This event is emitted at the beginning of the frame (before any updates
              // or rendering), so no need to to use `stage.queueFrameEvent` here.
              this.eventBus.emit('frameTick', {
                time: this.currentFrameTime,
                delta: this.deltaTime
              });
            }
            /**
             * Update animations
             */
          }, {
            key: "updateAnimations",
            value: function updateAnimations() {
              var animationManager = this.animationManager;
              if (!this.root) {
                return;
              }
              // step animation
              animationManager.update(this.deltaTime);
            }
            /**
             * Check if the scene has updates
             */
          }, {
            key: "hasSceneUpdates",
            value: function hasSceneUpdates() {
              return !!this.root.updateType || this.renderRequested;
            }
            /**
             * Start a new frame draw
             */
          }, {
            key: "drawFrame",
            value: function drawFrame() {
              var renderer = this.renderer,
                renderRequested = this.renderRequested;
              assertTruthy(renderer);
              // Update tree if needed
              if (this.root.updateType !== 0) {
                this.root.update(this.deltaTime, this.root.clippingRect);
              }
              // Reset render operations and clear the canvas
              renderer.reset();
              // Check if we need to cleanup textures
              if (this.txMemManager.criticalCleanupRequested) {
                this.txMemManager.cleanup();
              }
              // If we have RTT nodes draw them first
              // So we can use them as textures in the main scene
              if (renderer.rttNodes.length > 0) {
                renderer.renderRTTNodes();
              }
              // Fill quads buffer
              this.addQuads(this.root);
              // Perform render pass
              renderer === null || renderer === void 0 || renderer.render();
              this.calculateFps();
              // Reset renderRequested flag if it was set
              if (renderRequested) {
                this.renderRequested = false;
              }
            }
            /**
             * Queue an event to be emitted after the current/next frame is rendered
             *
             * @remarks
             * When we are operating in the context of the render loop, we may want to
             * emit events that are related to the current frame. However, we generally do
             * NOT want to emit events directly in the middle of the render loop, since
             * this could enable event handlers to modify the scene graph and cause
             * unexpected behavior. Instead, we queue up events to be emitted and then
             * flush the queue after the frame has been rendered.
             *
             * @param name
             * @param data
             */
          }, {
            key: "queueFrameEvent",
            value: function queueFrameEvent(name, data) {
              this.frameEventQueue.push([name, data]);
            }
            /**
             * Emit all queued frame events
             *
             * @remarks
             * This method should be called after the frame has been rendered to emit
             * all events that were queued during the frame.
             *
             * See {@link queueFrameEvent} for more information.
             */
          }, {
            key: "flushFrameEvents",
            value: function flushFrameEvents() {
              var _iterator7 = _createForOfIteratorHelper(this.frameEventQueue),
                _step7;
              try {
                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                  var _step7$value = _slicedToArray(_step7.value, 2),
                    name = _step7$value[0],
                    data = _step7$value[1];
                  this.eventBus.emit(name, data);
                }
              } catch (err) {
                _iterator7.e(err);
              } finally {
                _iterator7.f();
              }
              this.frameEventQueue = [];
            }
          }, {
            key: "calculateFps",
            value: function calculateFps() {
              // If there's an FPS update interval, emit the FPS update event
              // when the specified interval has elapsed.
              var fpsUpdateInterval = this.options.fpsUpdateInterval;
              if (fpsUpdateInterval) {
                this.fpsNumFrames++;
                this.fpsElapsedTime += this.deltaTime;
                if (this.fpsElapsedTime >= fpsUpdateInterval) {
                  var _this$contextSpy$getD, _this$contextSpy, _this$contextSpy2;
                  var fps = Math.round(this.fpsNumFrames * 1000 / this.fpsElapsedTime);
                  this.fpsNumFrames = 0;
                  this.fpsElapsedTime = 0;
                  this.queueFrameEvent('fpsUpdate', {
                    fps: fps,
                    contextSpyData: (_this$contextSpy$getD = (_this$contextSpy = this.contextSpy) === null || _this$contextSpy === void 0 ? void 0 : _this$contextSpy.getData()) !== null && _this$contextSpy$getD !== void 0 ? _this$contextSpy$getD : null
                  });
                  (_this$contextSpy2 = this.contextSpy) === null || _this$contextSpy2 === void 0 || _this$contextSpy2.reset();
                }
              }
            }
          }, {
            key: "addQuads",
            value: function addQuads(node) {
              assertTruthy(this.renderer && node.globalTransform);
              if (node.isRenderable) {
                node.renderQuads(this.renderer);
              }
              for (var i = 0; i < node.children.length; i++) {
                var child = node.children[i];
                if (!child) {
                  continue;
                }
                if ((child === null || child === void 0 ? void 0 : child.worldAlpha) === 0) {
                  continue;
                }
                this.addQuads(child);
              }
            }
            /**
             * Request a render pass without forcing an update
             */
          }, {
            key: "requestRender",
            value: function requestRender() {
              this.renderRequested = true;
            }
            /**
             * Given a font name, and possible renderer override, return the best compatible text renderer.
             *
             * @remarks
             * Will try to return a canvas renderer if no other suitable renderer can be resolved.
             *
             * @param fontFamily
             * @param textRendererOverride
             * @returns
             */
          }, {
            key: "resolveTextRenderer",
            value: function resolveTextRenderer(trProps) {
              var textRendererOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var fontCacheString = "".concat(trProps.fontFamily).concat(trProps.fontStyle).concat(trProps.fontWeight).concat(trProps.fontStretch).concat(textRendererOverride ? textRendererOverride : '');
              // check our resolve cache first
              if (this.fontResolveMap[fontCacheString] !== undefined) {
                return this.fontResolveMap[fontCacheString];
              }
              // Resolve the text renderer
              var rendererId = textRendererOverride;
              var overrideFallback = false;
              // Check if the override is valid (if one is provided)
              if (rendererId) {
                var possibleRenderer = this.textRenderers[rendererId];
                if (!possibleRenderer) {
                  console.warn("Text renderer override '".concat(rendererId, "' not found."));
                  rendererId = null;
                  overrideFallback = true;
                } else if (!possibleRenderer.canRenderFont(trProps)) {
                  console.warn("Cannot use override text renderer '".concat(rendererId, "' for font"), trProps);
                  rendererId = null;
                  overrideFallback = true;
                }
              }
              if (!rendererId) {
                // Iterate through the text renderers and find the first one that can render the font
                for (var _i = 0, _Object$entries = Object.entries(this.textRenderers); _i < _Object$entries.length; _i++) {
                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                    trId = _Object$entries$_i[0],
                    tr = _Object$entries$_i[1];
                  if (tr.canRenderFont(trProps)) {
                    rendererId = trId;
                    break;
                  }
                }
                if (!rendererId && this.textRenderers.canvas !== undefined) {
                  // If no renderer can be found, use the canvas renderer
                  rendererId = 'canvas';
                }
              }
              if (overrideFallback) {
                console.warn("Falling back to text renderer ".concat(String(rendererId)));
              }
              if (!rendererId) {
                // silently fail if no renderer can be found, the error is already created
                // at the constructor level
                return null;
              }
              // By now we are guaranteed to have a valid rendererId (at least Canvas);
              var resolvedTextRenderer = this.textRenderers[rendererId];
              assertTruthy(resolvedTextRenderer, 'resolvedTextRenderer undefined');
              // cache the resolved renderer for future use with these trProps
              this.fontResolveMap[fontCacheString] = resolvedTextRenderer;
              // Need to explicitly cast to TextRenderer because TS doesn't like
              // the covariant state argument in the setter method map
              return resolvedTextRenderer;
            }
            /**
             * Create a shader controller instance
             *
             * @param type
             * @param props
             * @returns
             */
          }, {
            key: "createShaderCtr",
            value: function createShaderCtr(type, props) {
              return this.shManager.loadShader(type, props);
            }
          }, {
            key: "createNode",
            value: function createNode(props) {
              var resolvedProps = this.resolveNodeDefaults(props);
              return new CoreNode(this, resolvedProps);
            }
          }, {
            key: "createTextNode",
            value: function createTextNode(props) {
              var _props$fontSize, _props$text, _props$textRendererOv, _props$fontFamily, _props$fontStyle, _props$fontWeight, _props$fontStretch, _props$textAlign, _props$contain, _props$scrollable, _props$scrollY2, _props$offsetY, _props$letterSpacing, _props$maxLines, _props$textBaseline, _props$verticalAlign, _props$overflowSuffix, _props$debug2;
              var fontSize = (_props$fontSize = props.fontSize) !== null && _props$fontSize !== void 0 ? _props$fontSize : 16;
              var resolvedProps = _objectSpread(_objectSpread({}, this.resolveNodeDefaults(props)), {}, {
                text: (_props$text = props.text) !== null && _props$text !== void 0 ? _props$text : '',
                textRendererOverride: (_props$textRendererOv = props.textRendererOverride) !== null && _props$textRendererOv !== void 0 ? _props$textRendererOv : null,
                fontSize: fontSize,
                fontFamily: (_props$fontFamily = props.fontFamily) !== null && _props$fontFamily !== void 0 ? _props$fontFamily : 'sans-serif',
                fontStyle: (_props$fontStyle = props.fontStyle) !== null && _props$fontStyle !== void 0 ? _props$fontStyle : 'normal',
                fontWeight: (_props$fontWeight = props.fontWeight) !== null && _props$fontWeight !== void 0 ? _props$fontWeight : 'normal',
                fontStretch: (_props$fontStretch = props.fontStretch) !== null && _props$fontStretch !== void 0 ? _props$fontStretch : 'normal',
                textAlign: (_props$textAlign = props.textAlign) !== null && _props$textAlign !== void 0 ? _props$textAlign : 'left',
                contain: (_props$contain = props.contain) !== null && _props$contain !== void 0 ? _props$contain : 'none',
                scrollable: (_props$scrollable = props.scrollable) !== null && _props$scrollable !== void 0 ? _props$scrollable : false,
                scrollY: (_props$scrollY2 = props.scrollY) !== null && _props$scrollY2 !== void 0 ? _props$scrollY2 : 0,
                offsetY: (_props$offsetY = props.offsetY) !== null && _props$offsetY !== void 0 ? _props$offsetY : 0,
                letterSpacing: (_props$letterSpacing = props.letterSpacing) !== null && _props$letterSpacing !== void 0 ? _props$letterSpacing : 0,
                lineHeight: props.lineHeight,
                maxLines: (_props$maxLines = props.maxLines) !== null && _props$maxLines !== void 0 ? _props$maxLines : 0,
                textBaseline: (_props$textBaseline = props.textBaseline) !== null && _props$textBaseline !== void 0 ? _props$textBaseline : 'alphabetic',
                verticalAlign: (_props$verticalAlign = props.verticalAlign) !== null && _props$verticalAlign !== void 0 ? _props$verticalAlign : 'middle',
                overflowSuffix: (_props$overflowSuffix = props.overflowSuffix) !== null && _props$overflowSuffix !== void 0 ? _props$overflowSuffix : '...',
                debug: (_props$debug2 = props.debug) !== null && _props$debug2 !== void 0 ? _props$debug2 : {},
                shaderProps: null
              });
              var resolvedTextRenderer = this.resolveTextRenderer(resolvedProps, props.textRendererOverride);
              if (!resolvedTextRenderer) {
                throw new Error("No compatible text renderer found for ".concat(resolvedProps.fontFamily));
              }
              return new CoreTextNode(this, resolvedProps, resolvedTextRenderer);
            }
            /**
             * Resolves the default property values for a Node
             *
             * @remarks
             * This method is used internally by the RendererMain to resolve the default
             * property values for a Node. It is exposed publicly so that it can be used
             * by Core Driver implementations.
             *
             * @param props
             * @returns
             */
          }, {
            key: "resolveNodeDefaults",
            value: function resolveNodeDefaults(props) {
              var _props$color8, _ref8, _ref9, _props$colorTl, _ref10, _ref11, _props$colorTr, _ref12, _ref13, _props$colorBl, _ref14, _ref15, _props$colorBr, _props$data, _props$x, _props$y, _props$width10, _props$height4, _props$alpha, _props$autosize, _props$clipping, _props$colorTop, _props$colorBottom, _props$colorLeft, _props$colorRight, _props$zIndex, _props$zIndexLocked, _props$parent3, _props$texture, _props$textureOptions, _props$shader, _props$src2, _props$scale, _ref16, _props$scaleX, _ref17, _props$scaleY, _props$mount, _ref18, _props$mountX, _ref19, _props$mountY, _props$pivot2, _ref20, _props$pivotX, _ref21, _props$pivotY, _props$rotation, _props$rtt, _props$preventCleanup;
              var color = (_props$color8 = props.color) !== null && _props$color8 !== void 0 ? _props$color8 : 0xffffffff;
              var colorTl = (_ref8 = (_ref9 = (_props$colorTl = props.colorTl) !== null && _props$colorTl !== void 0 ? _props$colorTl : props.colorTop) !== null && _ref9 !== void 0 ? _ref9 : props.colorLeft) !== null && _ref8 !== void 0 ? _ref8 : color;
              var colorTr = (_ref10 = (_ref11 = (_props$colorTr = props.colorTr) !== null && _props$colorTr !== void 0 ? _props$colorTr : props.colorTop) !== null && _ref11 !== void 0 ? _ref11 : props.colorRight) !== null && _ref10 !== void 0 ? _ref10 : color;
              var colorBl = (_ref12 = (_ref13 = (_props$colorBl = props.colorBl) !== null && _props$colorBl !== void 0 ? _props$colorBl : props.colorBottom) !== null && _ref13 !== void 0 ? _ref13 : props.colorLeft) !== null && _ref12 !== void 0 ? _ref12 : color;
              var colorBr = (_ref14 = (_ref15 = (_props$colorBr = props.colorBr) !== null && _props$colorBr !== void 0 ? _props$colorBr : props.colorBottom) !== null && _ref15 !== void 0 ? _ref15 : props.colorRight) !== null && _ref14 !== void 0 ? _ref14 : color;
              var data = santizeCustomDataMap((_props$data = props.data) !== null && _props$data !== void 0 ? _props$data : {});
              return {
                x: (_props$x = props.x) !== null && _props$x !== void 0 ? _props$x : 0,
                y: (_props$y = props.y) !== null && _props$y !== void 0 ? _props$y : 0,
                width: (_props$width10 = props.width) !== null && _props$width10 !== void 0 ? _props$width10 : 0,
                height: (_props$height4 = props.height) !== null && _props$height4 !== void 0 ? _props$height4 : 0,
                alpha: (_props$alpha = props.alpha) !== null && _props$alpha !== void 0 ? _props$alpha : 1,
                autosize: (_props$autosize = props.autosize) !== null && _props$autosize !== void 0 ? _props$autosize : false,
                clipping: (_props$clipping = props.clipping) !== null && _props$clipping !== void 0 ? _props$clipping : false,
                color: color,
                colorTop: (_props$colorTop = props.colorTop) !== null && _props$colorTop !== void 0 ? _props$colorTop : color,
                colorBottom: (_props$colorBottom = props.colorBottom) !== null && _props$colorBottom !== void 0 ? _props$colorBottom : color,
                colorLeft: (_props$colorLeft = props.colorLeft) !== null && _props$colorLeft !== void 0 ? _props$colorLeft : color,
                colorRight: (_props$colorRight = props.colorRight) !== null && _props$colorRight !== void 0 ? _props$colorRight : color,
                colorBl: colorBl,
                colorBr: colorBr,
                colorTl: colorTl,
                colorTr: colorTr,
                zIndex: (_props$zIndex = props.zIndex) !== null && _props$zIndex !== void 0 ? _props$zIndex : 0,
                zIndexLocked: (_props$zIndexLocked = props.zIndexLocked) !== null && _props$zIndexLocked !== void 0 ? _props$zIndexLocked : 0,
                parent: (_props$parent3 = props.parent) !== null && _props$parent3 !== void 0 ? _props$parent3 : null,
                texture: (_props$texture = props.texture) !== null && _props$texture !== void 0 ? _props$texture : null,
                textureOptions: (_props$textureOptions = props.textureOptions) !== null && _props$textureOptions !== void 0 ? _props$textureOptions : {},
                shader: (_props$shader = props.shader) !== null && _props$shader !== void 0 ? _props$shader : this.defShaderCtr,
                // Since setting the `src` will trigger a texture load, we need to set it after
                // we set the texture. Otherwise, problems happen.
                src: (_props$src2 = props.src) !== null && _props$src2 !== void 0 ? _props$src2 : null,
                srcHeight: props.srcHeight,
                srcWidth: props.srcWidth,
                srcX: props.srcX,
                srcY: props.srcY,
                scale: (_props$scale = props.scale) !== null && _props$scale !== void 0 ? _props$scale : null,
                scaleX: (_ref16 = (_props$scaleX = props.scaleX) !== null && _props$scaleX !== void 0 ? _props$scaleX : props.scale) !== null && _ref16 !== void 0 ? _ref16 : 1,
                scaleY: (_ref17 = (_props$scaleY = props.scaleY) !== null && _props$scaleY !== void 0 ? _props$scaleY : props.scale) !== null && _ref17 !== void 0 ? _ref17 : 1,
                mount: (_props$mount = props.mount) !== null && _props$mount !== void 0 ? _props$mount : 0,
                mountX: (_ref18 = (_props$mountX = props.mountX) !== null && _props$mountX !== void 0 ? _props$mountX : props.mount) !== null && _ref18 !== void 0 ? _ref18 : 0,
                mountY: (_ref19 = (_props$mountY = props.mountY) !== null && _props$mountY !== void 0 ? _props$mountY : props.mount) !== null && _ref19 !== void 0 ? _ref19 : 0,
                pivot: (_props$pivot2 = props.pivot) !== null && _props$pivot2 !== void 0 ? _props$pivot2 : 0.5,
                pivotX: (_ref20 = (_props$pivotX = props.pivotX) !== null && _props$pivotX !== void 0 ? _props$pivotX : props.pivot) !== null && _ref20 !== void 0 ? _ref20 : 0.5,
                pivotY: (_ref21 = (_props$pivotY = props.pivotY) !== null && _props$pivotY !== void 0 ? _props$pivotY : props.pivot) !== null && _ref21 !== void 0 ? _ref21 : 0.5,
                rotation: (_props$rotation = props.rotation) !== null && _props$rotation !== void 0 ? _props$rotation : 0,
                rtt: (_props$rtt = props.rtt) !== null && _props$rtt !== void 0 ? _props$rtt : false,
                data: data,
                preventCleanup: (_props$preventCleanup = props.preventCleanup) !== null && _props$preventCleanup !== void 0 ? _props$preventCleanup : false,
                imageType: props.imageType
              };
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The Renderer Main API
         *
         * @remarks
         * This is the primary class used to configure and operate the Renderer.
         *
         * It is used to create and destroy Nodes, as well as Texture and Shader
         * references.
         *
         * Example:
         * ```ts
         * import { RendererMain, MainCoreDriver } from '@lightningjs/renderer';
         *
         * // Initialize the Renderer
         * const renderer = new RendererMain(
         *   {
         *     appWidth: 1920,
         *     appHeight: 1080
         *   },
         *   'app',
         *   new MainCoreDriver(),
         * );
         * ```
         *
         * ## Events
         * - `fpsUpdate`
         *   - Emitted every `fpsUpdateInterval` milliseconds with the current FPS
         * - `frameTick`
         *   - Emitted every frame tick
         * - `idle`
         *   - Emitted when the renderer is idle (no changes to the scene
         *     graph/animations running)
         * - `criticalCleanup`
         *  - Emitted when the Texture Memory Manager Cleanup process is triggered
         *  - Payload: { memUsed: number, criticalThreshold: number }
         *    - `memUsed` - The amount of memory (in bytes) used by textures before the
         *       cleanup process
         *    - `criticalThreshold` - The critical threshold (in bytes)
         * - `criticalCleanupFailed`
         *   - Emitted when the Texture Memory Manager Cleanup process is unable to free
         *     up enough texture memory to reach below the critical threshold.
         *     This can happen when there is not enough non-renderable textures to
         *     free up.
         *   - Payload (object with keys):
         *     - `memUsed` - The amount of memory (in bytes) used by textures after
         *       the cleanup process
         *     - `criticalThreshold` - The critical threshold (in bytes)
         */
        var RendererMain = /*#__PURE__*/function (_EventEmitter6) {
          /**
           * Constructs a new Renderer instance
           *
           * @param settings Renderer settings
           * @param target Element ID or HTMLElement to insert the canvas into
           * @param driver Core Driver to use
           */
          function RendererMain(settings, target) {
            var _settings$textureMemo, _settings$textureMemo2, _settings$textureMemo3, _settings$textureMemo4, _settings$clearColor, _settings$enableConte, _settings$inspector, _settings$quadBufferS;
            var _this43;
            _classCallCheck(this, RendererMain);
            _this43 = _callSuper(this, RendererMain);
            _defineProperty(_this43, "root", void 0);
            _defineProperty(_this43, "canvas", void 0);
            _defineProperty(_this43, "settings", void 0);
            _defineProperty(_this43, "stage", void 0);
            _defineProperty(_this43, "inspector", null);
            var resolvedTxSettings = {
              criticalThreshold: ((_settings$textureMemo = settings.textureMemory) === null || _settings$textureMemo === void 0 ? void 0 : _settings$textureMemo.criticalThreshold) || 124e6,
              targetThresholdLevel: ((_settings$textureMemo2 = settings.textureMemory) === null || _settings$textureMemo2 === void 0 ? void 0 : _settings$textureMemo2.targetThresholdLevel) || 0.5,
              cleanupInterval: ((_settings$textureMemo3 = settings.textureMemory) === null || _settings$textureMemo3 === void 0 ? void 0 : _settings$textureMemo3.cleanupInterval) || 30000,
              debugLogging: ((_settings$textureMemo4 = settings.textureMemory) === null || _settings$textureMemo4 === void 0 ? void 0 : _settings$textureMemo4.debugLogging) || false
            };
            var resolvedSettings = {
              appWidth: settings.appWidth || 1920,
              appHeight: settings.appHeight || 1080,
              textureMemory: resolvedTxSettings,
              boundsMargin: settings.boundsMargin || 0,
              deviceLogicalPixelRatio: settings.deviceLogicalPixelRatio || 1,
              devicePhysicalPixelRatio: settings.devicePhysicalPixelRatio || window.devicePixelRatio,
              clearColor: (_settings$clearColor = settings.clearColor) !== null && _settings$clearColor !== void 0 ? _settings$clearColor : 0x00000000,
              fpsUpdateInterval: settings.fpsUpdateInterval || 0,
              numImageWorkers: settings.numImageWorkers !== undefined ? settings.numImageWorkers : 2,
              enableContextSpy: (_settings$enableConte = settings.enableContextSpy) !== null && _settings$enableConte !== void 0 ? _settings$enableConte : false,
              inspector: (_settings$inspector = settings.inspector) !== null && _settings$inspector !== void 0 ? _settings$inspector : false,
              renderEngine: settings.renderEngine,
              quadBufferSize: (_settings$quadBufferS = settings.quadBufferSize) !== null && _settings$quadBufferS !== void 0 ? _settings$quadBufferS : 4 * 1024 * 1024,
              fontEngines: settings.fontEngines
            };
            _this43.settings = resolvedSettings;
            var appWidth = resolvedSettings.appWidth,
              appHeight = resolvedSettings.appHeight,
              deviceLogicalPixelRatio = resolvedSettings.deviceLogicalPixelRatio,
              devicePhysicalPixelRatio = resolvedSettings.devicePhysicalPixelRatio,
              inspector = resolvedSettings.inspector;
            var deviceLogicalWidth = appWidth * deviceLogicalPixelRatio;
            var deviceLogicalHeight = appHeight * deviceLogicalPixelRatio;
            var canvas = document.createElement('canvas');
            _this43.canvas = canvas;
            canvas.width = deviceLogicalWidth * devicePhysicalPixelRatio;
            canvas.height = deviceLogicalHeight * devicePhysicalPixelRatio;
            canvas.style.width = "".concat(deviceLogicalWidth, "px");
            canvas.style.height = "".concat(deviceLogicalHeight, "px");
            // Initialize the stage
            _this43.stage = new Stage({
              appWidth: _this43.settings.appWidth,
              appHeight: _this43.settings.appHeight,
              boundsMargin: _this43.settings.boundsMargin,
              clearColor: _this43.settings.clearColor,
              canvas: _this43.canvas,
              deviceLogicalPixelRatio: _this43.settings.deviceLogicalPixelRatio,
              devicePhysicalPixelRatio: _this43.settings.devicePhysicalPixelRatio,
              enableContextSpy: _this43.settings.enableContextSpy,
              fpsUpdateInterval: _this43.settings.fpsUpdateInterval,
              numImageWorkers: _this43.settings.numImageWorkers,
              renderEngine: _this43.settings.renderEngine,
              textureMemory: resolvedTxSettings,
              eventBus: _this43,
              quadBufferSize: _this43.settings.quadBufferSize,
              fontEngines: _this43.settings.fontEngines
            });
            // Extract the root node
            _this43.root = _this43.stage.root;
            // Get the target element and attach the canvas to it
            var targetEl;
            if (typeof target === 'string') {
              targetEl = document.getElementById(target);
            } else {
              targetEl = target;
            }
            if (!targetEl) {
              throw new Error('Could not find target element');
            }
            targetEl.appendChild(canvas);
            // Initialize inspector (if enabled)
            if (inspector && !isProductionEnvironment()) {
              _this43.inspector = new inspector(canvas, resolvedSettings);
            }
            return _this43;
          }
          /**
           * Create a new scene graph node
           *
           * @remarks
           * A node is the main graphical building block of the Renderer scene graph. It
           * can be a container for other nodes, or it can be a leaf node that renders a
           * solid color, gradient, image, or specific texture, using a specific shader.
           *
           * To create a text node, see {@link createTextNode}.
           *
           * See {@link CoreNode} for more details.
           *
           * @param props
           * @returns
           */
          _inherits(RendererMain, _EventEmitter6);
          return _createClass(RendererMain, [{
            key: "createNode",
            value: function createNode(props) {
              assertTruthy(this.stage, 'Stage is not initialized');
              var node = this.stage.createNode(props);
              if (this.inspector) {
                return this.inspector.createNode(node);
              }
              // FIXME onDestroy event? node.once('beforeDestroy'
              // FIXME onCreate event?
              return node;
            }
            /**
             * Create a new scene graph text node
             *
             * @remarks
             * A text node is the second graphical building block of the Renderer scene
             * graph. It renders text using a specific text renderer that is automatically
             * chosen based on the font requested and what type of fonts are installed
             * into an app.
             *
             * See {@link ITextNode} for more details.
             *
             * @param props
             * @returns
             */
          }, {
            key: "createTextNode",
            value: function createTextNode(props) {
              var textNode = this.stage.createTextNode(props);
              if (this.inspector) {
                return this.inspector.createTextNode(textNode);
              }
              return textNode;
            }
            /**
             * Destroy a node
             *
             * @remarks
             * This method destroys a node
             *
             * @param node
             * @returns
             */
          }, {
            key: "destroyNode",
            value: function destroyNode(node) {
              if (this.inspector) {
                this.inspector.destroyNode(node.id);
              }
              return node.destroy();
            }
            /**
             * Create a new texture reference
             *
             * @remarks
             * This method creates a new reference to a texture. The texture is not
             * loaded until it is used on a node.
             *
             * It can be assigned to a node's `texture` property, or it can be used
             * when creating a SubTexture.
             *
             * @param textureType
             * @param props
             * @param options
             * @returns
             */
          }, {
            key: "createTexture",
            value: function createTexture(textureType, props) {
              return this.stage.txManager.loadTexture(textureType, props);
            }
            /**
             * Create a new shader controller for a shader type
             *
             * @remarks
             * This method creates a new Shader Controller for a specific shader type.
             *
             * If the shader has not been loaded yet, it will be loaded. Otherwise, the
             * existing shader will be reused.
             *
             * It can be assigned to a Node's `shader` property.
             *
             * @param shaderType
             * @param props
             * @returns
             */
          }, {
            key: "createShader",
            value: function createShader(shaderType, props) {
              return this.stage.shManager.loadShader(shaderType, props);
            }
            /**
             * Create a new Dynamic Shader controller
             *
             * @remarks
             * A Dynamic Shader is a shader that can be composed of an array of mulitple
             * effects. Each effect can be animated or changed after creation (provided
             * the effect is given a name).
             *
             * Example:
             * ```ts
             * renderer.createNode({
             *   shader: renderer.createDynamicShader([
             *     renderer.createEffect('radius', {
             *       radius: 0
             *     }, 'effect1'),
             *     renderer.createEffect('border', {
             *       color: 0xff00ffff,
             *       width: 10,
             *     }, 'effect2'),
             *   ]),
             * });
             * ```
             *
             * @param effects
             * @returns
             */
          }, {
            key: "createDynamicShader",
            value: function createDynamicShader(effects) {
              return this.stage.shManager.loadDynamicShader({
                effects: effects
              });
            }
            /**
             * Create an effect to be used in a Dynamic Shader
             *
             * @remark
             * The {name} parameter is optional but required if you want to animate the effect
             * or change the effect's properties after creation.
             *
             * See {@link createDynamicShader} for an example.
             *
             * @param type
             * @param props
             * @param name
             * @returns
             */
          }, {
            key: "createEffect",
            value: function createEffect(type, props, name) {
              return {
                name: name,
                type: type,
                props: props
              };
            }
            /**
             * Get a Node by its ID
             *
             * @param id
             * @returns
             */
          }, {
            key: "getNodeById",
            value: function getNodeById(id) {
              var _this$stage;
              var root = (_this$stage = this.stage) === null || _this$stage === void 0 ? void 0 : _this$stage.root;
              if (!root) {
                return null;
              }
              var _findNode = function findNode(node) {
                if (node.id === id) {
                  return node;
                }
                var _iterator8 = _createForOfIteratorHelper(node.children),
                  _step8;
                try {
                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var child = _step8.value;
                    var found = _findNode(child);
                    if (found) {
                      return found;
                    }
                  }
                } catch (err) {
                  _iterator8.e(err);
                } finally {
                  _iterator8.f();
                }
                return null;
              };
              return _findNode(root);
            }
          }, {
            key: "toggleFreeze",
            value: function toggleFreeze() {
              throw new Error('Not implemented');
            }
          }, {
            key: "advanceFrame",
            value: function advanceFrame() {
              throw new Error('Not implemented');
            }
          }, {
            key: "getBufferInfo",
            value: function getBufferInfo() {
              return this.stage.renderer.getBufferInfo();
            }
            /**
             * Re-render the current frame without advancing any running animations.
             *
             * @remarks
             * Any state changes will be reflected in the re-rendered frame. Useful for
             * debugging.
             *
             * May not do anything if the render loop is running on a separate worker.
             */
          }, {
            key: "rerender",
            value: function rerender() {
              throw new Error('Not implemented');
            }
          }]);
        }(EventEmitter);
        var stylePropertyMap = {
          alpha: function alpha(v) {
            if (v === 1) {
              return null;
            }
            return {
              prop: 'opacity',
              value: "".concat(v)
            };
          },
          x: function x(_x5) {
            return {
              prop: 'left',
              value: "".concat(_x5, "px")
            };
          },
          y: function y(_y) {
            return {
              prop: 'top',
              value: "".concat(_y, "px")
            };
          },
          width: function width(w) {
            if (w === 0) {
              return null;
            }
            return {
              prop: 'width',
              value: "".concat(w, "px")
            };
          },
          height: function height(h) {
            if (h === 0) {
              return null;
            }
            return {
              prop: 'height',
              value: "".concat(h, "px")
            };
          },
          zIndex: function zIndex() {
            return 'zIndex';
          },
          fontFamily: function fontFamily() {
            return 'font-family';
          },
          fontSize: function fontSize() {
            return 'font-size';
          },
          fontStyle: function fontStyle() {
            return 'font-style';
          },
          fontWeight: function fontWeight() {
            return 'font-weight';
          },
          fontStretch: function fontStretch() {
            return 'font-stretch';
          },
          lineHeight: function lineHeight() {
            return 'line-height';
          },
          letterSpacing: function letterSpacing() {
            return 'letter-spacing';
          },
          textAlign: function textAlign() {
            return 'text-align';
          },
          overflowSuffix: function overflowSuffix() {
            return 'overflow-suffix';
          },
          maxLines: function maxLines() {
            return 'max-lines';
          },
          contain: function contain() {
            return 'contain';
          },
          verticalAlign: function verticalAlign() {
            return 'vertical-align';
          },
          clipping: function clipping(v) {
            if (v === false) {
              return null;
            }
            return {
              prop: 'overflow',
              value: v ? 'hidden' : 'visible'
            };
          },
          rotation: function rotation(v) {
            if (v === 0) {
              return null;
            }
            return {
              prop: 'transform',
              value: "rotate(".concat(v, "rad)")
            };
          },
          scale: function scale(v) {
            if (v === 1) {
              return null;
            }
            return {
              prop: 'transform',
              value: "scale(".concat(v, ")")
            };
          },
          scaleX: function scaleX(v) {
            if (v === 1) {
              return null;
            }
            return {
              prop: 'transform',
              value: "scaleX(".concat(v, ")")
            };
          },
          scaleY: function scaleY(v) {
            if (v === 1) {
              return null;
            }
            return {
              prop: 'transform',
              value: "scaleY(".concat(v, ")")
            };
          },
          color: function color(v) {
            if (v === 0) {
              return null;
            }
            return {
              prop: 'color',
              value: convertColorToRgba(v)
            };
          }
        };
        var convertColorToRgba = function convertColorToRgba(color) {
          var a = (color & 0xff) / 255;
          var b = color >> 8 & 0xff;
          var g = color >> 16 & 0xff;
          var r = color >> 24 & 0xff;
          return "rgba(".concat(r, ",").concat(g, ",").concat(b, ",").concat(a, ")");
        };
        var domPropertyMap = {
          id: 'test-id'
        };
        var Inspector = /*#__PURE__*/function () {
          function Inspector(canvas, settings) {
            var _settings$appHeight, _settings$deviceLogic, _settings$appWidth, _settings$deviceLogic2, _settings$deviceLogic3, _settings$deviceLogic4;
            _classCallCheck(this, Inspector);
            _defineProperty(this, "root", null);
            _defineProperty(this, "canvas", null);
            _defineProperty(this, "height", 1080);
            _defineProperty(this, "width", 1920);
            _defineProperty(this, "scaleX", 1);
            _defineProperty(this, "scaleY", 1);
            if (isProductionEnvironment()) return;
            if (!settings) {
              throw new Error('settings is required');
            }
            // calc dimensions based on the devicePixelRatio
            this.height = Math.ceil((_settings$appHeight = settings.appHeight) !== null && _settings$appHeight !== void 0 ? _settings$appHeight : 1080 / ((_settings$deviceLogic = settings.deviceLogicalPixelRatio) !== null && _settings$deviceLogic !== void 0 ? _settings$deviceLogic : 1));
            this.width = Math.ceil((_settings$appWidth = settings.appWidth) !== null && _settings$appWidth !== void 0 ? _settings$appWidth : 1920 / ((_settings$deviceLogic2 = settings.deviceLogicalPixelRatio) !== null && _settings$deviceLogic2 !== void 0 ? _settings$deviceLogic2 : 1));
            this.scaleX = (_settings$deviceLogic3 = settings.deviceLogicalPixelRatio) !== null && _settings$deviceLogic3 !== void 0 ? _settings$deviceLogic3 : 1;
            this.scaleY = (_settings$deviceLogic4 = settings.deviceLogicalPixelRatio) !== null && _settings$deviceLogic4 !== void 0 ? _settings$deviceLogic4 : 1;
            this.canvas = canvas;
            this.root = document.createElement('div');
            this.setRootPosition();
            document.body.appendChild(this.root);
            //listen for changes on canvas
            var mutationObserver = new MutationObserver(this.setRootPosition.bind(this));
            mutationObserver.observe(canvas, {
              attributes: true,
              childList: false,
              subtree: false
            });
            // Create a ResizeObserver to watch for changes in the element's size
            var resizeObserver = new ResizeObserver(this.setRootPosition.bind(this));
            resizeObserver.observe(canvas);
            //listen for changes on window
            window.addEventListener('resize', this.setRootPosition.bind(this));
            console.warn('Inspector is enabled, this will impact performance');
          }
          return _createClass(Inspector, [{
            key: "setRootPosition",
            value: function setRootPosition() {
              if (this.root === null || this.canvas === null) {
                return;
              }
              // get the world position of the canvas object, so we can match the inspector to it
              var rect = this.canvas.getBoundingClientRect();
              var top = document.documentElement.scrollTop + rect.top;
              var left = document.documentElement.scrollLeft + rect.left;
              this.root.id = 'root';
              this.root.style.left = "".concat(left, "px");
              this.root.style.top = "".concat(top, "px");
              this.root.style.width = "".concat(this.width, "px");
              this.root.style.height = "".concat(this.height, "px");
              this.root.style.position = 'absolute';
              this.root.style.transformOrigin = '0 0 0';
              this.root.style.transform = "scale(".concat(this.scaleX, ", ").concat(this.scaleY, ")");
              this.root.style.overflow = 'hidden';
              this.root.style.zIndex = '65534';
            }
          }, {
            key: "createDiv",
            value: function createDiv(id, properties) {
              var div = document.createElement('div');
              div.style.position = 'absolute';
              div.id = id.toString();
              // set initial properties
              for (var key in properties) {
                this.updateNodeProperty(div,
                // really typescript? really?
                key, properties[key]);
              }
              return div;
            }
          }, {
            key: "createNode",
            value: function createNode(node) {
              var div = this.createDiv(node.id, node.props);
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
              div.node = node;
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
              node.div = div;
              return this.createProxy(node, div);
            }
          }, {
            key: "createTextNode",
            value: function createTextNode(node) {
              var div = this.createDiv(node.id, node.props);
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
              div.node = node;
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
              node.div = div;
              return this.createProxy(node, div);
            }
          }, {
            key: "createProxy",
            value: function createProxy(node, div) {
              var _this44 = this;
              return new Proxy(node, {
                set: function set(target, property, value) {
                  _this44.updateNodeProperty(div, property, value);
                  return Reflect.set(target, property, value);
                },
                get: function get(target, property, receiver) {
                  if (property === 'destroy') {
                    _this44.destroyNode(target.id);
                  }
                  if (property === 'animate') {
                    return function (props, settings) {
                      var anim = target.animate(props, settings);
                      // Trap the animate start function so we can update the inspector accordingly
                      return new Proxy(anim, {
                        get: function get(target, property, receiver) {
                          if (property === 'start') {
                            _this44.animateNode(div, props, settings);
                          }
                          return Reflect.get(target, property, receiver);
                        }
                      });
                    };
                  }
                  return Reflect.get(target, property, receiver);
                }
              });
            }
          }, {
            key: "destroyNode",
            value: function destroyNode(id) {
              var div = document.getElementById(id.toString());
              div === null || div === void 0 || div.remove();
            }
          }, {
            key: "updateNodeProperty",
            value: function updateNodeProperty(div, property,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value) {
              if (this.root === null || value === undefined || value === null) {
                return;
              }
              /**
               * Special case for parent property
               */
              if (property === 'parent') {
                var parentId = value.id;
                // only way to detect if the parent is the root node
                // if you are reading this and have a better way, please let me know
                if (parentId === 1) {
                  this.root.appendChild(div);
                  return;
                }
                var parent = document.getElementById(parentId.toString());
                parent === null || parent === void 0 || parent.appendChild(div);
                return;
              }
              // special case for text
              if (property === 'text') {
                div.innerHTML = String(value);
                // hide text because we can't render SDF fonts
                // it would look weird and obstruct the WebGL rendering
                div.style.visibility = 'hidden';
                return;
              }
              // special case for images
              // we're not setting any CSS properties to avoid images getting loaded twice
              // as the renderer will handle the loading of the image. Setting it to `data-src`
              if (property === 'src' && value) {
                div.setAttribute("data-src", String(value));
                return;
              }
              // special case for color gradients (normal colors are handled by the stylePropertyMap)
              // FIXME the renderer seems to return the same number for all colors
              // if (gradientColorPropertyMap.includes(property as string)) {
              //   const color = convertColorToRgba(value as number);
              //   div.setAttribute(`data-${property}`, color);
              //   return;
              // }
              // CSS mappable attribute
              if (stylePropertyMap[property]) {
                var _stylePropertyMap$pro;
                var mappedStyleResponse = (_stylePropertyMap$pro = stylePropertyMap[property]) === null || _stylePropertyMap$pro === void 0 ? void 0 : _stylePropertyMap$pro.call(stylePropertyMap, value);
                if (mappedStyleResponse === null) {
                  return;
                }
                if (typeof mappedStyleResponse === 'string') {
                  div.style.setProperty(mappedStyleResponse, String(value));
                  return;
                }
                if (typeof mappedStyleResponse === 'object') {
                  div.style.setProperty(mappedStyleResponse.prop, mappedStyleResponse.value);
                }
                return;
              }
              // DOM properties
              if (domPropertyMap[property]) {
                var domProperty = domPropertyMap[property];
                if (!domProperty) {
                  return;
                }
                div.setAttribute(String(domProperty), String(value));
                return;
              }
              // custom data properties
              if (property === 'data') {
                for (var key in value) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  var keyValue = value[key];
                  if (keyValue === undefined) {
                    div.removeAttribute("data-".concat(key));
                  } else {
                    div.setAttribute("data-".concat(key), String(keyValue));
                  }
                }
                return;
              }
            }
            // simple animation handler
          }, {
            key: "animateNode",
            value: function animateNode(div, props, settings) {
              var _settings$duration2 = settings.duration,
                duration = _settings$duration2 === void 0 ? 1000 : _settings$duration2,
                _settings$delay2 = settings.delay,
                delay = _settings$delay2 === void 0 ? 0 : _settings$delay2;
              var x = props.x,
                y = props.y,
                width = props.width,
                height = props.height,
                _props$alpha2 = props.alpha,
                alpha = _props$alpha2 === void 0 ? 1 : _props$alpha2,
                _props$rotation2 = props.rotation,
                rotation = _props$rotation2 === void 0 ? 0 : _props$rotation2,
                _props$scale2 = props.scale,
                scale = _props$scale2 === void 0 ? 1 : _props$scale2,
                color = props.color;
              // ignoring loops and repeats for now, as that might be a bit too much for the inspector
              function animate() {
                setTimeout(function () {
                  div.style.top = "".concat(y, "px");
                  div.style.left = "".concat(x, "px");
                  div.style.width = "".concat(width, "px");
                  div.style.height = "".concat(height, "px");
                  div.style.opacity = "".concat(alpha);
                  div.style.rotate = "".concat(rotation, "rad");
                  div.style.scale = "".concat(scale);
                  div.style.color = convertColorToRgba(color);
                }, duration);
              }
              setTimeout(animate, delay);
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var TrFontFace = /*#__PURE__*/function (_EventEmitter7) {
          function TrFontFace(options) {
            var _this45;
            _classCallCheck(this, TrFontFace);
            _this45 = _callSuper(this, TrFontFace);
            _defineProperty(_this45, "fontFamily", void 0);
            _defineProperty(_this45, "descriptors", void 0);
            _defineProperty(_this45, "loaded", false);
            _defineProperty(_this45, "metrics", null);
            var fontFamily = options.fontFamily,
              descriptors = options.descriptors,
              metrics = options.metrics;
            if (metrics) {
              // Normalize metrics to be in the range of 0 to 1
              _this45.metrics = {
                ascender: metrics.ascender / metrics.unitsPerEm,
                descender: metrics.descender / metrics.unitsPerEm,
                lineGap: metrics.lineGap / metrics.unitsPerEm
              };
            }
            _this45.fontFamily = fontFamily;
            _this45.descriptors = _objectSpread({
              style: 'normal',
              weight: 'normal',
              stretch: 'normal'
            }, descriptors);
            return _this45;
          }
          /**
           * Convert a TrFontFaceDescriptors to a FontFaceDescriptors which differ slightly
           *
           * @param descriptors
           * @returns
           */
          _inherits(TrFontFace, _EventEmitter7);
          return _createClass(TrFontFace, null, [{
            key: "convertToCssFontFaceDescriptors",
            value: function convertToCssFontFaceDescriptors(descriptors) {
              return {
                style: descriptors.style,
                weight: typeof descriptors.weight === 'number' ? "".concat(descriptors.weight) : descriptors.weight,
                stretch: descriptors.stretch,
                unicodeRange: descriptors.unicodeRange,
                featureSettings: descriptors.featureSettings,
                display: descriptors.display
              };
            }
          }]);
        }(EventEmitter);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var WebTrFontFace = /*#__PURE__*/function (_TrFontFace2) {
          function WebTrFontFace(options) {
            var _this46;
            _classCallCheck(this, WebTrFontFace);
            _this46 = _callSuper(this, WebTrFontFace, [options]);
            _defineProperty(_this46, "fontFace", void 0);
            _defineProperty(_this46, "fontUrl", void 0);
            var fontFamily = options.fontFamily,
              fontUrl = options.fontUrl;
            // Filter out parentheses from fontUrl
            var fontUrlWithoutParentheses = fontUrl.replace(/\(|\)/g, '');
            // Defaults for descriptors resolved in the super constructor
            var determinedDescriptors = _this46.descriptors;
            // Convert TrFontFaceDescriptors to CSS FontFaceDescriptors
            var cssDescriptors = {
              style: determinedDescriptors.style,
              weight: typeof determinedDescriptors.weight === 'number' ? "".concat(determinedDescriptors.weight) : determinedDescriptors.weight,
              stretch: determinedDescriptors.stretch,
              unicodeRange: determinedDescriptors.unicodeRange,
              featureSettings: determinedDescriptors.featureSettings,
              display: determinedDescriptors.display
            };
            var fontFace = new FontFace(fontFamily, "url(".concat(fontUrlWithoutParentheses, ")"), cssDescriptors);
            if (fontUrlWithoutParentheses.length > 0) {
              fontFace.load().then(function () {
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                _this46.loaded = true;
                _this46.emit('loaded');
              }).catch(console.error);
            } else {
              // Default font
              // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
              _this46.loaded = true;
              _this46.emit('loaded');
            }
            _this46.fontFace = fontFace;
            _this46.fontUrl = fontUrl;
            return _this46;
          }
          _inherits(WebTrFontFace, _TrFontFace2);
          return _createClass(WebTrFontFace);
        }(TrFontFace);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CoreRenderOp = /*#__PURE__*/_createClass(function CoreRenderOp() {
          _classCallCheck(this, CoreRenderOp);
        });
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Can render multiple quads with multiple textures (up to vertex shader texture limit)
         *
         */
        var WebGlCoreRenderOp = /*#__PURE__*/function (_CoreRenderOp) {
          function WebGlCoreRenderOp(glw, options, buffers, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, zIndex, renderToTexture, parentHasRenderTexture, framebufferDimensions) {
            var _this47;
            _classCallCheck(this, WebGlCoreRenderOp);
            _this47 = _callSuper(this, WebGlCoreRenderOp);
            _defineProperty(_this47, "glw", void 0);
            _defineProperty(_this47, "options", void 0);
            _defineProperty(_this47, "buffers", void 0);
            _defineProperty(_this47, "shader", void 0);
            _defineProperty(_this47, "shaderProps", void 0);
            _defineProperty(_this47, "alpha", void 0);
            _defineProperty(_this47, "clippingRect", void 0);
            _defineProperty(_this47, "dimensions", void 0);
            _defineProperty(_this47, "bufferIdx", void 0);
            _defineProperty(_this47, "zIndex", void 0);
            _defineProperty(_this47, "renderToTexture", void 0);
            _defineProperty(_this47, "parentHasRenderTexture", void 0);
            _defineProperty(_this47, "framebufferDimensions", void 0);
            _defineProperty(_this47, "length", 0);
            _defineProperty(_this47, "numQuads", 0);
            _defineProperty(_this47, "textures", []);
            _defineProperty(_this47, "maxTextures", void 0);
            _this47.glw = glw;
            _this47.options = options;
            _this47.buffers = buffers;
            _this47.shader = shader;
            _this47.shaderProps = shaderProps;
            _this47.alpha = alpha;
            _this47.clippingRect = clippingRect;
            _this47.dimensions = dimensions;
            _this47.bufferIdx = bufferIdx;
            _this47.zIndex = zIndex;
            _this47.renderToTexture = renderToTexture;
            _this47.parentHasRenderTexture = parentHasRenderTexture;
            _this47.framebufferDimensions = framebufferDimensions;
            _this47.maxTextures = shader.supportsIndexedTextures ? glw.getParameter(glw.MAX_VERTEX_TEXTURE_IMAGE_UNITS) : 1;
            return _this47;
          }
          _inherits(WebGlCoreRenderOp, _CoreRenderOp);
          return _createClass(WebGlCoreRenderOp, [{
            key: "addTexture",
            value: function addTexture(texture) {
              var textures = this.textures,
                maxTextures = this.maxTextures;
              var existingIdx = textures.findIndex(function (t) {
                return t === texture;
              });
              if (existingIdx !== -1) {
                return existingIdx;
              }
              var newIdx = textures.length;
              if (newIdx >= maxTextures) {
                return 0xffffffff;
              }
              this.textures.push(texture);
              return newIdx;
            }
          }, {
            key: "draw",
            value: function draw() {
              var glw = this.glw,
                shader = this.shader,
                shaderProps = this.shaderProps,
                options = this.options;
              var shManager = options.shManager;
              shManager.useShader(shader);
              shader.bindRenderOp(this, shaderProps);
              // TODO: Reduce calculations required
              var quadIdx = this.bufferIdx / 24 * 6 * 2;
              // Clipping
              if (this.clippingRect.valid) {
                var _this$clippingRect = this.clippingRect,
                  x = _this$clippingRect.x,
                  y = _this$clippingRect.y,
                  width = _this$clippingRect.width,
                  height = _this$clippingRect.height;
                var pixelRatio = options.pixelRatio;
                var canvasHeight = options.canvas.height;
                var clipX = Math.round(x * pixelRatio);
                var clipWidth = Math.round(width * pixelRatio);
                var clipHeight = Math.round(height * pixelRatio);
                var clipY = Math.round(canvasHeight - clipHeight - y * pixelRatio);
                glw.setScissorTest(true);
                glw.scissor(clipX, clipY, clipWidth, clipHeight);
              } else {
                glw.setScissorTest(false);
              }
              glw.drawElements(glw.TRIANGLES, 6 * this.numQuads, glw.UNSIGNED_SHORT, quadIdx);
            }
          }]);
        }(CoreRenderOp);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Get device specific webgl parameters
         * @param glw
         */
        function getWebGlParameters(glw) {
          var params = {
            MAX_RENDERBUFFER_SIZE: 0,
            MAX_TEXTURE_SIZE: 0,
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any
            MAX_VIEWPORT_DIMS: 0,
            MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0,
            MAX_TEXTURE_IMAGE_UNITS: 0,
            MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0,
            MAX_VERTEX_ATTRIBS: 0,
            MAX_VARYING_VECTORS: 0,
            MAX_VERTEX_UNIFORM_VECTORS: 0,
            MAX_FRAGMENT_UNIFORM_VECTORS: 0
          };
          // Map over all parameters and get them
          var keys = Object.keys(params);
          keys.forEach(function (key) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            params[key] = glw.getParameter(glw[key]);
          });
          return params;
        }
        /**
         * Get device webgl extensions
         * @param glw
         */
        function getWebGlExtensions(glw) {
          var extensions = {
            ANGLE_instanced_arrays: null,
            WEBGL_compressed_texture_s3tc: null,
            WEBGL_compressed_texture_astc: null,
            WEBGL_compressed_texture_etc: null,
            WEBGL_compressed_texture_etc1: null,
            WEBGL_compressed_texture_pvrtc: null,
            WEBKIT_WEBGL_compressed_texture_pvrtc: null,
            WEBGL_compressed_texture_s3tc_srgb: null,
            OES_vertex_array_object: null
          };
          // Map over all extensions and get them
          var keys = Object.keys(extensions);
          keys.forEach(function (key) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            extensions[key] = glw.getExtension(key);
          });
          return extensions;
        }
        /**
         * Allocate big memory chunk that we
         * can re-use to draw quads
         *
         * @param glw
         * @param size
         */
        function createIndexBuffer(glw, size) {
          var maxQuads = ~~(size / 80);
          var indices = new Uint16Array(maxQuads * 6);
          for (var i = 0, j = 0; i < maxQuads; i += 6, j += 4) {
            indices[i] = j;
            indices[i + 1] = j + 1;
            indices[i + 2] = j + 2;
            indices[i + 3] = j + 2;
            indices[i + 4] = j + 1;
            indices[i + 5] = j + 3;
          }
          var buffer = glw.createBuffer();
          glw.elementArrayBufferData(buffer, indices, glw.STATIC_DRAW);
        }
        /**
         * Checks if an object is of type HTMLImageElement.
         * This is used because we cant check for HTMLImageElement directly when the
         * renderer is running in a seperate web worker context.
         *
         * @param obj
         * @returns
         */
        function isHTMLImageElement(obj) {
          return obj !== null && typeof obj === 'object' && obj.constructor && obj.constructor.name === 'HTMLImageElement';
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var TRANSPARENT_TEXTURE_DATA = new Uint8Array([0, 0, 0, 0]);
        /**
         * A wrapper around a WebGLTexture that handles loading the texture data
         * from a Texture source and uploading it to the GPU as well as freeing
         * the uploaded texture.
         *
         * @remarks
         * When accessing the ctxTexture property, the texture will be loaded if
         * it hasn't been already. ctxTexture will always return a valid WebGLTexture
         * and trigger the loading/uploading of the texture's data if it hasn't been
         * loaded yet.
         */
        var WebGlCoreCtxTexture = /*#__PURE__*/function (_CoreContextTexture2) {
          function WebGlCoreCtxTexture(glw, memManager, textureSource) {
            var _this48;
            _classCallCheck(this, WebGlCoreCtxTexture);
            _this48 = _callSuper(this, WebGlCoreCtxTexture, [memManager, textureSource]);
            _defineProperty(_this48, "glw", void 0);
            _defineProperty(_this48, "_nativeCtxTexture", null);
            _defineProperty(_this48, "_state", 'freed');
            _defineProperty(_this48, "_w", 0);
            _defineProperty(_this48, "_h", 0);
            _this48.glw = glw;
            return _this48;
          }
          _inherits(WebGlCoreCtxTexture, _CoreContextTexture2);
          return _createClass(WebGlCoreCtxTexture, [{
            key: "ctxTexture",
            get: function get() {
              if (this._state === 'freed') {
                this.load();
              }
              assertTruthy(this._nativeCtxTexture);
              return this._nativeCtxTexture;
            }
          }, {
            key: "w",
            get: function get() {
              return this._w;
            }
          }, {
            key: "h",
            get: function get() {
              return this._h;
            }
            /**
             * Load the texture data from the Texture source and upload it to the GPU
             *
             * @remarks
             * This method is called automatically when accessing the ctxTexture property
             * if the texture hasn't been loaded yet. But it can also be called manually
             * to force the texture to be pre-loaded prior to accessing the ctxTexture
             * property.
             */
          }, {
            key: "load",
            value: function load() {
              var _this49 = this;
              // If the texture is already loading or loaded, don't load it again.
              if (this._state === 'loading' || this._state === 'loaded') {
                return;
              }
              this._state = 'loading';
              this.textureSource.setState('loading');
              this._nativeCtxTexture = this.createNativeCtxTexture();
              this.onLoadRequest().then(function (_ref22) {
                var width = _ref22.width,
                  height = _ref22.height;
                // If the texture has been freed while loading, return early.
                if (_this49._state === 'freed') {
                  return;
                }
                _this49._state = 'loaded';
                _this49._w = width;
                _this49._h = height;
                // Update the texture source's width and height so that it can be used
                // for rendering.
                _this49.textureSource.setState('loaded', {
                  width: width,
                  height: height
                });
              }).catch(function (err) {
                // If the texture has been freed while loading, return early.
                if (_this49._state === 'freed') {
                  return;
                }
                _this49._state = 'failed';
                _this49.textureSource.setState('failed', err);
                console.error(err);
              });
            }
            /**
             * Called when the texture data needs to be loaded and uploaded to a texture
             */
          }, {
            key: "onLoadRequest",
            value: (function () {
              var _onLoadRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
                var _this$textureSource;
                var glw, textureData, width, height, data, _mipmaps$, _textureData$data, mipmaps, _textureData$data$wid, _width, _textureData$data$hei, _height, _type2, glInternalFormat, view;
                return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                  while (1) switch (_context10.prev = _context10.next) {
                    case 0:
                      glw = this.glw; // Set to a 1x1 transparent texture
                      glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);
                      this.setTextureMemUse(TRANSPARENT_TEXTURE_DATA.byteLength);
                      _context10.next = 5;
                      return (_this$textureSource = this.textureSource) === null || _this$textureSource === void 0 ? void 0 : _this$textureSource.getTextureData();
                    case 5:
                      textureData = _context10.sent;
                      if (this._nativeCtxTexture) {
                        _context10.next = 9;
                        break;
                      }
                      assertTruthy(this._state === 'freed');
                      return _context10.abrupt("return", {
                        width: 0,
                        height: 0
                      });
                    case 9:
                      width = 0;
                      height = 0;
                      assertTruthy(this._nativeCtxTexture);
                      glw.activeTexture(0);
                      // If textureData is null, the texture is empty (0, 0) and we don't need to
                      // upload any data to the GPU.
                      if (textureData.data instanceof ImageBitmap || textureData.data instanceof ImageData ||
                      // not using typeof HTMLImageElement due to web worker
                      isHTMLImageElement(textureData.data)) {
                        data = textureData.data;
                        width = data.width;
                        height = data.height;
                        glw.bindTexture(this._nativeCtxTexture);
                        glw.pixelStorei(glw.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !!textureData.premultiplyAlpha);
                        glw.texImage2D(0, glw.RGBA, glw.RGBA, glw.UNSIGNED_BYTE, data);
                        this.setTextureMemUse(width * height * 4);
                        // generate mipmaps for power-of-2 textures or in WebGL2RenderingContext
                        if (glw.isWebGl2() || isPowerOfTwo(width) && isPowerOfTwo(height)) {
                          glw.generateMipmap();
                        }
                      } else if (textureData.data === null) {
                        width = 0;
                        height = 0;
                        // Reset to a 1x1 transparent texture
                        glw.bindTexture(this._nativeCtxTexture);
                        glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, TRANSPARENT_TEXTURE_DATA);
                        this.setTextureMemUse(TRANSPARENT_TEXTURE_DATA.byteLength);
                      } else if ('mipmaps' in textureData.data && textureData.data.mipmaps) {
                        _textureData$data = textureData.data, mipmaps = _textureData$data.mipmaps, _textureData$data$wid = _textureData$data.width, _width = _textureData$data$wid === void 0 ? 0 : _textureData$data$wid, _textureData$data$hei = _textureData$data.height, _height = _textureData$data$hei === void 0 ? 0 : _textureData$data$hei, _type2 = _textureData$data.type, glInternalFormat = _textureData$data.glInternalFormat;
                        view = _type2 === 'ktx' ? new DataView((_mipmaps$ = mipmaps[0]) !== null && _mipmaps$ !== void 0 ? _mipmaps$ : new ArrayBuffer(0)) : mipmaps[0];
                        glw.bindTexture(this._nativeCtxTexture);
                        glw.compressedTexImage2D(0, glInternalFormat, _width, _height, 0, view);
                        glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);
                        glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);
                        glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);
                        glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);
                        this.setTextureMemUse(view.byteLength);
                      } else {
                        console.error("WebGlCoreCtxTexture.onLoadRequest: Unexpected textureData returned", textureData);
                      }
                      return _context10.abrupt("return", {
                        width: width,
                        height: height
                      });
                    case 15:
                    case "end":
                      return _context10.stop();
                  }
                }, _callee10, this);
              }));
              function onLoadRequest() {
                return _onLoadRequest.apply(this, arguments);
              }
              return onLoadRequest;
            }()
            /**
             * Free the WebGLTexture from the GPU
             *
             * @returns
             */
            )
          }, {
            key: "free",
            value: function free() {
              if (this._state === 'freed') {
                return;
              }
              this._state = 'freed';
              this.textureSource.setState('freed');
              this._w = 0;
              this._h = 0;
              if (!this._nativeCtxTexture) {
                return;
              }
              var glw = this.glw;
              glw.deleteTexture(this._nativeCtxTexture);
              this.setTextureMemUse(0);
              this._nativeCtxTexture = null;
            }
            /**
             * Create native context texture
             *
             * @remarks
             * When this method returns the returned texture will be bound to the GL context state.
             *
             * @param width
             * @param height
             * @returns
             */
          }, {
            key: "createNativeCtxTexture",
            value: function createNativeCtxTexture() {
              var glw = this.glw;
              var nativeTexture = glw.createTexture();
              if (!nativeTexture) {
                throw new Error('Could not create WebGL Texture');
              }
              // On initial load request, create a 1x1 transparent texture to use until
              // the texture data is finally loaded.
              glw.activeTexture(0);
              glw.bindTexture(nativeTexture);
              // linear texture filtering
              glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);
              glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);
              // texture wrapping method
              glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);
              glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);
              return nativeTexture;
            }
          }]);
        }(CoreContextTexture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var WebGlCoreCtxSubTexture = /*#__PURE__*/function (_WebGlCoreCtxTexture2) {
          function WebGlCoreCtxSubTexture(glw, memManager, textureSource) {
            _classCallCheck(this, WebGlCoreCtxSubTexture);
            return _callSuper(this, WebGlCoreCtxSubTexture, [glw, memManager, textureSource]);
          }
          _inherits(WebGlCoreCtxSubTexture, _WebGlCoreCtxTexture2);
          return _createClass(WebGlCoreCtxSubTexture, [{
            key: "onLoadRequest",
            value: function () {
              var _onLoadRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
                var _props$data2, _props$data3;
                var props;
                return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                  while (1) switch (_context11.prev = _context11.next) {
                    case 0:
                      _context11.next = 2;
                      return this.textureSource.getTextureData();
                    case 2:
                      props = _context11.sent;
                      return _context11.abrupt("return", {
                        width: ((_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.width) || 0,
                        height: ((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.height) || 0
                      });
                    case 4:
                    case "end":
                      return _context11.stop();
                  }
                }, _callee11, this);
              }));
              function onLoadRequest() {
                return _onLoadRequest2.apply(this, arguments);
              }
              return onLoadRequest;
            }()
          }]);
        }(WebGlCoreCtxTexture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Represents a collection of WebGL Buffers along with their associated
         * vertex attribute formats.
         */
        var BufferCollection = /*#__PURE__*/function () {
          function BufferCollection(config) {
            _classCallCheck(this, BufferCollection);
            _defineProperty(this, "config", void 0);
            this.config = config;
          }
          /**
           * Get the WebGLBuffer associated with the given attribute name if it exists.
           *
           * @param attributeName
           * @returns
           */
          return _createClass(BufferCollection, [{
            key: "getBuffer",
            value: function getBuffer(attributeName) {
              var _this$config$find;
              return (_this$config$find = this.config.find(function (item) {
                return item.attributes[attributeName];
              })) === null || _this$config$find === void 0 ? void 0 : _this$config$find.buffer;
            }
            /**
             * Get the AttributeInfo associated with the given attribute name if it exists.
             *
             * @param attributeName
             * @returns
             */
          }, {
            key: "getAttributeInfo",
            value: function getAttributeInfo(attributeName) {
              var _this$config$find2;
              return (_this$config$find2 = this.config.find(function (item) {
                return item.attributes[attributeName];
              })) === null || _this$config$find2 === void 0 ? void 0 : _this$config$find2.attributes[attributeName];
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Generic WebGL Utility Functions
         *
         * @remarks
         * Nothing here should be coupled to Renderer logic / types.
         *
         * @param gl
         * @returns
         */
        function _isWebGl(gl) {
          return self.WebGL2RenderingContext && gl instanceof self.WebGL2RenderingContext;
        }

        /* eslint-disable @typescript-eslint/no-unsafe-return */
        /* eslint-disable @typescript-eslint/no-explicit-any */
        /* eslint-disable @typescript-eslint/no-unsafe-argument */
        /**
         * Optimized WebGL Context Wrapper
         *
         * @remarks
         * This class contains the subset of the WebGLRenderingContext & WebGL2RenderingContext
         * API that is used by the renderer. Select high volume WebGL methods include
         * caching optimizations to avoid making WebGL calls if the state is already set
         * to the desired value.
         *
         * While most methods contained are direct passthroughs to the WebGL context,
         * some methods combine multiple WebGL calls into one for convenience, modify
         * arguments to be more convenient, or are replaced by more specific methods.
         *
         * Not all methods are optimized. Only methods that are called frequently
         * and/or have a high cost are optimized.
         *
         * A subset of GLenum constants are also exposed as properties on this class
         * for convenience.
         */
        var WebGlContextWrapper = /*#__PURE__*/function () {
          //#endregion WebGL Enums
          function WebGlContextWrapper(gl) {
            var _this50 = this;
            _classCallCheck(this, WebGlContextWrapper);
            _defineProperty(this, "gl", void 0);
            //#region Cached WebGL State
            _defineProperty(this, "activeTextureUnit", 0);
            _defineProperty(this, "texture2dUnits", void 0);
            _defineProperty(this, "texture2dParams", new WeakMap());
            _defineProperty(this, "scissorEnabled", void 0);
            _defineProperty(this, "scissorX", void 0);
            _defineProperty(this, "scissorY", void 0);
            _defineProperty(this, "scissorWidth", void 0);
            _defineProperty(this, "scissorHeight", void 0);
            _defineProperty(this, "blendEnabled", void 0);
            _defineProperty(this, "blendSrcRgb", void 0);
            _defineProperty(this, "blendDstRgb", void 0);
            _defineProperty(this, "blendSrcAlpha", void 0);
            _defineProperty(this, "blendDstAlpha", void 0);
            _defineProperty(this, "boundArrayBuffer", void 0);
            _defineProperty(this, "boundElementArrayBuffer", void 0);
            _defineProperty(this, "curProgram", void 0);
            _defineProperty(this, "programUniforms", new WeakMap());
            //#endregion Cached WebGL State
            //#region Canvas
            _defineProperty(this, "canvas", void 0);
            //#endregion Canvas
            //#region WebGL Enums
            _defineProperty(this, "MAX_RENDERBUFFER_SIZE", void 0);
            _defineProperty(this, "MAX_TEXTURE_SIZE", void 0);
            _defineProperty(this, "MAX_VIEWPORT_DIMS", void 0);
            _defineProperty(this, "MAX_VERTEX_TEXTURE_IMAGE_UNITS", void 0);
            _defineProperty(this, "MAX_TEXTURE_IMAGE_UNITS", void 0);
            _defineProperty(this, "MAX_COMBINED_TEXTURE_IMAGE_UNITS", void 0);
            _defineProperty(this, "MAX_VERTEX_ATTRIBS", void 0);
            _defineProperty(this, "MAX_VARYING_VECTORS", void 0);
            _defineProperty(this, "MAX_VERTEX_UNIFORM_VECTORS", void 0);
            _defineProperty(this, "MAX_FRAGMENT_UNIFORM_VECTORS", void 0);
            _defineProperty(this, "TEXTURE_MAG_FILTER", void 0);
            _defineProperty(this, "TEXTURE_MIN_FILTER", void 0);
            _defineProperty(this, "TEXTURE_WRAP_S", void 0);
            _defineProperty(this, "TEXTURE_WRAP_T", void 0);
            _defineProperty(this, "LINEAR", void 0);
            _defineProperty(this, "CLAMP_TO_EDGE", void 0);
            _defineProperty(this, "RGBA", void 0);
            _defineProperty(this, "UNSIGNED_BYTE", void 0);
            _defineProperty(this, "UNPACK_PREMULTIPLY_ALPHA_WEBGL", void 0);
            _defineProperty(this, "UNPACK_FLIP_Y_WEBGL", void 0);
            _defineProperty(this, "FLOAT", void 0);
            _defineProperty(this, "TRIANGLES", void 0);
            _defineProperty(this, "UNSIGNED_SHORT", void 0);
            _defineProperty(this, "ONE", void 0);
            _defineProperty(this, "ONE_MINUS_SRC_ALPHA", void 0);
            _defineProperty(this, "VERTEX_SHADER", void 0);
            _defineProperty(this, "FRAGMENT_SHADER", void 0);
            _defineProperty(this, "STATIC_DRAW", void 0);
            _defineProperty(this, "COMPILE_STATUS", void 0);
            _defineProperty(this, "LINK_STATUS", void 0);
            _defineProperty(this, "DYNAMIC_DRAW", void 0);
            _defineProperty(this, "COLOR_ATTACHMENT0", void 0);
            this.gl = gl;
            // The following code extracts the current state of the WebGL context
            // to our local JavaScript cached version of it. This is so we can
            // avoid making WebGL calls if we don't need to.
            // We could assume that the WebGL context is in a default state, but
            // in the future we may want to support restoring a broken WebGL context
            // and this will help with that.
            this.activeTextureUnit = gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;
            var maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            // save current texture units
            this.texture2dUnits = new Array(maxTextureUnits).fill(undefined).map(function (_, i) {
              _this50.activeTexture(i);
              return gl.getParameter(gl.TEXTURE_BINDING_2D);
            });
            // restore active texture unit
            this.activeTexture(this.activeTextureUnit);
            this.scissorEnabled = gl.isEnabled(gl.SCISSOR_TEST);
            var scissorBox = gl.getParameter(gl.SCISSOR_BOX);
            this.scissorX = scissorBox[0];
            this.scissorY = scissorBox[1];
            this.scissorWidth = scissorBox[2];
            this.scissorHeight = scissorBox[3];
            this.blendEnabled = gl.isEnabled(gl.BLEND);
            this.blendSrcRgb = gl.getParameter(gl.BLEND_SRC_RGB);
            this.blendDstRgb = gl.getParameter(gl.BLEND_DST_RGB);
            this.blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);
            this.blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);
            this.boundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);
            this.boundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
            this.curProgram = gl.getParameter(gl.CURRENT_PROGRAM);
            this.canvas = gl.canvas;
            // Extract GLenums
            this.MAX_RENDERBUFFER_SIZE = gl.MAX_RENDERBUFFER_SIZE;
            this.MAX_TEXTURE_SIZE = gl.MAX_TEXTURE_SIZE;
            this.MAX_VIEWPORT_DIMS = gl.MAX_VIEWPORT_DIMS;
            this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
            this.MAX_TEXTURE_IMAGE_UNITS = gl.MAX_TEXTURE_IMAGE_UNITS;
            this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
            this.MAX_VERTEX_ATTRIBS = gl.MAX_VERTEX_ATTRIBS;
            this.MAX_VARYING_VECTORS = gl.MAX_VARYING_VECTORS;
            this.MAX_VERTEX_UNIFORM_VECTORS = gl.MAX_VERTEX_UNIFORM_VECTORS;
            this.MAX_FRAGMENT_UNIFORM_VECTORS = gl.MAX_FRAGMENT_UNIFORM_VECTORS;
            this.TEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;
            this.TEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;
            this.TEXTURE_WRAP_S = gl.TEXTURE_WRAP_S;
            this.TEXTURE_WRAP_T = gl.TEXTURE_WRAP_T;
            this.LINEAR = gl.LINEAR;
            this.CLAMP_TO_EDGE = gl.CLAMP_TO_EDGE;
            this.RGBA = gl.RGBA;
            this.UNSIGNED_BYTE = gl.UNSIGNED_BYTE;
            this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
            this.UNPACK_FLIP_Y_WEBGL = gl.UNPACK_FLIP_Y_WEBGL;
            this.FLOAT = gl.FLOAT;
            this.TRIANGLES = gl.TRIANGLES;
            this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;
            this.ONE = gl.ONE;
            this.ONE_MINUS_SRC_ALPHA = gl.ONE_MINUS_SRC_ALPHA;
            this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
            this.TRIANGLES = gl.TRIANGLES;
            this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;
            this.VERTEX_SHADER = gl.VERTEX_SHADER;
            this.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;
            this.STATIC_DRAW = gl.STATIC_DRAW;
            this.COMPILE_STATUS = gl.COMPILE_STATUS;
            this.LINK_STATUS = gl.LINK_STATUS;
            this.DYNAMIC_DRAW = gl.DYNAMIC_DRAW;
            this.COLOR_ATTACHMENT0 = gl.COLOR_ATTACHMENT0;
          }
          /**
           * Returns true if the WebGL context is WebGL2
           *
           * @returns
           */
          return _createClass(WebGlContextWrapper, [{
            key: "isWebGl2",
            value: function isWebGl2() {
              return _isWebGl(this.gl);
            }
            /**
             * ```
             * gl.activeTexture(textureUnit + gl.TEXTURE0);
             * ```
             *
             * @remarks
             * **WebGL Difference**: `textureUnit` is based from 0, not `gl.TEXTURE0`.
             *
             * @param textureUnit
             */
          }, {
            key: "activeTexture",
            value: function activeTexture(textureUnit) {
              var gl = this.gl;
              if (this.activeTextureUnit !== textureUnit) {
                gl.activeTexture(textureUnit + gl.TEXTURE0);
                this.activeTextureUnit = textureUnit;
              }
            }
            /**
             * ```
             * gl.bindTexture(gl.TEXTURE_2D, texture);
             * ```
             * @remarks
             * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`
             *
             * @param texture
             */
          }, {
            key: "bindTexture",
            value: function bindTexture(texture) {
              var gl = this.gl,
                activeTextureUnit = this.activeTextureUnit,
                texture2dUnits = this.texture2dUnits;
              if (texture2dUnits[activeTextureUnit] === texture) {
                return;
              }
              texture2dUnits[activeTextureUnit] = texture;
              gl.bindTexture(this.gl.TEXTURE_2D, texture);
            }
          }, {
            key: "_getActiveTexture",
            value: function _getActiveTexture() {
              var activeTextureUnit = this.activeTextureUnit,
                texture2dUnits = this.texture2dUnits;
              return texture2dUnits[activeTextureUnit];
            }
            /**
             * ```
             * gl.texParameteri(gl.TEXTURE_2D, pname, param);
             * ```
             * @remarks
             * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`
             *
             * @param pname
             * @param param
             * @returns
             */
          }, {
            key: "texParameteri",
            value: function texParameteri(pname, param) {
              var gl = this.gl,
                texture2dParams = this.texture2dParams;
              var activeTexture = this._getActiveTexture();
              if (!activeTexture) {
                throw new Error('No active texture');
              }
              var textureParams = texture2dParams.get(activeTexture);
              if (!textureParams) {
                textureParams = {};
                texture2dParams.set(activeTexture, textureParams);
              }
              if (textureParams[pname] === param) {
                return;
              }
              textureParams[pname] = param;
              gl.texParameteri(gl.TEXTURE_2D, pname, param);
            }
          }, {
            key: "texImage2D",
            value: function texImage2D(level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels) {
              var gl = this.gl;
              if (format) {
                gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource);
              }
            }
            /**
             * ```
             * gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, data);
             * ```
             *
             * @remarks
             * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`
             */
          }, {
            key: "compressedTexImage2D",
            value: function compressedTexImage2D(level, internalformat, width, height, border, data) {
              var gl = this.gl;
              gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalformat, width, height, border, data);
            }
            /**
             * ```
             * gl.pixelStorei(pname, param);
             * ```
             *
             * @param pname
             * @param param
             */
          }, {
            key: "pixelStorei",
            value: function pixelStorei(pname, param) {
              var gl = this.gl;
              gl.pixelStorei(pname, param);
            }
            /**
             * ```
             * gl.generateMipmap(gl.TEXTURE_2D);
             * ```
             *
             * @remarks
             * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`
             */
          }, {
            key: "generateMipmap",
            value: function generateMipmap() {
              var gl = this.gl;
              gl.generateMipmap(gl.TEXTURE_2D);
            }
            /**
             * ```
             * gl.createTexture();
             * ```
             *
             * @returns
             */
          }, {
            key: "createTexture",
            value: function createTexture() {
              var gl = this.gl;
              return gl.createTexture();
            }
            /**
             * ```
             * gl.deleteTexture(texture);
             * ```
             *
             * @param texture
             */
          }, {
            key: "deleteTexture",
            value: function deleteTexture(texture) {
              var gl = this.gl;
              if (texture) {
                this.texture2dParams.delete(texture);
              }
              gl.deleteTexture(texture);
            }
            /**
             * ```
             * gl.viewport(x, y, width, height);
             * ```
             */
          }, {
            key: "viewport",
            value: function viewport(x, y, width, height) {
              var gl = this.gl;
              gl.viewport(x, y, width, height);
            }
            /**
             * ```
             * gl.clearColor(red, green, blue, alpha);
             * ```
             *
             * @param red
             * @param green
             * @param blue
             * @param alpha
             */
          }, {
            key: "clearColor",
            value: function clearColor(red, green, blue, alpha) {
              var gl = this.gl;
              gl.clearColor(red, green, blue, alpha);
            }
            /**
             * ```
             * gl["enable"|"disable"](gl.SCISSOR_TEST);
             * ```
             * @param enable
             */
          }, {
            key: "setScissorTest",
            value: function setScissorTest(enable) {
              var gl = this.gl,
                scissorEnabled = this.scissorEnabled;
              if (enable === scissorEnabled) {
                return;
              }
              if (enable) {
                gl.enable(gl.SCISSOR_TEST);
              } else {
                gl.disable(gl.SCISSOR_TEST);
              }
              this.scissorEnabled = enable;
            }
            /**
             * ```
             * gl.scissor(x, y, width, height);
             * ```
             *
             * @param x
             * @param y
             * @param width
             * @param height
             */
          }, {
            key: "scissor",
            value: function scissor(x, y, width, height) {
              var gl = this.gl,
                scissorX = this.scissorX,
                scissorY = this.scissorY,
                scissorWidth = this.scissorWidth,
                scissorHeight = this.scissorHeight;
              if (x !== scissorX || y !== scissorY || width !== scissorWidth || height !== scissorHeight) {
                gl.scissor(x, y, width, height);
                this.scissorX = x;
                this.scissorY = y;
                this.scissorWidth = width;
                this.scissorHeight = height;
              }
            }
            /**
             * ```
             * gl["enable"|"disable"](gl.BLEND);
             * ```
             *
             * @param blend
             * @returns
             */
          }, {
            key: "setBlend",
            value: function setBlend(blend) {
              var gl = this.gl,
                blendEnabled = this.blendEnabled;
              if (blend === blendEnabled) {
                return;
              }
              if (blend) {
                gl.enable(gl.BLEND);
              } else {
                gl.disable(gl.BLEND);
              }
              this.blendEnabled = blend;
            }
            /**
             * ```
             * gl.blendFunc(src, dst);
             * ```
             *
             * @param src
             * @param dst
             */
          }, {
            key: "blendFunc",
            value: function blendFunc(src, dst) {
              var gl = this.gl,
                blendSrcRgb = this.blendSrcRgb,
                blendDstRgb = this.blendDstRgb,
                blendSrcAlpha = this.blendSrcAlpha,
                blendDstAlpha = this.blendDstAlpha;
              if (src !== blendSrcRgb || dst !== blendDstRgb || src !== blendSrcAlpha || dst !== blendDstAlpha) {
                gl.blendFunc(src, dst);
                this.blendSrcRgb = src;
                this.blendDstRgb = dst;
                this.blendSrcAlpha = src;
                this.blendDstAlpha = dst;
              }
            }
            /**
             * ```
             * gl.createBuffer();
             * ```
             *
             * @returns
             */
          }, {
            key: "createBuffer",
            value: function createBuffer() {
              var gl = this.gl;
              return gl.createBuffer();
            }
            /**
             * ```
             * gl.createFramebuffer();
             * ```
             * @returns
             */
          }, {
            key: "createFramebuffer",
            value: function createFramebuffer() {
              var gl = this.gl;
              return gl.createFramebuffer();
            }
            /**
             * ```
             * gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
             * ```
             *
             * @param framebuffer
             */
          }, {
            key: "bindFramebuffer",
            value: function bindFramebuffer(framebuffer) {
              var gl = this.gl;
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            }
            /**
             * ```
             * gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
             * ```
             * @remarks
             * **WebGL Difference**: Bind target is always `gl.FRAMEBUFFER` and textarget is always `gl.TEXTURE_2D`
             */
          }, {
            key: "framebufferTexture2D",
            value: function framebufferTexture2D(attachment, texture, level) {
              var gl = this.gl;
              gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, level);
            }
            /**
             * ```
             * gl.clear(gl.COLOR_BUFFER_BIT);
             * ```
             *
             * @remarks
             * **WebGL Difference**: Clear mask is always `gl.COLOR_BUFFER_BIT`
             */
          }, {
            key: "clear",
            value: function clear() {
              var gl = this.gl;
              gl.clear(gl.COLOR_BUFFER_BIT);
            }
            /**
             * ```
             * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
             * gl.bufferData(gl.ARRAY_BUFFER, data, usage);
             * ```
             *
             * @remarks
             * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.
             *
             * @param buffer
             * @param data
             * @param usage
             */
          }, {
            key: "arrayBufferData",
            value: function arrayBufferData(buffer, data, usage) {
              var gl = this.gl,
                boundArrayBuffer = this.boundArrayBuffer;
              if (boundArrayBuffer !== buffer) {
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                this.boundArrayBuffer = buffer;
              }
              gl.bufferData(gl.ARRAY_BUFFER, data, usage);
            }
            /**
             * ```
             * gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
             * gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);
             * ```
             * @remarks
             * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.
             *
             * @param buffer
             * @param data
             * @param usage
             */
          }, {
            key: "elementArrayBufferData",
            value: function elementArrayBufferData(buffer, data, usage) {
              var gl = this.gl,
                boundElementArrayBuffer = this.boundElementArrayBuffer;
              if (boundElementArrayBuffer !== buffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
                this.boundElementArrayBuffer = buffer;
              }
              gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);
            }
            /**
             * ```
             * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
             * gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
             * ```
             *
             * @remarks
             * **WebGL Combo**: `gl.bindBuffer` and `gl.vertexAttribPointer` are combined into one function.
             *
             * @param buffer
             * @param index
             * @param size
             * @param type
             * @param normalized
             * @param stride
             * @param offset
             */
          }, {
            key: "vertexAttribPointer",
            value: function vertexAttribPointer(buffer, index, size, type, normalized, stride, offset) {
              var gl = this.gl,
                boundArrayBuffer = this.boundArrayBuffer;
              if (boundArrayBuffer !== buffer) {
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                this.boundArrayBuffer = buffer;
              }
              gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
            }
            /**
             * ```
             * gl.useProgram(program);
             * ```
             *
             * @param program
             * @returns
             */
          }, {
            key: "useProgram",
            value: function useProgram(program) {
              var gl = this.gl,
                curProgram = this.curProgram;
              if (curProgram === program) {
                return;
              }
              gl.useProgram(program);
              this.curProgram = program;
            }
          }, {
            key: "setUniform",
            value: function setUniform(type, location) {
              var gl = this.gl,
                programUniforms = this.programUniforms;
              var uniforms = programUniforms.get(this.curProgram);
              if (!uniforms) {
                uniforms = new Map();
                programUniforms.set(this.curProgram, uniforms);
              }
              var uniformArgs = uniforms.get(location);
              for (var _len16 = arguments.length, args = new Array(_len16 > 2 ? _len16 - 2 : 0), _key19 = 2; _key19 < _len16; _key19++) {
                args[_key19 - 2] = arguments[_key19];
              }
              if (!uniformArgs || !compareArrays(uniformArgs, args)) {
                uniforms.set(location, args);
                gl[type].apply(gl, [location].concat(args));
              }
            }
            /**
             * ```
             * gl.getParameter(pname);
             * ```
             *
             * @param pname
             * @returns
             */
          }, {
            key: "getParameter",
            value: function getParameter(pname) {
              var gl = this.gl;
              return gl.getParameter(pname);
            }
            /**
             * ```
             * gl.drawElements(mode, count, type, offset);
             * ```
             *
             * @param mode
             * @param count
             * @param type
             * @param offset
             */
          }, {
            key: "drawElements",
            value: function drawElements(mode, count, type, offset) {
              var gl = this.gl;
              gl.drawElements(mode, count, type, offset);
            }
            /**
             * ```
             * gl.drawArrays(mode, first, count);
             * ```
             *
             * @param name
             * @returns
             */
          }, {
            key: "getExtension",
            value: function getExtension(name) {
              var gl = this.gl;
              return gl.getExtension(name);
            }
            /**
             * ```
             * gl.createVertexArray();
             * ```
             *
             * @returns
             */
          }, {
            key: "createVertexArray",
            value: function createVertexArray() {
              var gl = this.gl;
              assertTruthy(gl instanceof WebGL2RenderingContext);
              return gl.createVertexArray();
            }
            /**
             * ```
             * gl.bindVertexArray(vertexArray);
             * ```
             *
             * @param vertexArray
             */
          }, {
            key: "bindVertexArray",
            value: function bindVertexArray(vertexArray) {
              var gl = this.gl;
              assertTruthy(gl instanceof WebGL2RenderingContext);
              gl.bindVertexArray(vertexArray);
            }
            /**
             * ```
             * gl.getAttribLocation(program, name);
             * ```
             *
             * @param program
             * @param name
             * @returns
             */
          }, {
            key: "getAttribLocation",
            value: function getAttribLocation(program, name) {
              var gl = this.gl;
              return gl.getAttribLocation(program, name);
            }
            /**
             * ```
             * gl.getUniformLocation(program, name);
             * ```
             *
             * @param program
             * @param name
             * @returns
             */
          }, {
            key: "getUniformLocation",
            value: function getUniformLocation(program, name) {
              var gl = this.gl;
              return gl.getUniformLocation(program, name);
            }
            /**
             * ```
             * gl.enableVertexAttribArray(index);
             * ```
             *
             * @param index
             */
          }, {
            key: "enableVertexAttribArray",
            value: function enableVertexAttribArray(index) {
              var gl = this.gl;
              gl.enableVertexAttribArray(index);
            }
            /**
             * ```
             * gl.disableVertexAttribArray(index);
             * ```
             *
             * @param index
             */
          }, {
            key: "disableVertexAttribArray",
            value: function disableVertexAttribArray(index) {
              var gl = this.gl;
              gl.disableVertexAttribArray(index);
            }
            /**
             * ```
             * gl.createShader(type);
             * ```
             *
             * @param type
             * @returns
             */
          }, {
            key: "createShader",
            value: function createShader(type) {
              var gl = this.gl;
              return gl.createShader(type);
            }
            /**
             * ```
             * gl.compileShader(shader);
             * ```
             *
             * @param shader
             * @returns
             */
          }, {
            key: "compileShader",
            value: function compileShader(shader) {
              var gl = this.gl;
              gl.compileShader(shader);
            }
            /**
             * ```
             * gl.attachShader(program, shader);
             * ```
             *
             * @param program
             * @param shader
             */
          }, {
            key: "attachShader",
            value: function attachShader(program, shader) {
              var gl = this.gl;
              gl.attachShader(program, shader);
            }
            /**
             * ```
             * gl.linkProgram(program);
             * ```
             *
             * @param program
             */
          }, {
            key: "linkProgram",
            value: function linkProgram(program) {
              var gl = this.gl;
              gl.linkProgram(program);
            }
            /**
             * ```
             * gl.deleteProgram(shader);
             * ```
             *
             * @param shader
             */
          }, {
            key: "deleteProgram",
            value: function deleteProgram(shader) {
              var gl = this.gl;
              gl.deleteProgram(shader);
            }
            /**
             * ```
             * gl.getShaderParameter(shader, pname);
             * ```
             *
             * @param shader
             * @param pname
             */
          }, {
            key: "getShaderParameter",
            value: function getShaderParameter(shader, pname) {
              var gl = this.gl;
              return gl.getShaderParameter(shader, pname);
            }
            /**
             * ```
             * gl.getShaderInfoLog(shader);
             * ```
             *
             * @param shader
             */
          }, {
            key: "getShaderInfoLog",
            value: function getShaderInfoLog(shader) {
              var gl = this.gl;
              return gl.getShaderInfoLog(shader);
            }
            /**
             * ```
             * gl.createProgram();
             * ```
             *
             * @returns
             */
          }, {
            key: "createProgram",
            value: function createProgram() {
              var gl = this.gl;
              return gl.createProgram();
            }
            /**
             * ```
             * gl.getProgramParameter(program, pname);
             * ```
             *
             * @param program
             * @param pname
             * @returns
             */
          }, {
            key: "getProgramParameter",
            value: function getProgramParameter(program, pname) {
              var gl = this.gl;
              return gl.getProgramParameter(program, pname);
            }
            /**
             * ```
             * gl.getProgramInfoLog(program);
             * ```
             *
             * @param program
             * @returns
             */
          }, {
            key: "getProgramInfoLog",
            value: function getProgramInfoLog(program) {
              var gl = this.gl;
              return gl.getProgramInfoLog(program);
            }
            /**
             * ```
             * gl.shaderSource(shader, source);
             * ```
             *
             * @param shader
             * @param source
             */
          }, {
            key: "shaderSource",
            value: function shaderSource(shader, source) {
              var gl = this.gl;
              gl.shaderSource(shader, source);
            }
            /**
             * ```
             * gl.deleteShader(shader);
             * ```
             *
             * @param shader
             */
          }, {
            key: "deleteShader",
            value: function deleteShader(shader) {
              var gl = this.gl;
              gl.deleteShader(shader);
            }
          }]);
        }();
        /**
         * Compare two arrays for equality.
         *
         * @remarks
         * This function will not try to compare nested arrays or Float32Arrays and
         * instead will always return false when they are encountered.
         *
         * @param a
         * @param b
         * @returns
         */
        function compareArrays(a, b) {
          if (a.length !== b.length) {
            return false;
          }
          return a.every(function (v, i) {
            // Don't bother to compare nested arrays or Float32Arrays
            if (Array.isArray(v) || v instanceof Float32Array) {
              return false;
            } else {
              return v === b[i];
            }
          });
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2024 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var WebGlCoreCtxRenderTexture = /*#__PURE__*/function (_WebGlCoreCtxTexture3) {
          function WebGlCoreCtxRenderTexture(glw, memManager, textureSource) {
            var _this51;
            _classCallCheck(this, WebGlCoreCtxRenderTexture);
            _this51 = _callSuper(this, WebGlCoreCtxRenderTexture, [glw, memManager, textureSource]);
            // Create Framebuffer object
            _defineProperty(_this51, "framebuffer", void 0);
            var framebuffer = glw.createFramebuffer();
            assertTruthy(framebuffer, 'Unable to create framebuffer');
            _this51.framebuffer = framebuffer;
            return _this51;
          }
          _inherits(WebGlCoreCtxRenderTexture, _WebGlCoreCtxTexture3);
          return _createClass(WebGlCoreCtxRenderTexture, [{
            key: "onLoadRequest",
            value: function () {
              var _onLoadRequest3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
                var glw, nativeTexture, _this$textureSource2, width, height;
                return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                  while (1) switch (_context12.prev = _context12.next) {
                    case 0:
                      glw = this.glw;
                      nativeTexture = this._nativeCtxTexture = this.createNativeCtxTexture();
                      _this$textureSource2 = this.textureSource, width = _this$textureSource2.width, height = _this$textureSource2.height; // Set the dimensions of the render texture
                      glw.texImage2D(0, glw.RGBA, width, height, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);
                      // Update the texture memory manager
                      this.setTextureMemUse(width * height * 4);
                      // Bind the framebuffer
                      glw.bindFramebuffer(this.framebuffer);
                      // Attach the texture to the framebuffer
                      glw.framebufferTexture2D(glw.COLOR_ATTACHMENT0, nativeTexture, 0);
                      // Unbind the framebuffer
                      glw.bindFramebuffer(null);
                      return _context12.abrupt("return", {
                        width: width,
                        height: height
                      });
                    case 9:
                    case "end":
                      return _context12.stop();
                  }
                }, _callee12, this);
              }));
              function onLoadRequest() {
                return _onLoadRequest3.apply(this, arguments);
              }
              return onLoadRequest;
            }()
          }]);
        }(WebGlCoreCtxTexture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var WORDS_PER_QUAD = 24;
        var WebGlCoreRenderer = /*#__PURE__*/function (_CoreRenderer2) {
          function WebGlCoreRenderer(options) {
            var _this52;
            _classCallCheck(this, WebGlCoreRenderer);
            _this52 = _callSuper(this, WebGlCoreRenderer, [options]);
            //// WebGL Native Context and Data
            _defineProperty(_this52, "glw", void 0);
            _defineProperty(_this52, "system", void 0);
            //// Persistent data
            _defineProperty(_this52, "quadBuffer", void 0);
            _defineProperty(_this52, "fQuadBuffer", void 0);
            _defineProperty(_this52, "uiQuadBuffer", void 0);
            _defineProperty(_this52, "renderOps", []);
            //// Render Op / Buffer Filling State
            _defineProperty(_this52, "curBufferIdx", 0);
            _defineProperty(_this52, "curRenderOp", null);
            _defineProperty(_this52, "rttNodes", []);
            _defineProperty(_this52, "activeRttNode", null);
            //// Default Shader
            _defineProperty(_this52, "defShaderCtrl", void 0);
            _defineProperty(_this52, "defaultShader", void 0);
            _defineProperty(_this52, "quadBufferCollection", void 0);
            /**
             * White pixel texture used by default when no texture is specified.
             */
            _defineProperty(_this52, "defaultTexture", void 0);
            _defineProperty(_this52, "quadBufferUsage", 0);
            /**
             * Whether the renderer is currently rendering to a texture.
             */
            _defineProperty(_this52, "renderToTextureActive", false);
            _this52.quadBuffer = new ArrayBuffer(_this52.stage.options.quadBufferSize);
            _this52.fQuadBuffer = new Float32Array(_this52.quadBuffer);
            _this52.uiQuadBuffer = new Uint32Array(_this52.quadBuffer);
            _this52.mode = 'webgl';
            var canvas = options.canvas,
              clearColor = options.clearColor,
              bufferMemory = options.bufferMemory;
            _this52.defaultTexture = new ColorTexture(_this52.txManager);
            // Mark the default texture as ALWAYS renderable
            // This prevents it from ever being cleaned up.
            // Fixes https://github.com/lightning-js/renderer/issues/262
            _this52.defaultTexture.setRenderableOwner(_this52, true);
            // When the default texture is loaded, request a render in case the
            // RAF is paused. Fixes: https://github.com/lightning-js/renderer/issues/123
            _this52.defaultTexture.once('loaded', function () {
              _this52.stage.requestRender();
            });
            var gl = createWebGLContext(canvas, options.contextSpy);
            var glw = _this52.glw = new WebGlContextWrapper(gl);
            var color = getNormalizedRgbaComponents(clearColor);
            glw.viewport(0, 0, canvas.width, canvas.height);
            glw.clearColor(color[0], color[1], color[2], color[3]);
            glw.setBlend(true);
            glw.blendFunc(glw.ONE, glw.ONE_MINUS_SRC_ALPHA);
            createIndexBuffer(glw, bufferMemory);
            _this52.system = {
              parameters: getWebGlParameters(_this52.glw),
              extensions: getWebGlExtensions(_this52.glw)
            };
            _this52.shManager.renderer = _this52;
            _this52.defShaderCtrl = _this52.shManager.loadShader('DefaultShader');
            _this52.defaultShader = _this52.defShaderCtrl.shader;
            var quadBuffer = glw.createBuffer();
            assertTruthy(quadBuffer);
            var stride = 6 * Float32Array.BYTES_PER_ELEMENT;
            _this52.quadBufferCollection = new BufferCollection([{
              buffer: quadBuffer,
              attributes: {
                a_position: {
                  name: 'a_position',
                  size: 2,
                  type: glw.FLOAT,
                  normalized: false,
                  stride: stride,
                  offset: 0 // start at the beginning of the buffer
                },
                a_textureCoordinate: {
                  name: 'a_textureCoordinate',
                  size: 2,
                  type: glw.FLOAT,
                  normalized: false,
                  stride: stride,
                  offset: 2 * Float32Array.BYTES_PER_ELEMENT
                },
                a_color: {
                  name: 'a_color',
                  size: 4,
                  type: glw.UNSIGNED_BYTE,
                  normalized: true,
                  stride: stride,
                  offset: 4 * Float32Array.BYTES_PER_ELEMENT
                },
                a_textureIndex: {
                  name: 'a_textureIndex',
                  size: 1,
                  type: glw.FLOAT,
                  normalized: false,
                  stride: stride,
                  offset: 5 * Float32Array.BYTES_PER_ELEMENT
                }
              }
            }]);
            return _this52;
          }
          _inherits(WebGlCoreRenderer, _CoreRenderer2);
          return _createClass(WebGlCoreRenderer, [{
            key: "reset",
            value: function reset() {
              var glw = this.glw;
              this.curBufferIdx = 0;
              this.curRenderOp = null;
              this.renderOps.length = 0;
              glw.setScissorTest(false);
              glw.clear();
            }
          }, {
            key: "getShaderManager",
            value: function getShaderManager() {
              return this.shManager;
            }
          }, {
            key: "createCtxTexture",
            value: function createCtxTexture(textureSource) {
              if (textureSource instanceof SubTexture) {
                return new WebGlCoreCtxSubTexture(this.glw, this.txMemManager, textureSource);
              } else if (textureSource instanceof RenderTexture) {
                return new WebGlCoreCtxRenderTexture(this.glw, this.txMemManager, textureSource);
              }
              return new WebGlCoreCtxTexture(this.glw, this.txMemManager, textureSource);
            }
            /**
             * This function adds a quad (a rectangle composed of two triangles) to the WebGL rendering pipeline.
             *
             * It takes a set of options that define the quad's properties, such as its dimensions, colors, texture, shader, and transformation matrix.
             * The function first updates the shader properties with the current dimensions if necessary, then sets the default texture if none is provided.
             * It then checks if a new render operation is needed, based on the current shader and clipping rectangle.
             * If a new render operation is needed, it creates one and updates the current render operation.
             * The function then adjusts the texture coordinates based on the texture options and adds the texture to the texture manager.
             *
             * Finally, it calculates the vertices for the quad, taking into account any transformations, and adds them to the quad buffer.
             * The function updates the length and number of quads in the current render operation, and updates the current buffer index.
             */
          }, {
            key: "addQuad",
            value: function addQuad(params) {
              var _texture, _textureOptions$flipX, _textureOptions$flipY, _textureOptions$resiz;
              var fQuadBuffer = this.fQuadBuffer,
                uiQuadBuffer = this.uiQuadBuffer;
              var width = params.width,
                height = params.height,
                colorTl = params.colorTl,
                colorTr = params.colorTr,
                colorBl = params.colorBl,
                colorBr = params.colorBr,
                textureOptions = params.textureOptions,
                shader = params.shader,
                shaderProps = params.shaderProps,
                alpha = params.alpha,
                clippingRect = params.clippingRect,
                tx = params.tx,
                ty = params.ty,
                ta = params.ta,
                tb = params.tb,
                tc = params.tc,
                td = params.td,
                renderCoords = params.renderCoords,
                renderToTexture = params.rtt,
                parentHasRenderTexture = params.parentHasRenderTexture,
                framebufferDimensions = params.framebufferDimensions;
              var texture = params.texture;
              /**
               * If the shader props contain any automatic properties, update it with the
               * current dimensions that will be used to render the quad.
               */
              if (shaderProps && hasOwn(shaderProps, '$dimensions')) {
                var dimensions = shaderProps.$dimensions;
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                dimensions.width = width;
                dimensions.height = height;
              }
              texture = (_texture = texture) !== null && _texture !== void 0 ? _texture : this.defaultTexture;
              assertTruthy(texture instanceof Texture, 'Invalid texture type');
              var bufferIdx = this.curBufferIdx,
                curRenderOp = this.curRenderOp;
              var targetDims = {
                width: width,
                height: height
              };
              var targetShader = shader || this.defaultShader;
              assertTruthy(targetShader instanceof WebGlCoreShader);
              if (!this.reuseRenderOp(params)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                this.newRenderOp(targetShader, shaderProps, alpha, targetDims, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions);
                curRenderOp = this.curRenderOp;
                assertTruthy(curRenderOp);
              }
              var flipX = (_textureOptions$flipX = textureOptions === null || textureOptions === void 0 ? void 0 : textureOptions.flipX) !== null && _textureOptions$flipX !== void 0 ? _textureOptions$flipX : false;
              var flipY = (_textureOptions$flipY = textureOptions === null || textureOptions === void 0 ? void 0 : textureOptions.flipY) !== null && _textureOptions$flipY !== void 0 ? _textureOptions$flipY : false;
              // always flip flipY for render textures
              if (texture instanceof RenderTexture) {
                flipY = !flipY;
              }
              var texCoordX1 = 0;
              var texCoordY1 = 0;
              var texCoordX2 = 1;
              var texCoordY2 = 1;
              if (texture instanceof SubTexture) {
                var _texture$props = texture.props,
                  _tx = _texture$props.x,
                  _ty = _texture$props.y,
                  tw = _texture$props.width,
                  th = _texture$props.height;
                var _ref23 = texture.parentTexture.dimensions || {
                    width: 0,
                    height: 0
                  },
                  _ref23$width = _ref23.width,
                  parentW = _ref23$width === void 0 ? 0 : _ref23$width,
                  _ref23$height = _ref23.height,
                  parentH = _ref23$height === void 0 ? 0 : _ref23$height;
                texCoordX1 = _tx / parentW;
                texCoordX2 = texCoordX1 + tw / parentW;
                texCoordY1 = _ty / parentH;
                texCoordY2 = texCoordY1 + th / parentH;
                texture = texture.parentTexture;
              }
              var resizeMode = (_textureOptions$resiz = textureOptions === null || textureOptions === void 0 ? void 0 : textureOptions.resizeMode) !== null && _textureOptions$resiz !== void 0 ? _textureOptions$resiz : false;
              if (texture instanceof ImageTexture) {
                if (resizeMode && texture.dimensions) {
                  var _texture$dimensions2 = texture.dimensions,
                    _tw = _texture$dimensions2.width,
                    _th = _texture$dimensions2.height;
                  if (resizeMode.type === 'cover') {
                    var scaleX = width / _tw;
                    var scaleY = height / _th;
                    var scale = Math.max(scaleX, scaleY);
                    var precision = 1 / scale;
                    // Determine based on width
                    if (scale && scaleX && scaleX < scale) {
                      var _resizeMode$clipX;
                      var desiredSize = precision * width;
                      texCoordX1 = (1 - desiredSize / _tw) * ((_resizeMode$clipX = resizeMode.clipX) !== null && _resizeMode$clipX !== void 0 ? _resizeMode$clipX : 0.5);
                      texCoordX2 = texCoordX1 + desiredSize / _tw;
                    }
                    // Determine based on height
                    if (scale && scaleY && scaleY < scale) {
                      var _resizeMode$clipY;
                      var _desiredSize = precision * height;
                      texCoordY1 = (1 - _desiredSize / _th) * ((_resizeMode$clipY = resizeMode.clipY) !== null && _resizeMode$clipY !== void 0 ? _resizeMode$clipY : 0.5);
                      texCoordY2 = texCoordY1 + _desiredSize / _th;
                    }
                  }
                }
              }
              // Flip texture coordinates if dictated by texture options
              if (flipX) {
                var _ref24 = [texCoordX2, texCoordX1];
                texCoordX1 = _ref24[0];
                texCoordX2 = _ref24[1];
              }
              if (flipY) {
                var _ref25 = [texCoordY2, texCoordY1];
                texCoordY1 = _ref25[0];
                texCoordY2 = _ref25[1];
              }
              var ctxTexture = texture.ctxTexture;
              assertTruthy(ctxTexture instanceof WebGlCoreCtxTexture);
              var textureIdx = this.addTexture(ctxTexture, bufferIdx);
              curRenderOp = this.curRenderOp;
              assertTruthy(curRenderOp);
              if (renderCoords) {
                var x1 = renderCoords.x1,
                  y1 = renderCoords.y1,
                  x2 = renderCoords.x2,
                  y2 = renderCoords.y2,
                  x3 = renderCoords.x3,
                  y3 = renderCoords.y3,
                  x4 = renderCoords.x4,
                  y4 = renderCoords.y4;
                // Upper-Left
                fQuadBuffer[bufferIdx++] = x1; // vertexX
                fQuadBuffer[bufferIdx++] = y1; // vertexY
                fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX
                fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY
                uiQuadBuffer[bufferIdx++] = colorTl; // color
                fQuadBuffer[bufferIdx++] = textureIdx; // texIndex
                // Upper-Right
                fQuadBuffer[bufferIdx++] = x2;
                fQuadBuffer[bufferIdx++] = y2;
                fQuadBuffer[bufferIdx++] = texCoordX2;
                fQuadBuffer[bufferIdx++] = texCoordY1;
                uiQuadBuffer[bufferIdx++] = colorTr;
                fQuadBuffer[bufferIdx++] = textureIdx;
                // Lower-Left
                fQuadBuffer[bufferIdx++] = x4;
                fQuadBuffer[bufferIdx++] = y4;
                fQuadBuffer[bufferIdx++] = texCoordX1;
                fQuadBuffer[bufferIdx++] = texCoordY2;
                uiQuadBuffer[bufferIdx++] = colorBl;
                fQuadBuffer[bufferIdx++] = textureIdx;
                // Lower-Right
                fQuadBuffer[bufferIdx++] = x3;
                fQuadBuffer[bufferIdx++] = y3;
                fQuadBuffer[bufferIdx++] = texCoordX2;
                fQuadBuffer[bufferIdx++] = texCoordY2;
                uiQuadBuffer[bufferIdx++] = colorBr;
                fQuadBuffer[bufferIdx++] = textureIdx;
              } else if (tb !== 0 || tc !== 0) {
                // Upper-Left
                fQuadBuffer[bufferIdx++] = tx; // vertexX
                fQuadBuffer[bufferIdx++] = ty; // vertexY
                fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX
                fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY
                uiQuadBuffer[bufferIdx++] = colorTl; // color
                fQuadBuffer[bufferIdx++] = textureIdx; // texIndex
                // Upper-Right
                fQuadBuffer[bufferIdx++] = tx + width * ta;
                fQuadBuffer[bufferIdx++] = ty + width * tc;
                fQuadBuffer[bufferIdx++] = texCoordX2;
                fQuadBuffer[bufferIdx++] = texCoordY1;
                uiQuadBuffer[bufferIdx++] = colorTr;
                fQuadBuffer[bufferIdx++] = textureIdx;
                // Lower-Left
                fQuadBuffer[bufferIdx++] = tx + height * tb;
                fQuadBuffer[bufferIdx++] = ty + height * td;
                fQuadBuffer[bufferIdx++] = texCoordX1;
                fQuadBuffer[bufferIdx++] = texCoordY2;
                uiQuadBuffer[bufferIdx++] = colorBl;
                fQuadBuffer[bufferIdx++] = textureIdx;
                // Lower-Right
                fQuadBuffer[bufferIdx++] = tx + width * ta + height * tb;
                fQuadBuffer[bufferIdx++] = ty + width * tc + height * td;
                fQuadBuffer[bufferIdx++] = texCoordX2;
                fQuadBuffer[bufferIdx++] = texCoordY2;
                uiQuadBuffer[bufferIdx++] = colorBr;
                fQuadBuffer[bufferIdx++] = textureIdx;
              } else {
                // Calculate the right corner of the quad
                // multiplied by the scale
                var rightCornerX = tx + width * ta;
                var rightCornerY = ty + height * td;
                // Upper-Left
                fQuadBuffer[bufferIdx++] = tx; // vertexX
                fQuadBuffer[bufferIdx++] = ty; // vertexY
                fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX
                fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY
                uiQuadBuffer[bufferIdx++] = colorTl; // color
                fQuadBuffer[bufferIdx++] = textureIdx; // texIndex
                // Upper-Right
                fQuadBuffer[bufferIdx++] = rightCornerX;
                fQuadBuffer[bufferIdx++] = ty;
                fQuadBuffer[bufferIdx++] = texCoordX2;
                fQuadBuffer[bufferIdx++] = texCoordY1;
                uiQuadBuffer[bufferIdx++] = colorTr;
                fQuadBuffer[bufferIdx++] = textureIdx;
                // Lower-Left
                fQuadBuffer[bufferIdx++] = tx;
                fQuadBuffer[bufferIdx++] = rightCornerY;
                fQuadBuffer[bufferIdx++] = texCoordX1;
                fQuadBuffer[bufferIdx++] = texCoordY2;
                uiQuadBuffer[bufferIdx++] = colorBl;
                fQuadBuffer[bufferIdx++] = textureIdx;
                // Lower-Right
                fQuadBuffer[bufferIdx++] = rightCornerX;
                fQuadBuffer[bufferIdx++] = rightCornerY;
                fQuadBuffer[bufferIdx++] = texCoordX2;
                fQuadBuffer[bufferIdx++] = texCoordY2;
                uiQuadBuffer[bufferIdx++] = colorBr;
                fQuadBuffer[bufferIdx++] = textureIdx;
              }
              // Update the length of the current render op
              curRenderOp.length += WORDS_PER_QUAD;
              curRenderOp.numQuads++;
              this.curBufferIdx = bufferIdx;
            }
            /**
             * Replace the existing RenderOp with a new one that uses the specified Shader
             * and starts at the specified buffer index.
             *
             * @param shader
             * @param bufferIdx
             */
          }, {
            key: "newRenderOp",
            value: function newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions) {
              var curRenderOp = new WebGlCoreRenderOp(this.glw, this.options, this.quadBufferCollection, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, 0,
              // Z-Index is only used for explictly added Render Ops
              renderToTexture, parentHasRenderTexture, framebufferDimensions);
              this.curRenderOp = curRenderOp;
              this.renderOps.push(curRenderOp);
            }
            /**
             * Add a texture to the current RenderOp. If the texture cannot be added to the
             * current RenderOp, a new RenderOp will be created and the texture will be added
             * to that one.
             *
             * If the texture cannot be added to the new RenderOp, an error will be thrown.
             *
             * @param texture
             * @param bufferIdx
             * @param recursive
             * @returns Assigned Texture Index of the texture in the render op
             */
          }, {
            key: "addTexture",
            value: function addTexture(texture, bufferIdx, recursive) {
              var curRenderOp = this.curRenderOp;
              assertTruthy(curRenderOp);
              var textureIdx = curRenderOp.addTexture(texture);
              // TODO: Refactor to be more DRY
              if (textureIdx === 0xffffffff) {
                if (recursive) {
                  throw new Error('Unable to add texture to render op');
                }
                var shader = curRenderOp.shader,
                  shaderProps = curRenderOp.shaderProps,
                  dimensions = curRenderOp.dimensions,
                  clippingRect = curRenderOp.clippingRect,
                  alpha = curRenderOp.alpha;
                this.newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx);
                return this.addTexture(texture, bufferIdx, true);
              }
              return textureIdx;
            }
            /**
             * Test if the current Render operation can be reused for the specified parameters.
             * @param params
             * @returns
             */
          }, {
            key: "reuseRenderOp",
            value: function reuseRenderOp(params) {
              var _this$curRenderOp;
              var shader = params.shader,
                shaderProps = params.shaderProps,
                parentHasRenderTexture = params.parentHasRenderTexture,
                rtt = params.rtt,
                clippingRect = params.clippingRect;
              var targetShader = shader || this.defaultShader;
              // Switching shader program will require a new render operation
              if (((_this$curRenderOp = this.curRenderOp) === null || _this$curRenderOp === void 0 ? void 0 : _this$curRenderOp.shader) !== targetShader) {
                return false;
              }
              // Switching clipping rect will require a new render operation
              if (!compareRect(this.curRenderOp.clippingRect, clippingRect)) {
                return false;
              }
              // Force new render operation if rendering to texture
              // @todo: This needs to be improved, render operations could also be reused
              // for rendering to texture
              if (parentHasRenderTexture || rtt) {
                return false;
              }
              // Check if the shader can batch the shader properties
              if (this.curRenderOp.shader !== this.defaultShader && (!shaderProps || !this.curRenderOp.shader.canBatchShaderProps(this.curRenderOp.shaderProps, shaderProps))) {
                return false;
              }
              // Render operation can be reused
              return true;
            }
            /**
             * add RenderOp to the render pipeline
             */
          }, {
            key: "addRenderOp",
            value: function addRenderOp(renderable) {
              this.renderOps.push(renderable);
              this.curRenderOp = null;
            }
            /**
             * Render the current set of RenderOps to render to the specified surface.
             *
             * TODO: 'screen' is the only supported surface at the moment.
             *
             * @param surface
             */
          }, {
            key: "render",
            value: function render() {
              var _this$quadBufferColle;
              var surface = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'screen';
              var glw = this.glw,
                quadBuffer = this.quadBuffer;
              var arr = new Float32Array(quadBuffer, 0, this.curBufferIdx);
              var buffer = (_this$quadBufferColle = this.quadBufferCollection.getBuffer('a_position')) !== null && _this$quadBufferColle !== void 0 ? _this$quadBufferColle : null;
              glw.arrayBufferData(buffer, arr, glw.STATIC_DRAW);
              this.renderOps.forEach(function (renderOp, i) {
                renderOp.draw();
              });
              this.quadBufferUsage = this.curBufferIdx * arr.BYTES_PER_ELEMENT;
            }
          }, {
            key: "renderToTexture",
            value: function renderToTexture(node) {
              for (var i = 0; i < this.rttNodes.length; i++) {
                if (this.rttNodes[i] === node) {
                  return;
                }
              }
              // @todo: Better bottom up rendering order
              this.rttNodes.unshift(node);
            }
          }, {
            key: "renderRTTNodes",
            value: function renderRTTNodes() {
              var glw = this.glw;
              this.stage;
              // Render all associated RTT nodes to their textures
              for (var i = 0; i < this.rttNodes.length; i++) {
                var node = this.rttNodes[i];
                // Skip nodes that don't have RTT updates
                if (!node || !node.hasRTTupdates) {
                  continue;
                }
                // Set the active RTT node to the current node
                // So we can prevent rendering children of nested RTT nodes
                this.activeRttNode = node;
                assertTruthy(node.texture, 'RTT node missing texture');
                var ctxTexture = node.texture.ctxTexture;
                assertTruthy(ctxTexture instanceof WebGlCoreCtxRenderTexture);
                this.renderToTextureActive = true;
                // Bind the the texture's framebuffer
                glw.bindFramebuffer(ctxTexture.framebuffer);
                glw.viewport(0, 0, ctxTexture.w, ctxTexture.h);
                glw.clear();
                // Render all associated quads to the texture
                for (var _i2 = 0; _i2 < node.children.length; _i2++) {
                  var child = node.children[_i2];
                  if (!child) {
                    continue;
                  }
                  child.update(this.stage.deltaTime, {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0,
                    valid: false
                  });
                  this.stage.addQuads(child);
                  child.hasRTTupdates = false;
                }
                // Render all associated quads to the texture
                this.render();
                // Reset render operations
                this.renderOps.length = 0;
                node.hasRTTupdates = false;
              }
              // Bind the default framebuffer
              glw.bindFramebuffer(null);
              glw.viewport(0, 0, this.glw.canvas.width, this.glw.canvas.height);
              this.renderToTextureActive = false;
            }
          }, {
            key: "removeRTTNode",
            value: function removeRTTNode(node) {
              var index = this.rttNodes.indexOf(node);
              if (index === -1) {
                return;
              }
              this.rttNodes.splice(index, 1);
            }
          }, {
            key: "getBufferInfo",
            value: function getBufferInfo() {
              var bufferInfo = {
                totalAvailable: this.stage.options.quadBufferSize,
                totalUsed: this.quadBufferUsage
              };
              return bufferInfo;
            }
          }, {
            key: "getDefShaderCtr",
            value: function getDefShaderCtr() {
              return this.defShaderCtrl;
            }
          }]);
        }(CoreRenderer);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var SpecialCodepoints = {
          LINE_FEED: 0x0a,
          CARRIAGE_RETURN: 0x0d,
          SPACE: 0x20,
          TAB: 0x09,
          ZERO_WIDTH_SPACE: 0x200b,
          ZERO_WIDTH_NON_JOINER: 0x200c,
          ZERO_WIDTH_JOINER: 0x200d,
          LEFT_TO_RIGHT_MARK: 0x200e,
          RIGHT_TO_LEFT_MARK: 0x200f,
          LEFT_TO_RIGHT_EMBEDDING: 0x202a,
          RIGHT_TO_LEFT_EMBEDDING: 0x202b,
          POP_DIRECTIONAL_FORMATTING: 0x202c,
          LEFT_TO_RIGHT_OVERRIDE: 0x202d,
          RIGHT_TO_LEFT_OVERRIDE: 0x202e,
          LINE_SEPARATOR: 0x2028,
          PARAGRAPH_SEPARATOR: 0x2029,
          OBJECT_REPLACEMENT_CHARACTER: 0xfffc,
          REPLACEMENT_CHARACTER: 0xfffd,
          ZERO_WIDTH_NO_BREAK_SPACE: 0xfeff,
          LEFT_TO_RIGHT_ISOLATE: 0x2066,
          RIGHT_TO_LEFT_ISOLATE: 0x2067,
          FIRST_STRONG_ISOLATE: 0x2068,
          POP_DIRECTIONAL_ISOLATE: 0x2069,
          INHIBIT_SYMMETRIC_SWAPPING: 0x206a,
          ACTIVATE_SYMMETRIC_SWAPPING: 0x206b,
          INHIBIT_ARABIC_FORM_SHAPING: 0x206c,
          ACTIVATE_ARABIC_FORM_SHAPING: 0x206d,
          NATIONAL_DIGIT_SHAPES: 0x206e,
          NOMINAL_DIGIT_SHAPES: 0x206f,
          LEFT_TO_RIGHT_BOUNDARY: 0x200e,
          RIGHT_TO_LEFT_BOUNDARY: 0x200f
        };

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var FontShaper = /*#__PURE__*/_createClass(function FontShaper() {
          _classCallCheck(this, FontShaper);
        });
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var SdfFontShaper = /*#__PURE__*/function (_FontShaper) {
          function SdfFontShaper(data, glyphMap) {
            var _this53;
            _classCallCheck(this, SdfFontShaper);
            _this53 = _callSuper(this, SdfFontShaper);
            _defineProperty(_this53, "data", void 0);
            _defineProperty(_this53, "glyphMap", void 0);
            _defineProperty(_this53, "kernings", void 0);
            _this53.data = data;
            _this53.glyphMap = glyphMap;
            var kernings = _this53.kernings = {};
            data.kernings.forEach(function (kerning) {
              var second = kerning.second;
              var firsts = kernings[second] = kernings[second] || {};
              firsts[kerning.first] = kerning.amount;
            });
            _this53.kernings = kernings;
            return _this53;
          }
          _inherits(SdfFontShaper, _FontShaper);
          return _createClass(SdfFontShaper, [{
            key: "shapeText",
            value: /*#__PURE__*/_regeneratorRuntime().mark(function shapeText(props, codepoints) {
              var codepointResult, lastGlyphId, codepoint, glyph, _this$kernings$glyph$, kerning;
              return _regeneratorRuntime().wrap(function shapeText$(_context13) {
                while (1) switch (_context13.prev = _context13.next) {
                  case 0:
                    lastGlyphId = undefined;
                  case 1:
                    if (!((codepointResult = codepoints.peek()) && !codepointResult.done)) {
                      _context13.next = 17;
                      break;
                    }
                    codepoint = codepointResult.value;
                    glyph = this.glyphMap.get(codepoint);
                    codepoints.next();
                    if (!(glyph !== undefined)) {
                      _context13.next = 12;
                      break;
                    }
                    // We found a glyph for this codepoint
                    // Yield the mapped glyph info
                    /**
                     * Kerning includes any possible additional letter spacing
                     */
                    kerning = lastGlyphId !== undefined ? (((_this$kernings$glyph$ = this.kernings[glyph.id]) === null || _this$kernings$glyph$ === void 0 ? void 0 : _this$kernings$glyph$[lastGlyphId]) || 0) + props.letterSpacing : 0;
                    lastGlyphId = glyph.id;
                    _context13.next = 10;
                    return {
                      mapped: true,
                      glyphId: glyph.id,
                      codepoint: codepoint,
                      cluster: codepoints.lastIndex,
                      xAdvance: glyph.xadvance + kerning,
                      yAdvance: 0,
                      xOffset: glyph.xoffset + kerning,
                      yOffset: glyph.yoffset,
                      xBearing: 0,
                      yBearing: 0,
                      width: glyph.width,
                      height: glyph.height
                    };
                  case 10:
                    _context13.next = 15;
                    break;
                  case 12:
                    // We didn't find a glyph for this codepoint
                    // Yield the unmapped codepoint info
                    // If this codepoint is a linebreak, we should reset the last glyph id
                    // so that the next glyph will not be kerned with the last glyph of the
                    // previous line.
                    if (codepoint === SpecialCodepoints.LINE_FEED) {
                      lastGlyphId = undefined;
                    }
                    _context13.next = 15;
                    return {
                      mapped: false,
                      codepoint: codepoint,
                      cluster: codepoints.lastIndex
                    };
                  case 15:
                    _context13.next = 1;
                    break;
                  case 17:
                  case "end":
                    return _context13.stop();
                }
              }, shapeText, this);
            })
          }]);
        }(FontShaper);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // import type { Renderer } from '../../../Renderer';
        var SdfTrFontFace = /*#__PURE__*/function (_TrFontFace3) {
          function SdfTrFontFace(type, options) {
            var _this54;
            _classCallCheck(this, SdfTrFontFace);
            _this54 = _callSuper(this, SdfTrFontFace, [options]);
            _defineProperty(_this54, "type", void 0);
            _defineProperty(_this54, "texture", void 0);
            /**
             * Height of the tallest character in the font including the whitespace above it
             * in SDF/vertex units.
             */
            _defineProperty(_this54, "maxCharHeight", 0);
            _defineProperty(_this54, "data", void 0);
            _defineProperty(_this54, "shaper", void 0);
            _defineProperty(_this54, "glyphMap", new Map());
            var atlasUrl = options.atlasUrl,
              atlasDataUrl = options.atlasDataUrl,
              stage = options.stage;
            _this54.type = type;
            var renderer = stage.renderer;
            assertTruthy(renderer instanceof WebGlCoreRenderer, 'SDF Font Faces can only be used with the WebGL Renderer');
            // Load image
            _this54.texture = stage.txManager.loadTexture('ImageTexture', {
              src: atlasUrl,
              // IMPORTANT: The SDF shader requires the alpha channel to NOT be
              // premultiplied on the atlas texture. If it is premultiplied, the
              // rendering of SDF glyphs (especially single-channel SDF fonts) will
              // be very jagged.
              premultiplyAlpha: false
            });
            _this54.texture.on('loaded', function () {
              _this54.checkLoaded();
              // Make sure we mark the stage for a re-render (in case the font's texture was freed and reloaded)
              stage.requestRender();
            });
            // Pre-load it
            _this54.texture.ctxTexture.load();
            // Set this.data to the fetched data from dataUrl
            fetch(atlasDataUrl).then( /*#__PURE__*/function () {
              var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(response) {
                var maxCharHeight, _this54$data, _this54$data$lightnin, ascender, descender, lineGap, unitsPerEm;
                return _regeneratorRuntime().wrap(function _callee13$(_context14) {
                  while (1) switch (_context14.prev = _context14.next) {
                    case 0:
                      _context14.next = 2;
                      return response.json();
                    case 2:
                      _this54.data = _context14.sent;
                      assertTruthy(_this54.data);
                      // Add all the glyphs to the glyph map
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      maxCharHeight = 0;
                      _this54.data.chars.forEach(function (glyph) {
                        _this54.glyphMap.set(glyph.id, glyph);
                        var charHeight = glyph.yoffset + glyph.height;
                        if (charHeight > maxCharHeight) {
                          maxCharHeight = charHeight;
                        }
                      });
                      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                      _this54.maxCharHeight = maxCharHeight;
                      // We know `data` is defined here, because we just set it
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      _this54.shaper = new SdfFontShaper(_this54.data, _this54.glyphMap);
                      // If the metrics aren't provided explicitly in the font face options,
                      // Gather them from the metrics added by the msdf-generator tool ()
                      // If they are missing then we throw an error.
                      if (_this54.metrics) {
                        _context14.next = 15;
                        break;
                      }
                      if (!((_this54$data = _this54.data) !== null && _this54$data !== void 0 && _this54$data.lightningMetrics)) {
                        _context14.next = 14;
                        break;
                      }
                      _this54$data$lightnin = _this54.data.lightningMetrics, ascender = _this54$data$lightnin.ascender, descender = _this54$data$lightnin.descender, lineGap = _this54$data$lightnin.lineGap, unitsPerEm = _this54$data$lightnin.unitsPerEm;
                      _this54.metrics = {
                        ascender: ascender / unitsPerEm,
                        descender: descender / unitsPerEm,
                        lineGap: lineGap / unitsPerEm
                      };
                      _context14.next = 15;
                      break;
                    case 14:
                      throw new Error("Font metrics not found in ".concat(_this54.type, " font ").concat(_this54.fontFamily, ". ") + 'Make sure you are using the latest version of the Lightning ' + '3 `msdf-generator` tool to generate your SDF fonts.');
                    case 15:
                      _this54.checkLoaded();
                    case 16:
                    case "end":
                      return _context14.stop();
                  }
                }, _callee13);
              }));
              return function (_x6) {
                return _ref26.apply(this, arguments);
              };
            }()).catch(console.error);
            return _this54;
          }
          _inherits(SdfTrFontFace, _TrFontFace3);
          return _createClass(SdfTrFontFace, [{
            key: "getAtlasEntry",
            value: function getAtlasEntry(glyphId) {
              var glyph = this.glyphMap.get(glyphId);
              if (glyph === undefined) {
                throw new Error("Glyph ".concat(glyphId, " not found in font ").concat(this.fontFamily));
              }
              return {
                x: glyph.x,
                y: glyph.y,
                width: glyph.width,
                height: glyph.height
              };
            }
          }, {
            key: "checkLoaded",
            value: function checkLoaded() {
              if (this.loaded) return;
              if (this.texture.state === 'loaded' && this.data) {
                this.loaded = true;
                this.emit('loaded');
              }
            }
          }]);
        }(TrFontFace);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Number of floating point numbers that represent a single glyph in the SDF vertex buffer.
         *
         * @remarks
         * The vertex buffer contains:
         *  - 6 vertex positions
         *  - 6 texture coordinates
         *  - = 12 positions/coordinates per glyph
         *
         * Each vertex position and texture coordinate consist of 2 floating point numbers (x/y).
         * So there are 12 * 2 = 24 floating point numbers that make up a single glyph.
         */
        var FLOATS_PER_GLYPH = 24;

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Gets the start conditions for the layout loop.
         *
         * @remarks
         * Returns `undefined` if the layout loop should not be run.
         *
         * @param fontSize
         * @param fontSizeRatio
         * @param sdfLineHeight
         * @param renderWindow
         * @param lineCache
         * @param textH
         * @returns
         */
        function getStartConditions(sdfFontSize, sdfLineHeight, fontFace, verticalAlign, offsetY, fontSizeRatio, renderWindow, lineCache, textH) {
          // State variables
          var startLineIndex = Math.min(Math.max(renderWindow.firstLineIdx, 0), lineCache.length);
          var sdfStartX = 0;
          var metrics = fontFace.metrics;
          assertTruthy(metrics, 'Font metrics not loaded');
          assertTruthy(fontFace.data, 'Font data not loaded');
          /**
           * Bare line height is the distance between the ascender and descender of the font.
           * without the line gap metric.
           */
          var sdfBareLineHeight = (metrics.ascender - metrics.descender) * sdfFontSize;
          var sdfVerticalAlignYOffset = 0;
          if (verticalAlign === 'middle') {
            sdfVerticalAlignYOffset = (sdfLineHeight - sdfBareLineHeight) / 2;
          } else if (verticalAlign === 'bottom') {
            sdfVerticalAlignYOffset = sdfLineHeight - sdfBareLineHeight;
          }
          var sdfOffsetY = offsetY / fontSizeRatio;
          /**
           * This is the position from the top of the text drawing line to where the
           * baseline of the text will be according to the encoded positioning data for
           * each glyph in the SDF data. This also happens to be the ascender value
           * that is encoded into the font data.
           */
          var sdfEncodedAscender = fontFace.data.common.base;
          /**
           * This is the ascender that is configured and overridable in the font face.
           */
          var sdfConfiguredAscender = metrics.ascender * sdfFontSize;
          /**
           * If the configured ascender is different from the SDF data's encoded
           * ascender, the offset of the text will be adjusted by the difference.
           */
          var sdfAscenderAdjOffset = sdfConfiguredAscender - sdfEncodedAscender;
          var sdfStartY = sdfOffsetY + sdfAscenderAdjOffset + startLineIndex * sdfLineHeight + sdfVerticalAlignYOffset; // TODO: Figure out what determines the initial y offset of text.
          // Don't attempt to render anything if we know we're starting past the established end of the text
          if (textH && sdfStartY >= textH / fontSizeRatio) {
            return;
          }
          return {
            sdfX: sdfStartX,
            sdfY: sdfStartY,
            lineIndex: startLineIndex
          };
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A wrapper Generator class that makes a generator peekable.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var PeekableIterator = /*#__PURE__*/function () {
          function PeekableIterator(iterator) {
            var indexBase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            _classCallCheck(this, PeekableIterator);
            _defineProperty(this, "iterator", void 0);
            _defineProperty(this, "peekBuffer", []);
            _defineProperty(this, "_lastIndex", void 0);
            this.iterator = iterator;
            this.iterator = iterator;
            this._lastIndex = indexBase - 1;
            this.peekBuffer = [];
          }
          return _createClass(PeekableIterator, [{
            key: "next",
            value: function next() {
              var nextResult = this.peekBuffer.length > 0 ?
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              this.peekBuffer.pop() : this.iterator.next();
              if (nextResult.done) {
                this._lastIndex = -1;
              } else {
                this._lastIndex++;
              }
              return nextResult;
            }
          }, {
            key: "peek",
            value: function peek() {
              if (this.peekBuffer.length > 0) {
                // We know that the buffer is not empty, so we can safely use the
                // non-null assertion operator
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return this.peekBuffer[0];
              }
              var result = this.iterator.next();
              this.peekBuffer.push(result);
              return result;
            }
          }, {
            key: "lastIndex",
            get: function get() {
              return this._lastIndex;
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // Reversible Generator Wrapper Class
        /**
         * Generator function that yields each Unicode code point in the given string.
         */
        function getUnicodeCodepoints(text) {
          var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
            var i, codePoint;
            return _regeneratorRuntime().wrap(function _callee14$(_context15) {
              while (1) switch (_context15.prev = _context15.next) {
                case 0:
                  i = start;
                case 1:
                  if (!(i < text.length)) {
                    _context15.next = 10;
                    break;
                  }
                  codePoint = text.codePointAt(i);
                  if (!(codePoint === undefined)) {
                    _context15.next = 5;
                    break;
                  }
                  throw new Error('Invalid Unicode code point');
                case 5:
                  _context15.next = 7;
                  return codePoint;
                case 7:
                  i += codePoint <= 0xffff ? 1 : 2;
                  _context15.next = 1;
                  break;
                case 10:
                case "end":
                  return _context15.stop();
              }
            }, _callee14);
          })();
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Measures a single-line of text width ignoring any unmapped glyphs including line breaks
         *
         * @param text
         * @param shaperProps
         * @param shaper
         * @returns
         */
        function measureText(text, shaperProps, shaper) {
          var glyphs = shaper.shapeText(shaperProps, new PeekableIterator(getUnicodeCodepoints(text, 0), 0));
          var width = 0;
          var _iterator9 = _createForOfIteratorHelper(glyphs),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var glyph = _step9.value;
              if (glyph.mapped) {
                width += glyph.xAdvance;
              }
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
          return width;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function layoutText(curLineIndex, startX, startY, text, textAlign, width, height, fontSize, lineHeight, letterSpacing,
        /**
         * Mutated
         */
        vertexBuffer, contain,
        /**
         * Mutated
         */
        lineCache, rwSdf, trFontFace, forceFullLayoutCalc, scrollable, overflowSuffix, maxLines) {
          assertTruthy(trFontFace, 'Font face must be loaded');
          assertTruthy(trFontFace.loaded, 'Font face must be loaded');
          assertTruthy(trFontFace.data, 'Font face must be loaded');
          assertTruthy(trFontFace.shaper, 'Font face must be loaded');
          // Regardless of fontSize (or other scaling properties), we layout the vertices of each glyph
          // using the fixed coordinate space determined by font size used to produce the atlas.
          // Scaling for display is handled by shader uniforms inexpensively.
          // So we have:
          //  - vertex space: the space in which the vertices of each glyph are laid out
          //  - screen space: the screen pixel space
          // Input properties such as x, y, w, fontSize, letterSpacing, etc. are all expressed in screen space.
          // We convert these to the vertex space by dividing them the `fontSizeRatio` factor.
          /**
           * See above
           */
          var fontSizeRatio = fontSize / trFontFace.data.info.size;
          /**
           * `lineHeight` in vertex coordinates
           */
          var vertexLineHeight = lineHeight / fontSizeRatio;
          /**
           * `w` in vertex coordinates
           */
          var vertexW = width / fontSizeRatio;
          /**
           * `letterSpacing` in vertex coordinates
           */
          var vertexLSpacing = letterSpacing / fontSizeRatio;
          var startingLineCacheEntry = lineCache[curLineIndex];
          var startingCodepointIndex = (startingLineCacheEntry === null || startingLineCacheEntry === void 0 ? void 0 : startingLineCacheEntry.codepointIndex) || 0;
          var startingMaxX = (startingLineCacheEntry === null || startingLineCacheEntry === void 0 ? void 0 : startingLineCacheEntry.maxX) || 0;
          var startingMaxY = (startingLineCacheEntry === null || startingLineCacheEntry === void 0 ? void 0 : startingLineCacheEntry.maxY) || 0;
          var maxX = startingMaxX;
          var maxY = startingMaxY;
          var curX = startX;
          var curY = startY;
          var bufferOffset = 0;
          /**
           * Buffer offset to last word boundry. This is -1 when we aren't in a word boundry.
           */
          var lastWord = {
            codepointIndex: -1,
            bufferOffset: -1,
            xStart: -1
          };
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          var shaper = trFontFace.shaper;
          var shaperProps = {
            letterSpacing: vertexLSpacing
          };
          // Get glyphs
          var glyphs = shaper.shapeText(shaperProps, new PeekableIterator(getUnicodeCodepoints(text, startingCodepointIndex), startingCodepointIndex));
          var glyphResult;
          var curLineBufferStart = -1;
          var bufferLineInfos = [];
          var vertexTruncateHeight = height / fontSizeRatio;
          var overflowSuffVertexWidth = measureText(overflowSuffix, shaperProps, shaper);
          // Line-by-line layout
          var moreLines = true;
          while (moreLines) {
            var nextLineWillFit = (maxLines === 0 || curLineIndex + 1 < maxLines) && (contain !== 'both' || scrollable || curY + vertexLineHeight + trFontFace.maxCharHeight <= vertexTruncateHeight);
            var lineVertexW = nextLineWillFit ? vertexW : vertexW - overflowSuffVertexWidth;
            /**
             * Vertex X position to the beginning of the last word boundary. This becomes -1 when we start traversing a word.
             */
            var xStartLastWordBoundary = 0;
            var lineIsBelowWindowTop = curY + trFontFace.maxCharHeight >= rwSdf.y1;
            var lineIsAboveWindowBottom = curY <= rwSdf.y2;
            var lineIsWithinWindow = lineIsBelowWindowTop && lineIsAboveWindowBottom;
            // Layout glyphs in this line
            // Any break statements in this while loop will trigger a line break
            while ((glyphResult = glyphs.next()) && !glyphResult.done) {
              var glyph = glyphResult.value;
              if (curLineIndex === lineCache.length) {
                lineCache.push({
                  codepointIndex: glyph.cluster,
                  maxY: maxY,
                  maxX: maxX
                });
              } else if (curLineIndex > lineCache.length) {
                throw new Error('Unexpected lineCache length');
              }
              // If we encounter a word boundary (white space or newline) we invalidate
              // the lastWord and set the xStartLastWordBoundary if we haven't already.
              if (glyph.codepoint === 32 || glyph.codepoint === 10) {
                if (lastWord.codepointIndex !== -1) {
                  lastWord.codepointIndex = -1;
                  xStartLastWordBoundary = curX;
                }
              } else if (lastWord.codepointIndex === -1) {
                lastWord.codepointIndex = glyph.cluster;
                lastWord.bufferOffset = bufferOffset;
                lastWord.xStart = xStartLastWordBoundary;
              }
              if (glyph.mapped) {
                // Mapped glyph
                var charEndX = curX + glyph.xOffset + glyph.width;
                // Word wrap check
                if (
                // We are containing the text
                contain !== 'none' &&
                // The current glyph reaches outside the contained width
                charEndX >= lineVertexW &&
                // There is a last word that we can break to the next line
                lastWord.codepointIndex !== -1 &&
                // Prevents infinite loop when a single word is longer than the width
                lastWord.xStart > 0) {
                  // The current word is about to go off the edge of the container width
                  // Reinitialize the iterator starting at the last word
                  // and proceeding to the next line
                  if (nextLineWillFit) {
                    glyphs = shaper.shapeText(shaperProps, new PeekableIterator(getUnicodeCodepoints(text, lastWord.codepointIndex), lastWord.codepointIndex));
                    bufferOffset = lastWord.bufferOffset;
                    break;
                  } else {
                    glyphs = shaper.shapeText(shaperProps, new PeekableIterator(getUnicodeCodepoints(overflowSuffix, 0), 0));
                    curX = lastWord.xStart;
                    bufferOffset = lastWord.bufferOffset;
                    // HACK: For the rest of the line when inserting the overflow suffix,
                    // set contain = 'none' to prevent an infinite loop.
                    contain = 'none';
                  }
                } else {
                  // This glyph fits, so we can add it to the buffer
                  var quadX = curX + glyph.xOffset;
                  var quadY = curY + glyph.yOffset;
                  // Only add to buffer for rendering if the line is within the render window
                  if (lineIsWithinWindow) {
                    if (curLineBufferStart === -1) {
                      curLineBufferStart = bufferOffset;
                    }
                    var atlasEntry = trFontFace.getAtlasEntry(glyph.glyphId);
                    // Add texture coordinates
                    var u = atlasEntry.x / trFontFace.data.common.scaleW;
                    var v = atlasEntry.y / trFontFace.data.common.scaleH;
                    var uvWidth = atlasEntry.width / trFontFace.data.common.scaleW;
                    var uvHeight = atlasEntry.height / trFontFace.data.common.scaleH;
                    // TODO: (Performance) We can optimize this by using ELEMENT_ARRAY_BUFFER
                    // eliminating the need to duplicate vertices
                    // Top-left
                    vertexBuffer[bufferOffset++] = quadX;
                    vertexBuffer[bufferOffset++] = quadY;
                    vertexBuffer[bufferOffset++] = u;
                    vertexBuffer[bufferOffset++] = v;
                    // Top-right
                    vertexBuffer[bufferOffset++] = quadX + glyph.width;
                    vertexBuffer[bufferOffset++] = quadY;
                    vertexBuffer[bufferOffset++] = u + uvWidth;
                    vertexBuffer[bufferOffset++] = v;
                    // Bottom-left
                    vertexBuffer[bufferOffset++] = quadX;
                    vertexBuffer[bufferOffset++] = quadY + glyph.height;
                    vertexBuffer[bufferOffset++] = u;
                    vertexBuffer[bufferOffset++] = v + uvHeight;
                    // Bottom-right
                    vertexBuffer[bufferOffset++] = quadX + glyph.width;
                    vertexBuffer[bufferOffset++] = quadY + glyph.height;
                    vertexBuffer[bufferOffset++] = u + uvWidth;
                    vertexBuffer[bufferOffset++] = v + uvHeight;
                  }
                  maxY = Math.max(maxY, quadY + glyph.height);
                  maxX = Math.max(maxX, quadX + glyph.width);
                  curX += glyph.xAdvance;
                }
              } else {
                // Unmapped character
                // Handle newlines
                if (glyph.codepoint === 10) {
                  if (nextLineWillFit) {
                    // The whole line fit, so we can break to the next line
                    break;
                  } else {
                    // The whole line won't fit, so we need to add the overflow suffix
                    glyphs = shaper.shapeText(shaperProps, new PeekableIterator(getUnicodeCodepoints(overflowSuffix, 0), 0));
                    // HACK: For the rest of the line when inserting the overflow suffix,
                    // set contain = 'none' to prevent an infinite loop.
                    contain = 'none';
                  }
                }
              }
            }
            // Prepare for the next line...
            if (curLineBufferStart !== -1) {
              bufferLineInfos.push({
                bufferStart: curLineBufferStart,
                bufferEnd: bufferOffset
              });
              curLineBufferStart = -1;
            }
            curX = 0;
            curY += vertexLineHeight;
            curLineIndex++;
            lastWord.codepointIndex = -1;
            xStartLastWordBoundary = 0;
            // Figure out if there are any more lines to render...
            if (!forceFullLayoutCalc && contain === 'both' && curY > rwSdf.y2) {
              // Stop layout calculation early (for performance purposes) if:
              // - We're not forcing a full layout calculation (for width/height calculation)
              // - ...and we're containing the text vertically+horizontally (contain === 'both')
              // - ...and we have a render window
              // - ...and the next line is below the bottom of the render window
              moreLines = false;
            } else if (glyphResult && glyphResult.done) {
              // If we've reached the end of the text, we know we're done
              moreLines = false;
            } else if (!nextLineWillFit) {
              // If we're contained vertically+horizontally (contain === 'both')
              // but not scrollable and the next line won't fit, we're done.
              moreLines = false;
            }
          }
          // Use textAlign to determine if we need to adjust the x position of the text
          // in the buffer line by line
          if (textAlign === 'center') {
            var vertexTextW = contain === 'none' ? maxX : vertexW;
            for (var i = 0; i < bufferLineInfos.length; i++) {
              var line = bufferLineInfos[i];
              // - 4 = the x position of a rightmost vertex
              var lineWidth =
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              vertexBuffer[line.bufferEnd - 4] - vertexBuffer[line.bufferStart];
              var xOffset = (vertexTextW - lineWidth) / 2;
              for (var j = line.bufferStart; j < line.bufferEnd; j += 4) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                vertexBuffer[j] += xOffset;
              }
            }
          } else if (textAlign === 'right') {
            var _vertexTextW = contain === 'none' ? maxX : vertexW;
            for (var _i3 = 0; _i3 < bufferLineInfos.length; _i3++) {
              var _line = bufferLineInfos[_i3];
              var _lineWidth = _line.bufferEnd === _line.bufferStart ? 0 :
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              vertexBuffer[_line.bufferEnd - 4] - vertexBuffer[_line.bufferStart];
              var _xOffset = _vertexTextW - _lineWidth;
              for (var _j = _line.bufferStart; _j < _line.bufferEnd; _j += 4) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                vertexBuffer[_j] += _xOffset;
              }
            }
          }
          assertTruthy(glyphResult);
          return {
            bufferNumFloats: bufferOffset,
            bufferNumQuads: bufferOffset / 16,
            layoutNumCharacters: glyphResult.done ? text.length - startingCodepointIndex : glyphResult.value.cluster - startingCodepointIndex + 1,
            fullyProcessed: !!glyphResult.done,
            maxX: maxX,
            maxY: maxY,
            numLines: lineCache.length
          };
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Round up to the nearest multiple of the given number.
         *
         * @param value
         * @param multiple
         * @returns
         */
        function roundUpToMultiple(value, multiple) {
          return Math.ceil(value / multiple) * multiple;
        }
        /**
         * Round down to the nearest multiple of the given number.
         *
         * @param value
         * @param multiple
         * @returns
         */
        function roundDownToMultiple(value, multiple) {
          return Math.floor(value / multiple) * multiple;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Create a render window from the given parameters.
         *
         * @remarks
         * The render window is a rectangle that defines the area of the text that
         * should be rendered. It is used to skip rendering parts of the text that
         * are outside of the render window. The render window is relative to the
         * text's top left corner of the overrall text.
         *
         * @param x The x coordinate of the text element's top left corner relative to the screen.
         * @param y The y coordinate of the text element's top left corner relative to the screen.
         * @param scrollY The amount of pixels to scroll the text vertically.
         * @param lineHeight The number of extra lines to render above and below the visible window.
         * @param visibleWindow The visible window of the text element relative to the screen
         * @returns
         */
        function setRenderWindow(outRenderWindow, x, y, scrollY, lineHeight, bufferMargin, visibleWindow, fontSizeRatio) {
          var screen = outRenderWindow.screen,
            sdf = outRenderWindow.sdf;
          if (!isBoundPositive(visibleWindow)) {
            screen.x1 = 0;
            screen.y1 = 0;
            screen.x2 = 0;
            screen.y2 = 0;
            sdf.x1 = 0;
            sdf.y1 = 0;
            sdf.x2 = 0;
            sdf.y2 = 0;
            outRenderWindow.numLines = 0;
            outRenderWindow.firstLineIdx = 0;
          } else {
            var x1 = visibleWindow.x1 - x;
            var x2 = x1 + (visibleWindow.x2 - visibleWindow.x1);
            var y1Base = visibleWindow.y1 - y + scrollY;
            var y1 = roundDownToMultiple(y1Base - bufferMargin, lineHeight || 1);
            var y2 = roundUpToMultiple(y1Base + (visibleWindow.y2 - visibleWindow.y1) + bufferMargin, lineHeight || 1);
            screen.x1 = x1;
            screen.y1 = y1;
            screen.x2 = x2;
            screen.y2 = y2;
            sdf.x1 = x1 / fontSizeRatio;
            sdf.y1 = y1 / fontSizeRatio;
            sdf.x2 = x2 / fontSizeRatio;
            sdf.y2 = y2 / fontSizeRatio;
            outRenderWindow.numLines = Math.ceil((y2 - y1) / lineHeight);
            outRenderWindow.firstLineIdx = lineHeight ? Math.floor(y1 / lineHeight) : 0;
          }
          outRenderWindow.valid = true;
        }

        /**
         * Calculate the default line height given normalized font metrics
         *
         * @remarks
         * This method may be used for both the WebTrFontFace and SdfTrFontFace font types.
         *
         * @param metrics
         * @param fontSize
         * @returns
         */
        function calcDefaultLineHeight(metrics, fontSize) {
          return fontSize * (metrics.ascender - metrics.descender + metrics.lineGap);
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Ephemeral rect object used for calculations
         */
        var tmpRect = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
        /**
         * Singleton class for rendering text using signed distance fields.
         *
         * @remarks
         * SdfTextRenderer supports both single-channel and multi-channel signed distance fields.
         */
        var SdfTextRenderer = /*#__PURE__*/function (_TextRenderer2) {
          function SdfTextRenderer(stage) {
            var _this55;
            _classCallCheck(this, SdfTextRenderer);
            _this55 = _callSuper(this, SdfTextRenderer, [stage]);
            /**
             * Map of font family names to a set of font faces.
             */
            _defineProperty(_this55, "ssdfFontFamilies", {});
            _defineProperty(_this55, "msdfFontFamilies", {});
            _defineProperty(_this55, "fontFamilyArray", [_this55.ssdfFontFamilies, _this55.msdfFontFamilies]);
            _defineProperty(_this55, "sdfShader", void 0);
            _defineProperty(_this55, "rendererBounds", void 0);
            _defineProperty(_this55, "type", 'sdf');
            _this55.sdfShader = _this55.stage.shManager.loadShader('SdfShader').shader;
            _this55.rendererBounds = {
              x1: 0,
              y1: 0,
              x2: _this55.stage.options.appWidth,
              y2: _this55.stage.options.appHeight
            };
            return _this55;
          }
          //#region Overrides
          _inherits(SdfTextRenderer, _TextRenderer2);
          return _createClass(SdfTextRenderer, [{
            key: "getPropertySetters",
            value: function getPropertySetters() {
              var _this56 = this;
              return {
                fontFamily: function fontFamily(state, value) {
                  state.props.fontFamily = value;
                  _this56.releaseFontFace(state);
                  _this56.invalidateLayoutCache(state);
                },
                fontWeight: function fontWeight(state, value) {
                  state.props.fontWeight = value;
                  _this56.releaseFontFace(state);
                  _this56.invalidateLayoutCache(state);
                },
                fontStyle: function fontStyle(state, value) {
                  state.props.fontStyle = value;
                  _this56.releaseFontFace(state);
                  _this56.invalidateLayoutCache(state);
                },
                fontStretch: function fontStretch(state, value) {
                  state.props.fontStretch = value;
                  _this56.releaseFontFace(state);
                  _this56.invalidateLayoutCache(state);
                },
                fontSize: function fontSize(state, value) {
                  state.props.fontSize = value;
                  _this56.invalidateLayoutCache(state);
                },
                text: function text(state, value) {
                  state.props.text = value;
                  _this56.invalidateLayoutCache(state);
                },
                textAlign: function textAlign(state, value) {
                  state.props.textAlign = value;
                  _this56.invalidateLayoutCache(state);
                },
                color: function color(state, value) {
                  state.props.color = value;
                },
                x: function x(state, value) {
                  state.props.x = value;
                  if (state.elementBounds.valid) {
                    _this56.setElementBoundsX(state);
                    // Only schedule an update if the text is not already rendered
                    // (renderWindow is invalid) and the element possibly overlaps the screen
                    // This is to avoid unnecessary updates when we know text is off-screen
                    if (!state.renderWindow.valid && boundsOverlap(state.elementBounds, _this56.rendererBounds)) {
                      _this56.scheduleUpdateState(state);
                    }
                  }
                },
                y: function y(state, value) {
                  state.props.y = value;
                  if (state.elementBounds.valid) {
                    _this56.setElementBoundsY(state);
                    // See x() for explanation
                    if (!state.renderWindow.valid && boundsOverlap(state.elementBounds, _this56.rendererBounds)) {
                      _this56.scheduleUpdateState(state);
                    }
                  }
                },
                contain: function contain(state, value) {
                  state.props.contain = value;
                  _this56.invalidateLayoutCache(state);
                },
                width: function width(state, value) {
                  state.props.width = value;
                  // Only invalidate layout cache if we're containing in the horizontal direction
                  if (state.props.contain !== 'none') {
                    _this56.invalidateLayoutCache(state);
                  }
                },
                height: function height(state, value) {
                  state.props.height = value;
                  // Only invalidate layout cache if we're containing in the vertical direction
                  if (state.props.contain === 'both') {
                    _this56.invalidateLayoutCache(state);
                  }
                },
                offsetY: function offsetY(state, value) {
                  state.props.offsetY = value;
                  _this56.invalidateLayoutCache(state);
                },
                scrollable: function scrollable(state, value) {
                  state.props.scrollable = value;
                  _this56.invalidateLayoutCache(state);
                },
                scrollY: function scrollY(state, value) {
                  state.props.scrollY = value;
                  // Scrolling doesn't need to invalidate any caches, but it does need to
                  // schedule an update
                  _this56.scheduleUpdateState(state);
                },
                letterSpacing: function letterSpacing(state, value) {
                  state.props.letterSpacing = value;
                  _this56.invalidateLayoutCache(state);
                },
                lineHeight: function lineHeight(state, value) {
                  state.props.lineHeight = value;
                  state.resLineHeight = undefined;
                  _this56.invalidateLayoutCache(state);
                },
                maxLines: function maxLines(state, value) {
                  state.props.maxLines = value;
                  _this56.invalidateLayoutCache(state);
                },
                textBaseline: function textBaseline(state, value) {
                  state.props.textBaseline = value;
                  _this56.invalidateLayoutCache(state);
                },
                verticalAlign: function verticalAlign(state, value) {
                  state.props.verticalAlign = value;
                  _this56.invalidateLayoutCache(state);
                },
                overflowSuffix: function overflowSuffix(state, value) {
                  state.props.overflowSuffix = value;
                  _this56.invalidateLayoutCache(state);
                },
                debug: function debug(state, value) {
                  state.props.debug = value;
                }
              };
            }
          }, {
            key: "canRenderFont",
            value: function canRenderFont(props) {
              // TODO: Support matching on font stretch, weight and style (if/when needed)
              // For now we just match on the font family name
              // '$$SDF_FAILURE_TEST$$' is used to test the 'failure' event coming from text
              var fontFamily = props.fontFamily;
              return fontFamily in this.ssdfFontFamilies || fontFamily in this.msdfFontFamilies || fontFamily === '$$SDF_FAILURE_TEST$$';
            }
          }, {
            key: "isFontFaceSupported",
            value: function isFontFaceSupported(fontFace) {
              return fontFace instanceof SdfTrFontFace;
            }
          }, {
            key: "addFontFace",
            value: function addFontFace(fontFace) {
              // Make sure the font face is an SDF font face (it should have already passed
              // the `isFontFaceSupported` check)
              assertTruthy(fontFace instanceof SdfTrFontFace);
              var familyName = fontFace.fontFamily;
              var fontFamiles = fontFace.type === 'ssdf' ? this.ssdfFontFamilies : fontFace.type === 'msdf' ? this.msdfFontFamilies : undefined;
              if (!fontFamiles) {
                console.warn("Invalid font face type: ".concat(fontFace.type));
                return;
              }
              var faceSet = fontFamiles[familyName];
              if (!faceSet) {
                faceSet = new Set();
                fontFamiles[familyName] = faceSet;
              }
              faceSet.add(fontFace);
            }
          }, {
            key: "createState",
            value: function createState(props) {
              return {
                props: props,
                status: 'initialState',
                updateScheduled: false,
                emitter: new EventEmitter(),
                lineCache: [],
                forceFullLayoutCalc: false,
                renderWindow: {
                  screen: {
                    x1: 0,
                    y1: 0,
                    x2: 0,
                    y2: 0
                  },
                  sdf: {
                    x1: 0,
                    y1: 0,
                    x2: 0,
                    y2: 0
                  },
                  firstLineIdx: 0,
                  numLines: 0,
                  valid: false
                },
                elementBounds: {
                  x1: 0,
                  y1: 0,
                  x2: 0,
                  y2: 0,
                  valid: false
                },
                clippingRect: {
                  x: 0,
                  y: 0,
                  width: 0,
                  height: 0,
                  valid: false
                },
                bufferNumFloats: 0,
                bufferNumQuads: 0,
                vertexBuffer: undefined,
                webGlBuffers: null,
                bufferUploaded: false,
                textH: undefined,
                textW: undefined,
                distanceRange: 0,
                trFontFace: undefined,
                isRenderable: false,
                resLineHeight: undefined,
                debugData: {
                  updateCount: 0,
                  layoutCount: 0,
                  lastLayoutNumCharacters: 0,
                  layoutSum: 0,
                  drawSum: 0,
                  drawCount: 0,
                  bufferSize: 0
                }
              };
            }
          }, {
            key: "updateState",
            value: function updateState(state) {
              var _this57 = this;
              var trFontFace = state.trFontFace;
              var textH = state.textH,
                lineCache = state.lineCache,
                debugData = state.debugData,
                forceFullLayoutCalc = state.forceFullLayoutCalc;
              debugData.updateCount++;
              // On the first update call we need to set the status to loading
              if (state.status === 'initialState') {
                this.setStatus(state, 'loading');
              }
              // Resolve font face if we haven't yet
              if (!trFontFace) {
                trFontFace = this.resolveFontFace(state.props);
                state.trFontFace = trFontFace;
                if (!trFontFace) {
                  var msg = "SdfTextRenderer: Could not resolve font face for family: '".concat(state.props.fontFamily, "'");
                  console.error(msg);
                  this.setStatus(state, 'failed', new Error(msg));
                  return;
                }
                trFontFace.texture.setRenderableOwner(state, true);
              }
              // If the font hasn't been loaded yet, stop here.
              // Listen for the 'loaded' event and forward fontLoaded event
              if (!trFontFace.loaded) {
                trFontFace.once('loaded', function () {
                  _this57.scheduleUpdateState(state);
                });
                return;
              }
              // If the font is loaded then so should the data
              assertTruthy(trFontFace.data, 'Font face data should be loaded');
              assertTruthy(trFontFace.metrics, 'Font face metrics should be loaded');
              var _state$props = state.props,
                text = _state$props.text,
                fontSize = _state$props.fontSize,
                x = _state$props.x,
                y = _state$props.y,
                contain = _state$props.contain,
                width = _state$props.width,
                height = _state$props.height,
                verticalAlign = _state$props.verticalAlign,
                scrollable = _state$props.scrollable,
                overflowSuffix = _state$props.overflowSuffix,
                maxLines = _state$props.maxLines;
              // scrollY only has an effect when contain === 'both' and scrollable === true
              var scrollY = contain === 'both' && scrollable ? state.props.scrollY : 0;
              var renderWindow = state.renderWindow;
              /**
               * The font size of the SDF font face (the basis for SDF space units)
               */
              var sdfFontSize = trFontFace.data.info.size;
              /**
               * Divide screen space units by this to get the SDF space units
               * Mulitple SDF space units by this to get screen space units
               */
              var fontSizeRatio = fontSize / sdfFontSize;
              // If not already resolved, resolve the line height and store it in the state
              var resLineHeight = state.resLineHeight;
              if (resLineHeight === undefined) {
                var lineHeight = state.props.lineHeight;
                // If lineHeight is undefined, use the maxCharHeight from the font face
                if (lineHeight === undefined) {
                  resLineHeight = calcDefaultLineHeight(trFontFace.metrics, fontSize);
                } else {
                  resLineHeight = lineHeight;
                }
                state.resLineHeight = resLineHeight;
              }
              // Needed in renderWindow calculation
              var sdfLineHeight = resLineHeight / fontSizeRatio;
              state.distanceRange = fontSizeRatio * trFontFace.data.distanceField.distanceRange;
              // Allocate buffers if needed
              var neededLength = text.length * FLOATS_PER_GLYPH;
              var vertexBuffer = state.vertexBuffer;
              if (!vertexBuffer || vertexBuffer.length < neededLength) {
                vertexBuffer = new Float32Array(neededLength * 2);
              }
              var elementBounds = state.elementBounds;
              if (!elementBounds.valid) {
                this.setElementBoundsX(state);
                this.setElementBoundsY(state);
                elementBounds.valid = true;
              }
              // Return early if we're still viewing inside the established render window
              // No need to re-render what we've already rendered
              // (Only if there's an established renderWindow and we're not suppressing early exit)
              if (!forceFullLayoutCalc && renderWindow.valid) {
                var rwScreen = renderWindow.screen;
                if (x + rwScreen.x1 <= elementBounds.x1 && x + rwScreen.x2 >= elementBounds.x2 && y - scrollY + rwScreen.y1 <= elementBounds.y1 && y - scrollY + rwScreen.y2 >= elementBounds.y2) {
                  this.setStatus(state, 'loaded');
                  return;
                }
                // Otherwise invalidate the renderWindow so it can be redone
                renderWindow.valid = false;
                this.setStatus(state, 'loading');
              }
              var _state$props2 = state.props,
                offsetY = _state$props2.offsetY,
                textAlign = _state$props2.textAlign;
              // Create a new renderWindow if needed
              if (!renderWindow.valid) {
                var isPossiblyOnScreen = boundsOverlap(elementBounds, this.rendererBounds);
                if (!isPossiblyOnScreen) {
                  // If the element is not possibly on screen, we can skip the layout and rendering completely
                  return;
                }
                setRenderWindow(renderWindow, x, y, scrollY, resLineHeight, contain === 'both' ? elementBounds.y2 - elementBounds.y1 : 0, elementBounds, fontSizeRatio);
                // console.log('newRenderWindow', renderWindow);
              }
              var start = getStartConditions(sdfFontSize, sdfLineHeight, trFontFace, verticalAlign, offsetY, fontSizeRatio, renderWindow, lineCache, textH);
              if (!start) {
                // Nothing to render, return early, but still mark as loaded (since the text is just scrolled
                // out of view)
                this.setStatus(state, 'loaded');
                return;
              }
              var letterSpacing = state.props.letterSpacing;
              var out2 = layoutText(start.lineIndex, start.sdfX, start.sdfY, text, textAlign, width, height, fontSize, resLineHeight, letterSpacing, vertexBuffer, contain, lineCache, renderWindow.sdf, trFontFace, forceFullLayoutCalc, scrollable, overflowSuffix, maxLines);
              state.bufferUploaded = false;
              state.bufferNumFloats = out2.bufferNumFloats;
              state.bufferNumQuads = out2.bufferNumQuads;
              state.vertexBuffer = vertexBuffer;
              state.renderWindow = renderWindow;
              debugData.lastLayoutNumCharacters = out2.layoutNumCharacters;
              debugData.bufferSize = vertexBuffer.byteLength;
              // If we didn't exit early, we know we have completely computed w/h
              if (out2.fullyProcessed) {
                state.textW = out2.maxX * fontSizeRatio;
                state.textH = out2.numLines * sdfLineHeight * fontSizeRatio;
              }
              // if (state.props.debug.printLayoutTime) {
              //   debugData.layoutSum += performance.now() - updateStartTime;
              //   debugData.layoutCount++;
              // }
              this.setStatus(state, 'loaded');
            }
          }, {
            key: "renderQuads",
            value: function renderQuads(state, transform, clippingRect, alpha, parentHasRenderTexture, framebufferDimensions) {
              var _trFontFace$data, _state$trFontFace;
              if (!state.vertexBuffer) {
                // Nothing to draw
                return;
              }
              var renderer = this.stage.renderer;
              assertTruthy(renderer instanceof WebGlCoreRenderer);
              var _state$props3 = state.props,
                fontSize = _state$props3.fontSize,
                color = _state$props3.color,
                contain = _state$props3.contain,
                scrollable = _state$props3.scrollable,
                zIndex = _state$props3.zIndex,
                debug = _state$props3.debug;
              // scrollY only has an effect when contain === 'both' and scrollable === true
              var scrollY = contain === 'both' && scrollable ? state.props.scrollY : 0;
              var _state$textW = state.textW,
                textW = _state$textW === void 0 ? 0 : _state$textW,
                _state$textH = state.textH,
                textH = _state$textH === void 0 ? 0 : _state$textH,
                distanceRange = state.distanceRange,
                vertexBuffer = state.vertexBuffer,
                bufferUploaded = state.bufferUploaded,
                trFontFace = state.trFontFace,
                elementBounds = state.elementBounds;
              var webGlBuffers = state.webGlBuffers;
              if (!webGlBuffers) {
                var glw = renderer.glw;
                var stride = 4 * Float32Array.BYTES_PER_ELEMENT;
                var webGlBuffer = glw.createBuffer();
                assertTruthy(webGlBuffer);
                state.webGlBuffers = new BufferCollection([{
                  buffer: webGlBuffer,
                  attributes: {
                    a_position: {
                      name: 'a_position',
                      size: 2,
                      type: glw.FLOAT,
                      normalized: false,
                      stride: stride,
                      offset: 0 // start at the beginning of the buffer
                    },
                    a_textureCoordinate: {
                      name: 'a_textureCoordinate',
                      size: 2,
                      type: glw.FLOAT,
                      normalized: false,
                      stride: stride,
                      offset: 2 * Float32Array.BYTES_PER_ELEMENT
                    }
                  }
                }]);
                state.bufferUploaded = false;
                assertTruthy(state.webGlBuffers);
                webGlBuffers = state.webGlBuffers;
              }
              if (!bufferUploaded) {
                var _webGlBuffers$getBuff, _webGlBuffers;
                var _glw = renderer.glw;
                var buffer = (_webGlBuffers$getBuff = (_webGlBuffers = webGlBuffers) === null || _webGlBuffers === void 0 ? void 0 : _webGlBuffers.getBuffer('a_textureCoordinate')) !== null && _webGlBuffers$getBuff !== void 0 ? _webGlBuffers$getBuff : null;
                _glw.arrayBufferData(buffer, vertexBuffer, _glw.STATIC_DRAW);
                state.bufferUploaded = true;
              }
              assertTruthy(trFontFace);
              if (scrollable && contain === 'both') {
                assertTruthy(elementBounds.valid);
                var elementRect = convertBoundToRect(elementBounds, tmpRect);
                if (clippingRect.valid) {
                  state.clippingRect.valid = true;
                  clippingRect = intersectRect(clippingRect, elementRect, state.clippingRect);
                } else {
                  state.clippingRect.valid = true;
                  clippingRect = copyRect(elementRect, state.clippingRect);
                }
              }
              var renderOp = new WebGlCoreRenderOp(renderer.glw, renderer.options, webGlBuffers, this.sdfShader, {
                transform: transform.getFloatArr(),
                // IMPORTANT: The SDF Shader expects the color NOT to be premultiplied
                // for the best blending results. Which is why we use `mergeColorAlpha`
                // instead of `mergeColorAlphaPremultiplied` here.
                color: mergeColorAlpha(color, alpha),
                size: fontSize / (((_trFontFace$data = trFontFace.data) === null || _trFontFace$data === void 0 ? void 0 : _trFontFace$data.info.size) || 0),
                scrollY: scrollY,
                distanceRange: distanceRange,
                debug: debug.sdfShaderDebug
              }, alpha, clippingRect, {
                height: textH,
                width: textW
              }, 0, zIndex, false, parentHasRenderTexture, framebufferDimensions);
              var texture = (_state$trFontFace = state.trFontFace) === null || _state$trFontFace === void 0 ? void 0 : _state$trFontFace.texture;
              assertTruthy(texture);
              var ctxTexture = texture.ctxTexture;
              renderOp.addTexture(ctxTexture);
              renderOp.length = state.bufferNumFloats;
              renderOp.numQuads = state.bufferNumQuads;
              renderer.addRenderOp(renderOp);
              // if (!debug.disableScissor) {
              //   renderer.enableScissor(
              //     visibleRect.x,
              //     visibleRect.y,
              //     visibleRect.w,
              //     visibleRect.h,
              //   );
              // }
              // Draw the arrays
              // gl.drawArrays(
              //   gl.TRIANGLES, // Primitive type
              //   0,
              //   bufferNumVertices, // Number of verticies
              // );
              // renderer.disableScissor();
              // if (debug.showElementRect) {
              //   this.renderer.drawBorder(
              //     Colors.Blue,
              //     elementRect.x,
              //     elementRect.y,
              //     elementRect.w,
              //     elementRect.h,
              //   );
              // }
              // if (debug.showVisibleRect) {
              //   this.renderer.drawBorder(
              //     Colors.Green,
              //     visibleRect.x,
              //     visibleRect.y,
              //     visibleRect.w,
              //     visibleRect.h,
              //   );
              // }
              // if (debug.showRenderWindow && renderWindow) {
              //   this.renderer.drawBorder(
              //     Colors.Red,
              //     x + renderWindow.x1,
              //     y + renderWindow.y1 - scrollY,
              //     x + renderWindow.x2 - (x + renderWindow.x1),
              //     y + renderWindow.y2 - scrollY - (y + renderWindow.y1 - scrollY),
              //   );
              // }
              // if (debug.printLayoutTime) {
              //   debugData.drawSum += performance.now() - drawStartTime;
              //   debugData.drawCount++;
              // }
            }
          }, {
            key: "setIsRenderable",
            value: function setIsRenderable(state, renderable) {
              var _state$trFontFace2;
              _superPropGet(SdfTextRenderer, "setIsRenderable", this, 3)([state, renderable]);
              (_state$trFontFace2 = state.trFontFace) === null || _state$trFontFace2 === void 0 || _state$trFontFace2.texture.setRenderableOwner(state, renderable);
            }
          }, {
            key: "destroyState",
            value: function destroyState(state) {
              var _state$trFontFace3;
              _superPropGet(SdfTextRenderer, "destroyState", this, 3)([state]);
              // If there's a Font Face assigned we must free the owner relation to its texture
              (_state$trFontFace3 = state.trFontFace) === null || _state$trFontFace3 === void 0 || _state$trFontFace3.texture.setRenderableOwner(state, false);
            }
            //#endregion Overrides
          }, {
            key: "resolveFontFace",
            value: function resolveFontFace(props) {
              return TrFontManager.resolveFontFace(this.fontFamilyArray, props);
            }
            /**
             * Release the loaded SDF font face
             *
             * @param state
             */
          }, {
            key: "releaseFontFace",
            value: function releaseFontFace(state) {
              state.resLineHeight = undefined;
              if (state.trFontFace) {
                state.trFontFace.texture.setRenderableOwner(state, false);
                state.trFontFace = undefined;
              }
            }
            /**
             * Invalidate the layout cache stored in the state. This will cause the text
             * to be re-layed out on the next update.
             *
             * @remarks
             * This also invalidates the visible window cache.
             *
             * @param state
             */
          }, {
            key: "invalidateLayoutCache",
            value: function invalidateLayoutCache(state) {
              state.renderWindow.valid = false;
              state.elementBounds.valid = false;
              state.textH = undefined;
              state.textW = undefined;
              state.lineCache = [];
              this.setStatus(state, 'loading');
              this.scheduleUpdateState(state);
            }
          }, {
            key: "setElementBoundsX",
            value: function setElementBoundsX(state) {
              var _state$props4 = state.props,
                x = _state$props4.x,
                contain = _state$props4.contain,
                width = _state$props4.width;
              var elementBounds = state.elementBounds;
              elementBounds.x1 = x;
              elementBounds.x2 = contain !== 'none' ? x + width : Infinity;
            }
          }, {
            key: "setElementBoundsY",
            value: function setElementBoundsY(state) {
              var _state$props5 = state.props,
                y = _state$props5.y,
                contain = _state$props5.contain,
                height = _state$props5.height;
              var elementBounds = state.elementBounds;
              elementBounds.y1 = y;
              elementBounds.y2 = contain === 'both' ? y + height : Infinity;
            }
          }]);
        }(TextRenderer);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns CSS font setting string for use in canvas context.
         *
         * @param fontFace
         * @param fontStyle
         * @param fontSize
         * @param precision
         * @param defaultFontFace
         * @returns
         */
        /**
         * Get the font metrics for a font face.
         *
         * @remarks
         * This function will attempt to grab the explicitly defined metrics from the
         * font face first. If the font face does not have metrics defined, it will
         * attempt to calculate the metrics using the browser's measureText method.
         *
         * If the browser does not support the font metrics API, it will use some
         * default values.
         *
         * @param context
         * @param fontFace
         * @param fontSize
         * @returns
         */
        function getWebFontMetrics(context, fontFace, fontSize) {
          if (fontFace.metrics) {
            return fontFace.metrics;
          }
          // If the font face doesn't have metrics defined, we fallback to using the
          // browser's measureText method to calculate take a best guess at the font
          // actual font's metrics.
          // - fontBoundingBox[Ascent|Descent] is the best estimate but only supported
          //   in Chrome 87+ (2020), Firefox 116+ (2023), and Safari 11.1+ (2018).
          //   - It is an estimate as it can vary between browsers.
          // - actualBoundingBox[Ascent|Descent] is less accurate and supported in
          //   Chrome 77+ (2019), Firefox 74+ (2020), and Safari 11.1+ (2018).
          // - If neither are supported, we'll use some default values which will
          //   get text on the screen but likely not be great.
          // NOTE: It's been decided not to rely on fontBoundingBox[Ascent|Descent]
          // as it's browser support is limited and it also tends to produce higher than
          // expected values. It is instead HIGHLY RECOMMENDED that developers provide
          // explicit metrics in the font face definition.
          var browserMetrics = context.measureText('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');
          console.warn("Font metrics not provided for Canvas Web font ".concat(fontFace.fontFamily, ". ") + 'Using fallback values. It is HIGHLY recommended you use the latest ' + 'version of the Lightning 3 `msdf-generator` tool to extract the default ' + 'metrics for the font and provide them in the Canvas Web font definition.');
          var metrics;
          if (browserMetrics.actualBoundingBoxDescent && browserMetrics.actualBoundingBoxAscent) {
            metrics = {
              ascender: browserMetrics.actualBoundingBoxAscent / fontSize,
              descender: -browserMetrics.actualBoundingBoxDescent / fontSize,
              lineGap: 0.2
            };
          } else {
            // If the browser doesn't support the font metrics API, we'll use some
            // default values.
            metrics = {
              ascender: 0.8,
              descender: -0.2,
              lineGap: 0.2
            };
          }
          // Save the calculated metrics to the font face for future use.
          fontFace.metrics = metrics;
          return metrics;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /* eslint-disable @typescript-eslint/no-non-null-assertion */
        var MAX_TEXTURE_DIMENSION = 2048;
        /**
         * Calculate height for the canvas
         *
         * @param textBaseline
         * @param fontSize
         * @param lineHeight
         * @param numLines
         * @param offsetY
         * @returns
         */
        function calcHeight(textBaseline, fontSize, lineHeight, numLines, offsetY) {
          var baselineOffset = textBaseline !== 'bottom' ? 0.5 * fontSize : 0;
          return lineHeight * (numLines - 1) + baselineOffset + Math.max(lineHeight, fontSize) + (offsetY || 0);
        }
        var LightningTextTextureRenderer = /*#__PURE__*/function () {
          function LightningTextTextureRenderer(canvas, context) {
            _classCallCheck(this, LightningTextTextureRenderer);
            _defineProperty(this, "_canvas", void 0);
            _defineProperty(this, "_context", void 0);
            _defineProperty(this, "_settings", void 0);
            this._canvas = canvas;
            this._context = context;
            this._settings = this.mergeDefaults({});
          }
          return _createClass(LightningTextTextureRenderer, [{
            key: "settings",
            get: function get() {
              return this._settings;
            },
            set: function set(v) {
              this._settings = this.mergeDefaults(v);
            }
          }, {
            key: "getPrecision",
            value: function getPrecision() {
              return this._settings.precision;
            }
          }, {
            key: "setFontProperties",
            value: function setFontProperties() {
              this._context.font = this._getFontSetting();
              this._context.textBaseline = this._settings.textBaseline;
            }
          }, {
            key: "_getFontSetting",
            value: function _getFontSetting() {
              var ff = [this._settings.fontFamily];
              var ffs = [];
              for (var i = 0, n = ff.length; i < n; i++) {
                if (ff[i] === 'serif' || ff[i] === 'sans-serif') {
                  ffs.push(ff[i]);
                } else {
                  ffs.push("\"".concat(ff[i], "\""));
                }
              }
              return "".concat(this._settings.fontStyle, " ").concat(this._settings.fontSize * this.getPrecision(), "px ").concat(ffs.join(','));
            }
          }, {
            key: "_load",
            value: function _load() {
              var _this58 = this;
              if (document.fonts) {
                var fontSetting = this._getFontSetting();
                try {
                  if (!document.fonts.check(fontSetting, this._settings.text)) {
                    // Use a promise that waits for loading.
                    return document.fonts.load(fontSetting, this._settings.text).catch(function (err) {
                      // Just load the fallback font.
                      console.warn('[Lightning] Font load error', err, fontSetting);
                    }).then(function () {
                      if (!document.fonts.check(fontSetting, _this58._settings.text)) {
                        console.warn('[Lightning] Font not found', fontSetting);
                      }
                    });
                  }
                } catch (e) {
                  console.warn("[Lightning] Can't check font loading for " + fontSetting);
                }
              }
            }
          }, {
            key: "calculateRenderInfo",
            value: function calculateRenderInfo() {
              var renderInfo = {};
              var precision = this.getPrecision();
              var paddingLeft = this._settings.paddingLeft * precision;
              var paddingRight = this._settings.paddingRight * precision;
              var fontSize = this._settings.fontSize * precision;
              var offsetY = this._settings.offsetY === null ? null : this._settings.offsetY * precision;
              var w = this._settings.w * precision;
              var h = this._settings.h * precision;
              var wordWrapWidth = this._settings.wordWrapWidth * precision;
              var cutSx = this._settings.cutSx * precision;
              var cutEx = this._settings.cutEx * precision;
              var cutSy = this._settings.cutSy * precision;
              var cutEy = this._settings.cutEy * precision;
              var letterSpacing = (this._settings.letterSpacing || 0) * precision;
              var textIndent = this._settings.textIndent * precision;
              var trFontFace = this._settings.trFontFace;
              // Set font properties.
              this.setFontProperties();
              assertTruthy(trFontFace);
              var metrics = getWebFontMetrics(this._context, trFontFace, fontSize);
              var defLineHeight = calcDefaultLineHeight(metrics, fontSize) * precision;
              var lineHeight = this._settings.lineHeight !== null ? this._settings.lineHeight * precision : defLineHeight;
              var maxHeight = this._settings.maxHeight;
              var containedMaxLines = maxHeight !== null && lineHeight > 0 ? Math.floor(maxHeight / lineHeight) : 0;
              var setMaxLines = this._settings.maxLines;
              var calcMaxLines = containedMaxLines > 0 && setMaxLines > 0 ? Math.min(containedMaxLines, setMaxLines) : Math.max(containedMaxLines, setMaxLines);
              // Total width.
              var width = w || 2048 / this.getPrecision();
              // Inner width.
              var innerWidth = width - paddingLeft;
              if (innerWidth < 10) {
                width += 10 - innerWidth;
                innerWidth = 10;
              }
              if (!wordWrapWidth) {
                wordWrapWidth = innerWidth;
              }
              // Text overflow
              if (this._settings.textOverflow && !this._settings.wordWrap) {
                var suffix;
                switch (this._settings.textOverflow) {
                  case 'clip':
                    suffix = '';
                    break;
                  case 'ellipsis':
                    suffix = this._settings.overflowSuffix;
                    break;
                  default:
                    suffix = this._settings.textOverflow;
                }
                this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix);
              }
              // word wrap
              // preserve original text
              var linesInfo;
              if (this._settings.wordWrap) {
                linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);
              } else {
                linesInfo = {
                  l: this._settings.text.split(/(?:\r\n|\r|\n)/),
                  n: []
                };
                var n = linesInfo.l.length;
                for (var i = 0; i < n - 1; i++) {
                  linesInfo.n.push(i);
                }
              }
              var lines = linesInfo.l;
              if (calcMaxLines && lines.length > calcMaxLines) {
                var usedLines = lines.slice(0, calcMaxLines);
                var otherLines = null;
                if (this._settings.overflowSuffix) {
                  // Wrap again with max lines suffix enabled.
                  var _w = this._settings.overflowSuffix ? this.measureText(this._settings.overflowSuffix) : 0;
                  var al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - _w, letterSpacing, textIndent);
                  usedLines[usedLines.length - 1] = "".concat(al.l[0]).concat(this._settings.overflowSuffix);
                  otherLines = [al.l.length > 1 ? al.l[1] : ''];
                } else {
                  otherLines = [''];
                }
                // Re-assemble the remaining text.
                var _i4;
                var _n = lines.length;
                var j = 0;
                var m = linesInfo.n.length;
                for (_i4 = calcMaxLines; _i4 < _n; _i4++) {
                  otherLines[j] += "".concat(otherLines[j] ? ' ' : '').concat(lines[_i4]);
                  if (_i4 + 1 < m && linesInfo.n[_i4 + 1]) {
                    j++;
                  }
                }
                renderInfo.remainingText = otherLines.join('\n');
                renderInfo.moreTextLines = true;
                lines = usedLines;
              } else {
                renderInfo.moreTextLines = false;
                renderInfo.remainingText = '';
              }
              // calculate text width
              var maxLineWidth = 0;
              var lineWidths = [];
              for (var _i5 = 0; _i5 < lines.length; _i5++) {
                var lineWidth = this.measureText(lines[_i5], letterSpacing) + (_i5 === 0 ? textIndent : 0);
                lineWidths.push(lineWidth);
                maxLineWidth = Math.max(maxLineWidth, lineWidth);
              }
              renderInfo.lineWidths = lineWidths;
              if (!w) {
                // Auto-set width to max text length.
                width = maxLineWidth + paddingLeft + paddingRight;
                innerWidth = maxLineWidth;
              }
              var height;
              if (h) {
                height = h;
              } else {
                height = calcHeight(this._settings.textBaseline, fontSize, lineHeight, lines.length, offsetY);
              }
              if (offsetY === null) {
                offsetY = fontSize;
              }
              renderInfo.w = width;
              renderInfo.h = height;
              renderInfo.lines = lines;
              renderInfo.precision = precision;
              if (!width) {
                // To prevent canvas errors.
                width = 1;
              }
              if (!height) {
                // To prevent canvas errors.
                height = 1;
              }
              if (cutSx || cutEx) {
                width = Math.min(width, cutEx - cutSx);
              }
              if (cutSy || cutEy) {
                height = Math.min(height, cutEy - cutSy);
              }
              renderInfo.width = width;
              renderInfo.innerWidth = innerWidth;
              renderInfo.height = height;
              renderInfo.fontSize = fontSize;
              renderInfo.cutSx = cutSx;
              renderInfo.cutSy = cutSy;
              renderInfo.cutEx = cutEx;
              renderInfo.cutEy = cutEy;
              renderInfo.lineHeight = lineHeight;
              renderInfo.defLineHeight = defLineHeight;
              renderInfo.lineWidths = lineWidths;
              renderInfo.offsetY = offsetY;
              renderInfo.paddingLeft = paddingLeft;
              renderInfo.paddingRight = paddingRight;
              renderInfo.letterSpacing = letterSpacing;
              renderInfo.textIndent = textIndent;
              renderInfo.metrics = metrics;
              return renderInfo;
            }
          }, {
            key: "draw",
            value: function draw(renderInfo, linesOverride) {
              var precision = this.getPrecision();
              // Allow lines to be overriden for partial rendering.
              var lines = (linesOverride === null || linesOverride === void 0 ? void 0 : linesOverride.lines) || renderInfo.lines;
              var lineWidths = (linesOverride === null || linesOverride === void 0 ? void 0 : linesOverride.lineWidths) || renderInfo.lineWidths;
              var height = linesOverride ? calcHeight(this._settings.textBaseline, renderInfo.fontSize, renderInfo.lineHeight, linesOverride.lines.length, this._settings.offsetY === null ? null : this._settings.offsetY * precision) : renderInfo.height;
              // Add extra margin to prevent issue with clipped text when scaling.
              this._canvas.width = Math.min(Math.ceil(renderInfo.width + this._settings.textRenderIssueMargin), MAX_TEXTURE_DIMENSION);
              this._canvas.height = Math.min(Math.ceil(height), MAX_TEXTURE_DIMENSION);
              // Canvas context has been reset.
              this.setFontProperties();
              if (renderInfo.fontSize >= 128) {
                // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.
                this._context.globalAlpha = 0.01;
                this._context.fillRect(0, 0, 0.01, 0.01);
                this._context.globalAlpha = 1.0;
              }
              if (renderInfo.cutSx || renderInfo.cutSy) {
                this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);
              }
              var linePositionX;
              var linePositionY;
              var drawLines = [];
              var metrics = renderInfo.metrics;
              /**
               * Ascender (in pixels)
               */
              var ascenderPx = metrics ? metrics.ascender * renderInfo.fontSize : renderInfo.fontSize;
              /**
               * Bare line height is the distance between the ascender and descender of the font.
               * without the line gap metric.
               */
              var bareLineHeightPx = (metrics.ascender - metrics.descender) * renderInfo.fontSize;
              // Draw lines line by line.
              for (var i = 0, n = lines.length; i < n; i++) {
                linePositionX = i === 0 ? renderInfo.textIndent : 0;
                // By default, text is aligned to top
                linePositionY = i * renderInfo.lineHeight + ascenderPx;
                if (this._settings.verticalAlign == 'middle') {
                  linePositionY += (renderInfo.lineHeight - bareLineHeightPx) / 2;
                } else if (this._settings.verticalAlign == 'bottom') {
                  linePositionY += renderInfo.lineHeight - bareLineHeightPx;
                }
                if (this._settings.textAlign === 'right') {
                  linePositionX += renderInfo.innerWidth - lineWidths[i];
                } else if (this._settings.textAlign === 'center') {
                  linePositionX += (renderInfo.innerWidth - lineWidths[i]) / 2;
                }
                linePositionX += renderInfo.paddingLeft;
                drawLines.push({
                  text: lines[i],
                  x: linePositionX,
                  y: linePositionY,
                  w: lineWidths[i]
                });
              }
              // Highlight.
              if (this._settings.highlight) {
                var color = this._settings.highlightColor;
                var hlHeight = this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5;
                var offset = this._settings.highlightOffset * precision;
                var hlPaddingLeft = this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft;
                var hlPaddingRight = this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight;
                this._context.fillStyle = getRgbaString(color);
                for (var _i6 = 0; _i6 < drawLines.length; _i6++) {
                  var drawLine = drawLines[_i6];
                  this._context.fillRect(drawLine.x - hlPaddingLeft, drawLine.y - renderInfo.offsetY + offset, drawLine.w + hlPaddingRight + hlPaddingLeft, hlHeight);
                }
              }
              // Text shadow.
              var prevShadowSettings = null;
              if (this._settings.shadow) {
                prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];
                this._context.shadowColor = getRgbaString(this._settings.shadowColor);
                this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;
                this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;
                this._context.shadowBlur = this._settings.shadowBlur * precision;
              }
              this._context.fillStyle = getRgbaString(this._settings.textColor);
              for (var _i7 = 0, _n2 = drawLines.length; _i7 < _n2; _i7++) {
                var _drawLine = drawLines[_i7];
                if (renderInfo.letterSpacing === 0) {
                  this._context.fillText(_drawLine.text, _drawLine.x, _drawLine.y);
                } else {
                  var textSplit = _drawLine.text.split('');
                  var x = _drawLine.x;
                  for (var _i8 = 0, j = textSplit.length; _i8 < j; _i8++) {
                    this._context.fillText(textSplit[_i8], x, _drawLine.y);
                    x += this.measureText(textSplit[_i8], renderInfo.letterSpacing);
                  }
                }
              }
              if (prevShadowSettings) {
                this._context.shadowColor = prevShadowSettings[0];
                this._context.shadowOffsetX = prevShadowSettings[1];
                this._context.shadowOffsetY = prevShadowSettings[2];
                this._context.shadowBlur = prevShadowSettings[3];
              }
              if (renderInfo.cutSx || renderInfo.cutSy) {
                this._context.translate(renderInfo.cutSx, renderInfo.cutSy);
              }
            }
          }, {
            key: "wrapWord",
            value: function wrapWord(word, wordWrapWidth, suffix) {
              var suffixWidth = this._context.measureText(suffix).width;
              var wordLen = word.length;
              var wordWidth = this._context.measureText(word).width;
              /* If word fits wrapWidth, do nothing */
              if (wordWidth <= wordWrapWidth) {
                return word;
              }
              /* Make initial guess for text cuttoff */
              var cutoffIndex = Math.floor(wordWrapWidth * wordLen / wordWidth);
              var truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;
              /* In case guess was overestimated, shrink it letter by letter. */
              if (truncWordWidth > wordWrapWidth) {
                while (cutoffIndex > 0) {
                  truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;
                  if (truncWordWidth > wordWrapWidth) {
                    cutoffIndex -= 1;
                  } else {
                    break;
                  }
                }
                /* In case guess was underestimated, extend it letter by letter. */
              } else {
                while (cutoffIndex < wordLen) {
                  truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;
                  if (truncWordWidth < wordWrapWidth) {
                    cutoffIndex += 1;
                  } else {
                    // Finally, when bound is crossed, retract last letter.
                    cutoffIndex -= 1;
                    break;
                  }
                }
              }
              /* If wrapWidth is too short to even contain suffix alone, return empty string */
              return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');
            }
            /**
             * Applies newlines to a string to have it optimally fit into the horizontal
             * bounds set by the Text object's wordWrapWidth property.
             */
          }, {
            key: "wrapText",
            value: function wrapText(text, wordWrapWidth, letterSpacing) {
              var indent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
              // Greedy wrapping algorithm that will wrap words as the line grows longer.
              // than its horizontal bounds.
              var lines = text.split(/\r?\n/g);
              var allLines = [];
              var realNewlines = [];
              for (var i = 0; i < lines.length; i++) {
                var resultLines = [];
                var result = '';
                var spaceLeft = wordWrapWidth - indent;
                var words = lines[i].split(' ');
                for (var j = 0; j < words.length; j++) {
                  var wordWidth = this.measureText(words[j], letterSpacing);
                  var wordWidthWithSpace = wordWidth + this.measureText(' ', letterSpacing);
                  if (j === 0 || wordWidthWithSpace > spaceLeft) {
                    // Skip printing the newline if it's the first word of the line that is.
                    // greater than the word wrap width.
                    if (j > 0) {
                      resultLines.push(result);
                      result = '';
                    }
                    result += words[j];
                    spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);
                  } else {
                    spaceLeft -= wordWidthWithSpace;
                    result += " ".concat(words[j]);
                  }
                }
                resultLines.push(result);
                result = '';
                allLines = allLines.concat(resultLines);
                if (i < lines.length - 1) {
                  realNewlines.push(allLines.length);
                }
              }
              return {
                l: allLines,
                n: realNewlines
              };
            }
          }, {
            key: "measureText",
            value: function measureText(word) {
              var _this59 = this;
              var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              if (!space) {
                return this._context.measureText(word).width;
              }
              return word.split('').reduce(function (acc, char) {
                return acc + _this59._context.measureText(char).width + space;
              }, 0);
            }
          }, {
            key: "mergeDefaults",
            value: function mergeDefaults(settings) {
              return _objectSpread({
                text: '',
                w: 0,
                h: 0,
                fontStyle: 'normal',
                fontSize: 40,
                fontFamily: null,
                trFontFace: null,
                wordWrap: true,
                wordWrapWidth: 0,
                wordBreak: false,
                textOverflow: '',
                lineHeight: null,
                textBaseline: 'alphabetic',
                textAlign: 'left',
                verticalAlign: 'top',
                offsetY: null,
                maxLines: 0,
                maxHeight: null,
                overflowSuffix: '...',
                textColor: [1.0, 1.0, 1.0, 1.0],
                paddingLeft: 0,
                paddingRight: 0,
                shadow: false,
                shadowColor: [0.0, 0.0, 0.0, 1.0],
                shadowOffsetX: 0,
                shadowOffsetY: 0,
                shadowBlur: 5,
                highlight: false,
                highlightHeight: 0,
                highlightColor: [0.0, 0.0, 0.0, 1.0],
                highlightOffset: 0,
                highlightPaddingLeft: 0,
                highlightPaddingRight: 0,
                letterSpacing: 0,
                textIndent: 0,
                cutSx: 0,
                cutEx: 0,
                cutSy: 0,
                cutEy: 0,
                advancedRenderer: false,
                fontBaselineRatio: 0,
                precision: 1,
                textRenderIssueMargin: 0
              }, settings);
            }
          }]);
        }();
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var resolvedGlobal = typeof self === 'undefined' ? globalThis : self;
        /**
         * Global font set regardless of if run in the main thread or a web worker
         */
        var globalFontSet = ((_resolvedGlobal$docum = resolvedGlobal.document) === null || _resolvedGlobal$docum === void 0 ? void 0 : _resolvedGlobal$docum.fonts) || resolvedGlobal.fonts;
        function getFontCssString(props) {
          var fontFamily = props.fontFamily,
            fontStyle = props.fontStyle,
            fontWeight = props.fontWeight,
            fontStretch = props.fontStretch,
            fontSize = props.fontSize;
          return [fontStyle, fontWeight, fontStretch, "".concat(fontSize, "px"), fontFamily].join(' ');
        }
        var CanvasTextRenderer = /*#__PURE__*/function (_TextRenderer3) {
          function CanvasTextRenderer(stage) {
            var _this60;
            _classCallCheck(this, CanvasTextRenderer);
            _this60 = _callSuper(this, CanvasTextRenderer, [stage]);
            _defineProperty(_this60, "canvas", void 0);
            _defineProperty(_this60, "context", void 0);
            /**
             * Font family map used to store web font faces that were added to the
             * canvas text renderer.
             */
            _defineProperty(_this60, "fontFamilies", {});
            _defineProperty(_this60, "fontFamilyArray", [_this60.fontFamilies]);
            _defineProperty(_this60, "type", 'canvas');
            _defineProperty(_this60, "loadFont", function (state) {
              var cssString = getFontCssString(state.props);
              var trFontFace = TrFontManager.resolveFontFace(_this60.fontFamilyArray, state.props);
              assertTruthy(trFontFace, "Could not resolve font face for ".concat(cssString));
              state.fontInfo = {
                fontFace: trFontFace,
                cssString: cssString,
                // TODO: For efficiency we would use this here but it's not reliable on WPE -> document.fonts.check(cssString),
                loaded: false
              };
              // If font is not loaded, set up a handler to update the font info when the font loads
              if (!state.fontInfo.loaded) {
                globalFontSet.load(cssString).then(_this60.onFontLoaded.bind(_this60, state, cssString)).catch(_this60.onFontLoadError.bind(_this60, state, cssString));
                return;
              }
            });
            if (typeof OffscreenCanvas !== 'undefined') {
              _this60.canvas = new OffscreenCanvas(0, 0);
            } else {
              _this60.canvas = document.createElement('canvas');
            }
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            var context = _this60.canvas.getContext('2d', {
              willReadFrequently: true
            });
            if (!context) {
              // A browser may appear to support OffscreenCanvas but not actually support the Canvas '2d' context
              // Here we try getting the context again after falling back to an HTMLCanvasElement.
              // See: https://github.com/lightning-js/renderer/issues/26#issuecomment-1750438486
              _this60.canvas = document.createElement('canvas');
              context = _this60.canvas.getContext('2d', {
                willReadFrequently: true
              });
            }
            assertTruthy(context);
            _this60.context = context;
            // Install the default 'san-serif' font face
            _this60.addFontFace(new WebTrFontFace({
              fontFamily: 'sans-serif',
              descriptors: {},
              fontUrl: ''
            }));
            return _this60;
          }
          //#region Overrides
          _inherits(CanvasTextRenderer, _TextRenderer3);
          return _createClass(CanvasTextRenderer, [{
            key: "getPropertySetters",
            value: function getPropertySetters() {
              var _this61 = this;
              return {
                fontFamily: function fontFamily(state, value) {
                  state.props.fontFamily = value;
                  state.fontInfo = undefined;
                  _this61.invalidateLayoutCache(state);
                },
                fontWeight: function fontWeight(state, value) {
                  state.props.fontWeight = value;
                  state.fontInfo = undefined;
                  _this61.invalidateLayoutCache(state);
                },
                fontStyle: function fontStyle(state, value) {
                  state.props.fontStyle = value;
                  state.fontInfo = undefined;
                  _this61.invalidateLayoutCache(state);
                },
                fontStretch: function fontStretch(state, value) {
                  state.props.fontStretch = value;
                  state.fontInfo = undefined;
                  _this61.invalidateLayoutCache(state);
                },
                fontSize: function fontSize(state, value) {
                  state.props.fontSize = value;
                  state.fontInfo = undefined;
                  _this61.invalidateLayoutCache(state);
                },
                text: function text(state, value) {
                  state.props.text = value;
                  _this61.invalidateLayoutCache(state);
                },
                textAlign: function textAlign(state, value) {
                  state.props.textAlign = value;
                  _this61.invalidateLayoutCache(state);
                },
                color: function color(state, value) {
                  state.props.color = value;
                  _this61.invalidateLayoutCache(state);
                },
                x: function x(state, value) {
                  state.props.x = value;
                },
                y: function y(state, value) {
                  state.props.y = value;
                },
                contain: function contain(state, value) {
                  state.props.contain = value;
                  _this61.invalidateLayoutCache(state);
                },
                width: function width(state, value) {
                  state.props.width = value;
                  // Only invalidate layout cache if we're containing in the horizontal direction
                  if (state.props.contain !== 'none') {
                    _this61.invalidateLayoutCache(state);
                  }
                },
                height: function height(state, value) {
                  state.props.height = value;
                  // Only invalidate layout cache if we're containing in the vertical direction
                  if (state.props.contain === 'both') {
                    _this61.invalidateLayoutCache(state);
                  }
                },
                offsetY: function offsetY(state, value) {
                  state.props.offsetY = value;
                  _this61.invalidateLayoutCache(state);
                },
                scrollY: function scrollY(state, value) {
                  state.props.scrollY = value;
                },
                letterSpacing: function letterSpacing(state, value) {
                  state.props.letterSpacing = value;
                  _this61.invalidateLayoutCache(state);
                },
                lineHeight: function lineHeight(state, value) {
                  state.props.lineHeight = value;
                  _this61.invalidateLayoutCache(state);
                },
                maxLines: function maxLines(state, value) {
                  state.props.maxLines = value;
                  _this61.invalidateLayoutCache(state);
                },
                textBaseline: function textBaseline(state, value) {
                  state.props.textBaseline = value;
                  _this61.invalidateLayoutCache(state);
                },
                verticalAlign: function verticalAlign(state, value) {
                  state.props.verticalAlign = value;
                  _this61.invalidateLayoutCache(state);
                },
                overflowSuffix: function overflowSuffix(state, value) {
                  state.props.overflowSuffix = value;
                  _this61.invalidateLayoutCache(state);
                }
              };
            }
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
          }, {
            key: "canRenderFont",
            value: function canRenderFont(props) {
              // The canvas renderer can render any font because it automatically
              // falls back to system fonts. The CanvasTextRenderer should be
              // checked last if other renderers are preferred.
              return true;
            }
          }, {
            key: "isFontFaceSupported",
            value: function isFontFaceSupported(fontFace) {
              return fontFace instanceof WebTrFontFace;
            }
          }, {
            key: "addFontFace",
            value: function addFontFace(fontFace) {
              // Make sure the font face is an Canvas font face (it should have already passed
              // the `isFontFaceSupported` check)
              assertTruthy(fontFace instanceof WebTrFontFace);
              // Add the font face to the document
              // Except for the 'sans-serif' font family, which the Renderer provides
              // as a special default fallback.
              if (fontFace.fontFamily !== 'sans-serif') {
                // @ts-expect-error `add()` method should be available from a FontFaceSet
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                globalFontSet.add(fontFace.fontFace);
              }
              var fontFamilies = this.fontFamilies;
              var familyName = fontFace.fontFace.family;
              var faceSet = fontFamilies[familyName];
              if (!faceSet) {
                faceSet = new Set();
                fontFamilies[familyName] = faceSet;
              }
              faceSet.add(fontFace);
            }
          }, {
            key: "createState",
            value: function createState(props, node) {
              return {
                node: node,
                props: props,
                status: 'initialState',
                updateScheduled: false,
                emitter: new EventEmitter(),
                textureNode: undefined,
                lightning2TextRenderer: new LightningTextTextureRenderer(this.canvas, this.context),
                renderInfo: undefined,
                forceFullLayoutCalc: false,
                textW: 0,
                textH: 0,
                fontInfo: undefined,
                isRenderable: false,
                debugData: {
                  updateCount: 0,
                  layoutCount: 0,
                  drawCount: 0,
                  lastLayoutNumCharacters: 0,
                  layoutSum: 0,
                  drawSum: 0,
                  bufferSize: 0
                }
              };
            }
          }, {
            key: "updateState",
            value: function updateState(state) {
              // On the first update call we need to set the status to loading
              if (state.status === 'initialState') {
                this.setStatus(state, 'loading');
                // check if we're on screen
                // if (this.isValidOnScreen(state) === true) {
                //   this.setStatus(state, 'loading');
                // }
              }
              if (state.status === 'loaded') {
                // If we're loaded, we don't need to do anything
                return;
              }
              // If fontInfo is invalid, we need to establish it
              if (!state.fontInfo) {
                return this.loadFont(state);
              }
              // If we're waiting for a font face to load, don't render anything
              if (!state.fontInfo.loaded) {
                return;
              }
              if (!state.renderInfo) {
                state.renderInfo = this.calculateRenderInfo(state);
                state.textH = state.renderInfo.lineHeight * state.renderInfo.lines.length;
                state.textW = state.renderInfo.width;
                this.renderSingleCanvasPage(state);
              }
              // handle scrollable text !!!
              // if (state.isScrollable === true) {
              //   return this.renderScrollableCanvasPages(state);
              // }
              // handle single page text
            }
          }, {
            key: "renderSingleCanvasPage",
            value: function renderSingleCanvasPage(state) {
              assertTruthy(state.renderInfo);
              var node = state.node;
              var texture = this.stage.txManager.loadTexture('ImageTexture', {
                src: function (lightning2TextRenderer, renderInfo) {
                  // load the canvas texture
                  assertTruthy(renderInfo);
                  lightning2TextRenderer.draw(renderInfo, {
                    lines: renderInfo.lines,
                    lineWidths: renderInfo.lineWidths
                  });
                  if (this.canvas.width === 0 || this.canvas.height === 0) {
                    return null;
                  }
                  return this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);
                }.bind(this, state.lightning2TextRenderer, state.renderInfo)
              });
              if (state.textureNode) {
                // Use the existing texture node
                state.textureNode.texture = texture;
              } else {
                // Create a new texture node
                var textureNode = this.stage.createNode({
                  parent: node,
                  texture: texture,
                  autosize: true,
                  // The alpha channel of the color is ignored when rasterizing the text
                  // texture so we need to pass it directly to the texture node.
                  alpha: getNormalizedAlphaComponent(state.props.color)
                });
                state.textureNode = textureNode;
              }
              this.setStatus(state, 'loaded');
            }
          }, {
            key: "calculateRenderInfo",
            value: function calculateRenderInfo(state) {
              var _state$fontInfo, _state$props$lineHeig;
              state.lightning2TextRenderer.settings = {
                text: state.props.text,
                textAlign: state.props.textAlign,
                fontFamily: state.props.fontFamily,
                trFontFace: (_state$fontInfo = state.fontInfo) === null || _state$fontInfo === void 0 ? void 0 : _state$fontInfo.fontFace,
                fontSize: state.props.fontSize,
                fontStyle: [state.props.fontStretch, state.props.fontStyle, state.props.fontWeight].join(' '),
                textColor: getNormalizedRgbaComponents(state.props.color),
                offsetY: state.props.offsetY,
                wordWrap: state.props.contain !== 'none',
                wordWrapWidth: state.props.contain === 'none' ? undefined : state.props.width,
                letterSpacing: state.props.letterSpacing,
                lineHeight: (_state$props$lineHeig = state.props.lineHeight) !== null && _state$props$lineHeig !== void 0 ? _state$props$lineHeig : null,
                maxLines: state.props.maxLines,
                maxHeight: state.props.contain === 'both' ? state.props.height - state.props.offsetY : null,
                textBaseline: state.props.textBaseline,
                verticalAlign: state.props.verticalAlign,
                overflowSuffix: state.props.overflowSuffix,
                w: state.props.contain !== 'none' ? state.props.width : undefined
              };
              state.renderInfo = state.lightning2TextRenderer.calculateRenderInfo();
              return state.renderInfo;
            }
          }, {
            key: "renderQuads",
            value: function renderQuads() {
              // Do nothing. The renderer will render the child node(s) that were created
              // in the state update.
              return;
            }
          }, {
            key: "destroyState",
            value: function destroyState(state) {
              if (state.status === 'destroyed') {
                return;
              }
              _superPropGet(CanvasTextRenderer, "destroyState", this, 3)([state]);
              if (state.textureNode) {
                state.textureNode.destroy();
                delete state.textureNode;
              }
              delete state.renderInfo;
            }
            //#endregion Overrides
            /**
             * Invalidate the layout cache stored in the state. This will cause the text
             * to be re-rendered on the next update.
             *
             * @remarks
             * This also invalidates the visible window cache.
             *
             * @param state
             */
          }, {
            key: "invalidateLayoutCache",
            value: function invalidateLayoutCache(state) {
              state.renderInfo = undefined;
              this.setStatus(state, 'loading');
              this.scheduleUpdateState(state);
            }
          }, {
            key: "onFontLoaded",
            value: function onFontLoaded(state, cssString) {
              var _state$fontInfo2;
              if (cssString !== ((_state$fontInfo2 = state.fontInfo) === null || _state$fontInfo2 === void 0 ? void 0 : _state$fontInfo2.cssString) || !state.fontInfo) {
                return;
              }
              state.fontInfo.loaded = true;
              this.scheduleUpdateState(state);
            }
          }, {
            key: "onFontLoadError",
            value: function onFontLoadError(state, cssString, error) {
              var _state$fontInfo3;
              if (cssString !== ((_state$fontInfo3 = state.fontInfo) === null || _state$fontInfo3 === void 0 ? void 0 : _state$fontInfo3.cssString) || !state.fontInfo) {
                return;
              }
              // Font didn't actually load, but we'll log the error and mark it as loaded
              // because the browser can still render with a fallback font.
              state.fontInfo.loaded = true;
              console.error("CanvasTextRenderer: Error loading font '".concat(state.fontInfo.cssString, "'"), error);
              this.scheduleUpdateState(state);
            }
          }]);
        }(TextRenderer);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var WHITE = {
          isWhite: true,
          a: 1,
          r: 0xff,
          g: 0xff,
          b: 0xff
        };
        /**
         * Extract color components
         */
        function parseColor(abgr) {
          if (abgr === 0xffffffff) {
            return WHITE;
          }
          var a = (abgr >>> 24 & 0xff) / 255;
          var b = abgr >>> 16 & 0xff & 0xff;
          var g = abgr >>> 8 & 0xff & 0xff;
          var r = abgr & 0xff & 0xff;
          return {
            isWhite: false,
            a: a,
            r: r,
            g: g,
            b: b
          };
        }
        /**
         * Format a parsed color into a rgba CSS color
         */
        function formatRgba(_ref27) {
          var a = _ref27.a,
            r = _ref27.r,
            g = _ref27.g,
            b = _ref27.b;
          return "rgba(".concat(r, ",").concat(g, ",").concat(b, ",").concat(a, ")");
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CanvasCoreTexture = /*#__PURE__*/function (_CoreContextTexture3) {
          function CanvasCoreTexture() {
            var _this62;
            _classCallCheck(this, CanvasCoreTexture);
            for (var _len17 = arguments.length, args = new Array(_len17), _key20 = 0; _key20 < _len17; _key20++) {
              args[_key20] = arguments[_key20];
            }
            _this62 = _callSuper(this, CanvasCoreTexture, [].concat(args));
            _defineProperty(_this62, "image", void 0);
            _defineProperty(_this62, "tintCache", void 0);
            return _this62;
          }
          _inherits(CanvasCoreTexture, _CoreContextTexture3);
          return _createClass(CanvasCoreTexture, [{
            key: "load",
            value: function load() {
              var _this63 = this;
              if (this.textureSource.state !== 'freed') {
                return;
              }
              this.textureSource.setState('loading');
              this.onLoadRequest().then(function (size) {
                _this63.textureSource.setState('loaded', size);
                _this63.updateMemSize();
              }).catch(function (err) {
                _this63.textureSource.setState('failed', err);
              });
            }
          }, {
            key: "free",
            value: function free() {
              this.image = undefined;
              this.tintCache = undefined;
              this.textureSource.setState('freed');
              this.setTextureMemUse(0);
            }
          }, {
            key: "updateMemSize",
            value: function updateMemSize() {
              // Counting memory usage for:
              // - main image
              // - tinted image
              var mult = this.tintCache ? 8 : 4;
              if (this.textureSource.dimensions) {
                var _this$textureSource$d = this.textureSource.dimensions,
                  width = _this$textureSource$d.width,
                  height = _this$textureSource$d.height;
                this.setTextureMemUse(width * height * mult);
              }
            }
          }, {
            key: "hasImage",
            value: function hasImage() {
              return this.image !== undefined;
            }
          }, {
            key: "getImage",
            value: function getImage(color) {
              var _this$tintCache;
              var image = this.image;
              assertTruthy(image, 'Attempt to get unloaded image texture');
              if (color.isWhite) {
                if (this.tintCache) {
                  this.tintCache = undefined;
                  this.updateMemSize();
                }
                return image;
              }
              var key = formatRgba(color);
              if (((_this$tintCache = this.tintCache) === null || _this$tintCache === void 0 ? void 0 : _this$tintCache.key) === key) {
                return this.tintCache.image;
              }
              var tintedImage = this.tintTexture(image, key);
              this.tintCache = {
                key: key,
                image: tintedImage
              };
              this.updateMemSize();
              return tintedImage;
            }
          }, {
            key: "tintTexture",
            value: function tintTexture(source, color) {
              var width = source.width,
                height = source.height;
              var canvas = document.createElement('canvas');
              canvas.width = width;
              canvas.height = height;
              var ctx = canvas.getContext('2d');
              if (ctx) {
                // fill with target color
                ctx.fillStyle = color;
                ctx.globalCompositeOperation = 'copy';
                ctx.fillRect(0, 0, width, height);
                // multiply with image, resulting in non-transparent tinted image
                ctx.globalCompositeOperation = 'multiply';
                ctx.drawImage(source, 0, 0, width, height, 0, 0, width, height);
                // apply original image alpha
                ctx.globalCompositeOperation = 'destination-in';
                ctx.drawImage(source, 0, 0, width, height, 0, 0, width, height);
              }
              return canvas;
            }
          }, {
            key: "onLoadRequest",
            value: function () {
              var _onLoadRequest4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
                var _yield$this$textureSo, data, canvas, ctx;
                return _regeneratorRuntime().wrap(function _callee15$(_context16) {
                  while (1) switch (_context16.prev = _context16.next) {
                    case 0:
                      _context16.next = 2;
                      return this.textureSource.getTextureData();
                    case 2:
                      _yield$this$textureSo = _context16.sent;
                      data = _yield$this$textureSo.data;
                      if (!(data instanceof ImageData)) {
                        _context16.next = 14;
                        break;
                      }
                      canvas = document.createElement('canvas');
                      canvas.width = data.width;
                      canvas.height = data.height;
                      ctx = canvas.getContext('2d');
                      if (ctx) ctx.putImageData(data, 0, 0);
                      this.image = canvas;
                      return _context16.abrupt("return", {
                        width: data.width,
                        height: data.height
                      });
                    case 14:
                      if (!(data instanceof ImageBitmap)) {
                        _context16.next = 17;
                        break;
                      }
                      this.image = data;
                      return _context16.abrupt("return", {
                        width: data.width,
                        height: data.height
                      });
                    case 17:
                      return _context16.abrupt("return", {
                        width: 0,
                        height: 0
                      });
                    case 18:
                    case "end":
                      return _context16.stop();
                  }
                }, _callee15, this);
              }));
              function onLoadRequest() {
                return _onLoadRequest4.apply(this, arguments);
              }
              return onLoadRequest;
            }()
          }]);
        }(CoreContextTexture);
        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Extract `RoundedRectangle` shader radius to apply as a clipping
         */
        function getRadius(quad) {
          if (quad.shader instanceof UnsupportedShader) {
            var shType = quad.shader.shType;
            if (shType === ROUNDED_RECTANGLE_SHADER_TYPE) {
              var _quad$shaderProps$rad, _quad$shaderProps;
              return (_quad$shaderProps$rad = (_quad$shaderProps = quad.shaderProps) === null || _quad$shaderProps === void 0 ? void 0 : _quad$shaderProps.radius) !== null && _quad$shaderProps$rad !== void 0 ? _quad$shaderProps$rad : 0;
            }
          }
          return 0;
        }

        /*
         * If not stated otherwise in this file or this component's LICENSE file the
         * following copyright and licenses apply:
         *
         * Copyright 2023 Comcast Cable Communications Management, LLC.
         *
         * Licensed under the Apache License, Version 2.0 (the License);
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        var CanvasCoreRenderer = /*#__PURE__*/function (_CoreRenderer3) {
          function CanvasCoreRenderer(options) {
            var _this64;
            _classCallCheck(this, CanvasCoreRenderer);
            _this64 = _callSuper(this, CanvasCoreRenderer, [options]);
            _defineProperty(_this64, "context", void 0);
            _defineProperty(_this64, "canvas", void 0);
            _defineProperty(_this64, "pixelRatio", void 0);
            _defineProperty(_this64, "clearColor", void 0);
            _defineProperty(_this64, "renderToTextureActive", false);
            _defineProperty(_this64, "activeRttNode", null);
            _defineProperty(_this64, "defShaderCtr", void 0);
            _this64.mode = 'canvas';
            _this64.shManager.renderer = _this64;
            var canvas = options.canvas,
              pixelRatio = options.pixelRatio,
              clearColor = options.clearColor;
            _this64.canvas = canvas;
            _this64.context = canvas.getContext('2d');
            _this64.pixelRatio = pixelRatio;
            _this64.clearColor = clearColor ? getRgbaComponents(clearColor) : undefined;
            // Stub for default shader controller since the canvas renderer does not
            // (really) support the concept of a shader (yet)
            _this64.defShaderCtr = {
              type: 'DefaultShader',
              props: {},
              shader: new UnsupportedShader('DefaultShader'),
              getResolvedProps: function getResolvedProps() {
                return function () {
                  return {};
                };
              }
            };
            return _this64;
          }
          _inherits(CanvasCoreRenderer, _CoreRenderer3);
          return _createClass(CanvasCoreRenderer, [{
            key: "reset",
            value: function reset() {
              // eslint-disable-next-line no-self-assign
              this.canvas.width = this.canvas.width; // quick reset canvas
              var ctx = this.context;
              if (this.clearColor) {
                var _this$clearColor = _slicedToArray(this.clearColor, 4),
                  r = _this$clearColor[0],
                  g = _this$clearColor[1],
                  b = _this$clearColor[2],
                  a = _this$clearColor[3];
                ctx.fillStyle = "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a / 255, ")");
                ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
              }
              ctx.scale(this.pixelRatio, this.pixelRatio);
            }
          }, {
            key: "render",
            value: function render() {
              // noop
            }
          }, {
            key: "addQuad",
            value: function addQuad(quad) {
              var ctx = this.context;
              var tx = quad.tx,
                ty = quad.ty,
                width = quad.width,
                height = quad.height,
                alpha = quad.alpha,
                colorTl = quad.colorTl,
                colorTr = quad.colorTr,
                colorBr = quad.colorBr,
                ta = quad.ta,
                tb = quad.tb,
                tc = quad.tc,
                td = quad.td,
                clippingRect = quad.clippingRect;
              var texture = quad.texture;
              var ctxTexture = undefined;
              var frame;
              if (texture) {
                if (texture instanceof SubTexture) {
                  frame = texture.props;
                  texture = texture.parentTexture;
                }
                ctxTexture = texture.ctxTexture;
                if (texture.state === 'freed') {
                  ctxTexture.load();
                  return;
                }
                if (texture.state !== 'loaded' || !ctxTexture.hasImage()) {
                  return;
                }
              }
              var color = parseColor(colorTl);
              var hasTransform = ta !== 1;
              var hasClipping = clippingRect.width !== 0 && clippingRect.height !== 0;
              var hasGradient = colorTl !== colorTr || colorTl !== colorBr;
              var radius = quad.shader ? getRadius(quad) : 0;
              if (hasTransform || hasClipping || radius) {
                ctx.save();
              }
              if (hasClipping) {
                var path = new Path2D();
                var x = clippingRect.x,
                  y = clippingRect.y,
                  _width2 = clippingRect.width,
                  _height2 = clippingRect.height;
                path.rect(x, y, _width2, _height2);
                ctx.clip(path);
              }
              if (hasTransform) {
                // Quad transform:
                // | ta tb tx |
                // | tc td ty |
                // | 0  0  1  |
                // C2D transform:
                // | a  c  e  |
                // | b  d  f  |
                // | 0  0  1  |
                var scale = this.pixelRatio;
                ctx.setTransform(ta, tc, tb, td, tx * scale, ty * scale);
                ctx.scale(scale, scale);
                ctx.translate(-tx, -ty);
              }
              if (radius) {
                var _path = new Path2D();
                _path.roundRect(tx, ty, width, height, radius);
                ctx.clip(_path);
              }
              if (ctxTexture) {
                var image = ctxTexture.getImage(color);
                ctx.globalAlpha = alpha;
                if (frame) {
                  ctx.drawImage(image, frame.x, frame.y, frame.width, frame.height, tx, ty, width, height);
                } else {
                  ctx.drawImage(image, tx, ty, width, height);
                }
                ctx.globalAlpha = 1;
              } else if (hasGradient) {
                var endX = tx;
                var endY = ty;
                var endColor;
                if (colorTl === colorTr) {
                  // vertical
                  endX = tx;
                  endY = ty + height;
                  endColor = parseColor(colorBr);
                } else {
                  // horizontal
                  endX = tx + width;
                  endY = ty;
                  endColor = parseColor(colorTr);
                }
                var gradient = ctx.createLinearGradient(tx, ty, endX, endY);
                gradient.addColorStop(0, formatRgba(color));
                gradient.addColorStop(1, formatRgba(endColor));
                ctx.fillStyle = gradient;
                ctx.fillRect(tx, ty, width, height);
              } else {
                ctx.fillStyle = formatRgba(color);
                ctx.fillRect(tx, ty, width, height);
              }
              if (hasTransform || hasClipping || radius) {
                ctx.restore();
              }
            }
          }, {
            key: "createCtxTexture",
            value: function createCtxTexture(textureSource) {
              return new CanvasCoreTexture(this.txMemManager, textureSource);
            }
          }, {
            key: "getShaderManager",
            value: function getShaderManager() {
              return this.shManager;
            }
          }, {
            key: "getDefShaderCtr",
            value: function getDefShaderCtr() {
              return this.defShaderCtr;
            }
          }, {
            key: "renderRTTNodes",
            value: function renderRTTNodes() {
              // noop
            }
          }, {
            key: "removeRTTNode",
            value: function removeRTTNode(node) {
              // noop
            }
          }, {
            key: "renderToTexture",
            value: function renderToTexture(node) {
              // noop
            }
          }, {
            key: "getBufferInfo",
            value: function getBufferInfo() {
              return null;
            }
          }]);
        }(CoreRenderer);
        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
        // MAIN //
        var main$2O = typeof Object.defineProperty === 'function' ? Object.defineProperty : null;

        // EXPORTS //

        var define_property = main$2O;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var defineProperty$8 = define_property;

        // MAIN //

        /**
        * Tests for `Object.defineProperty` support.
        *
        * @private
        * @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
        *
        * @example
        * var bool = hasDefinePropertySupport();
        * // returns <boolean>
        */
        function hasDefinePropertySupport$1() {
          // Test basic support...
          try {
            defineProperty$8({}, 'x', {});
            return true;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            return false;
          }
        }

        // EXPORTS //

        var has_define_property_support = hasDefinePropertySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Defines (or modifies) an object property.
        *
        * ## Notes
        *
        * -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
        *
        * @name defineProperty
        * @type {Function}
        * @param {Object} obj - object on which to define the property
        * @param {(string|symbol)} prop - property name
        * @param {Object} descriptor - property descriptor
        * @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
        * @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
        * @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
        * @param {*} [descriptor.value] - property value
        * @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
        * @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
        * @throws {TypeError} first argument must be an object
        * @throws {TypeError} third argument must be an object
        * @throws {Error} property descriptor cannot have both a value and a setter and/or getter
        * @returns {Object} object with added property
        *
        * @example
        * var obj = {};
        *
        * defineProperty( obj, 'foo', {
        *     'value': 'bar'
        * });
        *
        * var str = obj.foo;
        * // returns 'bar'
        */
        var defineProperty$7 = Object.defineProperty;

        // EXPORTS //

        var builtin$e = defineProperty$7;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is a number primitive.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number primitive
        *
        * @example
        * var bool = isNumber( 3.14 );
        * // returns true
        *
        * @example
        * var bool = isNumber( NaN );
        * // returns true
        *
        * @example
        * var bool = isNumber( new Number( 3.14 ) );
        * // returns false
        */
        function isNumber$9(value) {
          return typeof value === 'number'; // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.
        }

        // EXPORTS //

        var is_number = isNumber$9;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // FUNCTIONS //

        /**
        * Tests if a string starts with a minus sign (`-`).
        *
        * @private
        * @param {string} str - input string
        * @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)
        */
        function startsWithMinus(str) {
          return str[0] === '-';
        }

        /**
        * Returns a string of `n` zeros.
        *
        * @private
        * @param {number} n - number of zeros
        * @returns {string} string of zeros
        */
        function zeros(n) {
          var out = '';
          var i;
          for (i = 0; i < n; i++) {
            out += '0';
          }
          return out;
        }

        // MAIN //

        /**
        * Pads a token with zeros to the specified width.
        *
        * @private
        * @param {string} str - token argument
        * @param {number} width - token width
        * @param {boolean} [right=false] - boolean indicating whether to pad to the right
        * @returns {string} padded token argument
        */
        function zeroPad$2(str, width, right) {
          var negative = false;
          var pad = width - str.length;
          if (pad < 0) {
            return str;
          }
          if (startsWithMinus(str)) {
            negative = true;
            str = str.substr(1);
          }
          str = right ? str + zeros(pad) : zeros(pad) + str;
          if (negative) {
            str = '-' + str;
          }
          return str;
        }

        // EXPORTS //

        var zero_pad = zeroPad$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isNumber$8 = is_number;
        var zeroPad$1 = zero_pad;

        // NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.
        var lowercase$1 = String.prototype.toLowerCase;
        var uppercase$1 = String.prototype.toUpperCase;

        // MAIN //

        /**
        * Formats a token object argument as an integer.
        *
        * @private
        * @param {Object} token - token object
        * @throws {Error} must provide a valid integer
        * @returns {string} formatted token argument
        */
        function formatInteger$1(token) {
          var base;
          var out;
          var i;
          switch (token.specifier) {
            case 'b':
              // Case: %b (binary)
              base = 2;
              break;
            case 'o':
              // Case: %o (octal)
              base = 8;
              break;
            case 'x':
            case 'X':
              // Case: %x, %X (hexadecimal)
              base = 16;
              break;
            case 'd':
            case 'i':
            case 'u':
            default:
              // Case: %d, %i, %u (decimal)
              base = 10;
              break;
          }
          out = token.arg;
          i = parseInt(out, 10);
          if (!isFinite(i)) {
            // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.
            if (!isNumber$8(out)) {
              throw new Error('invalid integer. Value: ' + out);
            }
            i = 0;
          }
          if (i < 0 && (token.specifier === 'u' || base !== 10)) {
            i = 0xffffffff + i + 1;
          }
          if (i < 0) {
            out = (-i).toString(base);
            if (token.precision) {
              out = zeroPad$1(out, token.precision, token.padRight);
            }
            out = '-' + out;
          } else {
            out = i.toString(base);
            if (!i && !token.precision) {
              out = '';
            } else if (token.precision) {
              out = zeroPad$1(out, token.precision, token.padRight);
            }
            if (token.sign) {
              out = token.sign + out;
            }
          }
          if (base === 16) {
            if (token.alternate) {
              out = '0x' + out;
            }
            out = token.specifier === uppercase$1.call(token.specifier) ? uppercase$1.call(out) : lowercase$1.call(out);
          }
          if (base === 8) {
            if (token.alternate && out.charAt(0) !== '0') {
              out = '0' + out;
            }
          }
          return out;
        }

        // EXPORTS //

        var format_integer = formatInteger$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is a string primitive.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a string primitive
        *
        * @example
        * var bool = isString( 'beep' );
        * // returns true
        *
        * @example
        * var bool = isString( new String( 'beep' ) );
        * // returns false
        */
        function isString$8(value) {
          return typeof value === 'string'; // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.
        }

        // EXPORTS //

        var is_string$1 = isString$8;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isNumber$7 = is_number;

        // NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.
        var abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math
        var lowercase = String.prototype.toLowerCase;
        var uppercase = String.prototype.toUpperCase;
        var replace = String.prototype.replace;

        // VARIABLES //

        var RE_EXP_POS_DIGITS = /e\+(\d)$/;
        var RE_EXP_NEG_DIGITS = /e-(\d)$/;
        var RE_ONLY_DIGITS = /^(\d+)$/;
        var RE_DIGITS_BEFORE_EXP = /^(\d+)e/;
        var RE_TRAILING_PERIOD_ZERO = /\.0$/;
        var RE_PERIOD_ZERO_EXP = /\.0*e/;
        var RE_ZERO_BEFORE_EXP = /(\..*[^0])0*e/;

        // MAIN //

        /**
        * Formats a token object argument as a floating-point number.
        *
        * @private
        * @param {Object} token - token object
        * @throws {Error} must provide a valid floating-point number
        * @returns {string} formatted token argument
        */
        function formatDouble$1(token) {
          var digits;
          var out;
          var f = parseFloat(token.arg);
          if (!isFinite(f)) {
            // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.
            if (!isNumber$7(token.arg)) {
              throw new Error('invalid floating-point number. Value: ' + out);
            }
            // Case: NaN, Infinity, or -Infinity
            f = token.arg;
          }
          switch (token.specifier) {
            case 'e':
            case 'E':
              out = f.toExponential(token.precision);
              break;
            case 'f':
            case 'F':
              out = f.toFixed(token.precision);
              break;
            case 'g':
            case 'G':
              if (abs(f) < 0.0001) {
                digits = token.precision;
                if (digits > 0) {
                  digits -= 1;
                }
                out = f.toExponential(digits);
              } else {
                out = f.toPrecision(token.precision);
              }
              if (!token.alternate) {
                out = replace.call(out, RE_ZERO_BEFORE_EXP, '$1e');
                out = replace.call(out, RE_PERIOD_ZERO_EXP, 'e');
                out = replace.call(out, RE_TRAILING_PERIOD_ZERO, '');
              }
              break;
            default:
              throw new Error('invalid double notation. Value: ' + token.specifier);
          }
          out = replace.call(out, RE_EXP_POS_DIGITS, 'e+0$1');
          out = replace.call(out, RE_EXP_NEG_DIGITS, 'e-0$1');
          if (token.alternate) {
            out = replace.call(out, RE_ONLY_DIGITS, '$1.');
            out = replace.call(out, RE_DIGITS_BEFORE_EXP, '$1.e');
          }
          if (f >= 0 && token.sign) {
            out = token.sign + out;
          }
          out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);
          return out;
        }

        // EXPORTS //

        var format_double = formatDouble$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // FUNCTIONS //

        /**
        * Returns `n` spaces.
        *
        * @private
        * @param {number} n - number of spaces
        * @returns {string} string of spaces
        */
        function spaces(n) {
          var out = '';
          var i;
          for (i = 0; i < n; i++) {
            out += ' ';
          }
          return out;
        }

        // MAIN //

        /**
        * Pads a token with spaces to the specified width.
        *
        * @private
        * @param {string} str - token argument
        * @param {number} width - token width
        * @param {boolean} [right=false] - boolean indicating whether to pad to the right
        * @returns {string} padded token argument
        */
        function spacePad$1(str, width, right) {
          var pad = width - str.length;
          if (pad < 0) {
            return str;
          }
          str = right ? str + spaces(pad) : spaces(pad) + str;
          return str;
        }

        // EXPORTS //

        var space_pad = spacePad$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var formatInteger = format_integer;
        var isString$7 = is_string$1;
        var formatDouble = format_double;
        var spacePad = space_pad;
        var zeroPad = zero_pad;

        // VARIABLES //

        var fromCharCode = String.fromCharCode;
        var isnan$2 = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.
        var isArray$6 = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.

        // FUNCTIONS //

        /**
        * Initializes token object with properties of supplied format identifier object or default values if not present.
        *
        * @private
        * @param {Object} token - format identifier object
        * @returns {Object} token object
        */
        function initialize(token) {
          var out = {};
          out.specifier = token.specifier;
          out.precision = token.precision === void 0 ? 1 : token.precision;
          out.width = token.width;
          out.flags = token.flags || '';
          out.mapping = token.mapping;
          return out;
        }

        // MAIN //

        /**
        * Generates string from a token array by interpolating values.
        *
        * @param {Array} tokens - string parts and format identifier objects
        * @param {Array} ...args - variable values
        * @throws {TypeError} first argument must be an array
        * @throws {Error} invalid flags
        * @returns {string} formatted string
        *
        * @example
        * var tokens = [ 'beep ', { 'specifier': 's' } ];
        * var out = formatInterpolate( tokens, 'boop' );
        * // returns 'beep boop'
        */
        function formatInterpolate(tokens) {
          var hasPeriod;
          var flags;
          var token;
          var flag;
          var num;
          var out;
          var pos;
          var i;
          var j;
          if (!isArray$6(tokens)) {
            throw new TypeError('invalid argument. First argument must be an array. Value: `' + tokens + '`.');
          }
          out = '';
          pos = 1;
          for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            if (isString$7(token)) {
              out += token;
            } else {
              hasPeriod = token.precision !== void 0;
              token = initialize(token);
              if (!token.specifier) {
                throw new TypeError('invalid argument. Token is missing `specifier` property. Index: `' + i + '`. Value: `' + token + '`.');
              }
              if (token.mapping) {
                pos = token.mapping;
              }
              flags = token.flags;
              for (j = 0; j < flags.length; j++) {
                flag = flags.charAt(j);
                switch (flag) {
                  case ' ':
                    token.sign = ' ';
                    break;
                  case '+':
                    token.sign = '+';
                    break;
                  case '-':
                    token.padRight = true;
                    token.padZeros = false;
                    break;
                  case '0':
                    token.padZeros = flags.indexOf('-') < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.
                    break;
                  case '#':
                    token.alternate = true;
                    break;
                  default:
                    throw new Error('invalid flag: ' + flag);
                }
              }
              if (token.width === '*') {
                token.width = parseInt(arguments[pos], 10);
                pos += 1;
                if (isnan$2(token.width)) {
                  throw new TypeError('the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.');
                }
                if (token.width < 0) {
                  token.padRight = true;
                  token.width = -token.width;
                }
              }
              if (hasPeriod) {
                if (token.precision === '*') {
                  token.precision = parseInt(arguments[pos], 10);
                  pos += 1;
                  if (isnan$2(token.precision)) {
                    throw new TypeError('the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.');
                  }
                  if (token.precision < 0) {
                    token.precision = 1;
                    hasPeriod = false;
                  }
                }
              }
              token.arg = arguments[pos];
              switch (token.specifier) {
                case 'b':
                case 'o':
                case 'x':
                case 'X':
                case 'd':
                case 'i':
                case 'u':
                  // Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)
                  if (hasPeriod) {
                    token.padZeros = false;
                  }
                  token.arg = formatInteger(token);
                  break;
                case 's':
                  // Case: %s (string)
                  token.maxWidth = hasPeriod ? token.precision : -1;
                  break;
                case 'c':
                  // Case: %c (character)
                  if (!isnan$2(token.arg)) {
                    num = parseInt(token.arg, 10);
                    if (num < 0 || num > 127) {
                      throw new Error('invalid character code. Value: ' + token.arg);
                    }
                    token.arg = isnan$2(num) ? String(token.arg) : fromCharCode(num);
                  }
                  break;
                case 'e':
                case 'E':
                case 'f':
                case 'F':
                case 'g':
                case 'G':
                  // Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)
                  if (!hasPeriod) {
                    token.precision = 6;
                  }
                  token.arg = formatDouble(token);
                  break;
                default:
                  throw new Error('invalid specifier: ' + token.specifier);
              }
              // Fit argument into field width...
              if (token.maxWidth >= 0 && token.arg.length > token.maxWidth) {
                token.arg = token.arg.substring(0, token.maxWidth);
              }
              if (token.padZeros) {
                token.arg = zeroPad(token.arg, token.width || token.precision, token.padRight); // eslint-disable-line max-len
              } else if (token.width) {
                token.arg = spacePad(token.arg, token.width, token.padRight);
              }
              out += token.arg || '';
              pos += 1;
            }
          }
          return out;
        }

        // EXPORTS //

        var main$2N = formatInterpolate;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Generate string from a token array by interpolating values.
        *
        * @module @stdlib/string-base-format-interpolate
        *
        * @example
        * var formatInterpolate = require( '@stdlib/string-base-format-interpolate' );
        *
        * var tokens = ['Hello ', { 'specifier': 's' }, '!' ];
        * var out = formatInterpolate( tokens, 'World' );
        * // returns 'Hello World!'
        */

        // MODULES //

        var main$2M = main$2N;

        // EXPORTS //

        var lib$1N = main$2M;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var RE$4 = /%(?:([1-9]\d*)\$)?([0 +\-#]*)(\*|\d+)?(?:(\.)(\*|\d+)?)?[hlL]?([%A-Za-z])/g;

        // FUNCTIONS //

        /**
        * Parses a delimiter.
        *
        * @private
        * @param {Array} match - regular expression match
        * @returns {Object} delimiter token object
        */
        function parse(match) {
          var token = {
            'mapping': match[1] ? parseInt(match[1], 10) : void 0,
            'flags': match[2],
            'width': match[3],
            'precision': match[5],
            'specifier': match[6]
          };
          if (match[4] === '.' && match[5] === void 0) {
            token.precision = '1';
          }
          return token;
        }

        // MAIN //

        /**
        * Tokenizes a string into an array of string parts and format identifier objects.
        *
        * @param {string} str - input string
        * @returns {Array} tokens
        *
        * @example
        * var tokens = formatTokenize( 'Hello %s!' );
        * // returns [ 'Hello ', {...}, '!' ]
        */
        function formatTokenize(str) {
          var content;
          var tokens;
          var match;
          var prev;
          tokens = [];
          prev = 0;
          match = RE$4.exec(str);
          while (match) {
            content = str.slice(prev, RE$4.lastIndex - match[0].length);
            if (content.length) {
              tokens.push(content);
            }
            tokens.push(parse(match));
            prev = RE$4.lastIndex;
            match = RE$4.exec(str);
          }
          content = str.slice(prev);
          if (content.length) {
            tokens.push(content);
          }
          return tokens;
        }

        // EXPORTS //

        var main$2L = formatTokenize;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tokenize a string into an array of string parts and format identifier objects.
        *
        * @module @stdlib/string-base-format-tokenize
        *
        * @example
        * var formatTokenize = require( '@stdlib/string-base-format-tokenize' );
        *
        * var str = 'Hello %s!';
        * var tokens = formatTokenize( str );
        * // returns [ 'Hello ', {...}, '!' ]
        */

        // MODULES //

        var main$2K = main$2L;

        // EXPORTS //

        var lib$1M = main$2K;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is a string primitive.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a string primitive
        *
        * @example
        * var bool = isString( 'beep' );
        * // returns true
        *
        * @example
        * var bool = isString( new String( 'beep' ) );
        * // returns false
        */
        function isString$6(value) {
          return typeof value === 'string'; // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.
        }

        // EXPORTS //

        var is_string = isString$6;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var interpolate = lib$1N;
        var tokenize = lib$1M;
        var isString$5 = is_string;

        // MAIN //

        /**
        * Inserts supplied variable values into a format string.
        *
        * @param {string} str - input string
        * @param {Array} ...args - variable values
        * @throws {TypeError} first argument must be a string
        * @throws {Error} invalid flags
        * @returns {string} formatted string
        *
        * @example
        * var str = format( 'Hello %s!', 'world' );
        * // returns 'Hello world!'
        *
        * @example
        * var str = format( 'Pi: ~%.2f', 3.141592653589793 );
        * // returns 'Pi: ~3.14'
        */
        function format$f(str) {
          var args;
          var i;
          if (!isString$5(str)) {
            throw new TypeError(format$f('invalid argument. First argument must be a string. Value: `%s`.', str));
          }
          args = [tokenize(str)];
          for (i = 1; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          return interpolate.apply(null, args);
        }

        // EXPORTS //

        var main$2J = format$f;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Insert supplied variable values into a format string.
        *
        * @module @stdlib/string-format
        *
        * @example
        * var format = require( '@stdlib/string-format' );
        *
        * var out = format( '%s %s!', 'Hello', 'World' );
        * // returns 'Hello World!'
        *
        * out = format( 'Pi: ~%.2f', 3.141592653589793 );
        * // returns 'Pi: ~3.14'
        */

        // MODULES //

        var main$2I = main$2J;

        // EXPORTS //

        var lib$1L = main$2I;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var format$e = lib$1L;

        // VARIABLES //

        var objectProtoype = Object.prototype;
        var toStr$5 = objectProtoype.toString;
        var defineGetter = objectProtoype.__defineGetter__;
        var defineSetter = objectProtoype.__defineSetter__;
        var lookupGetter = objectProtoype.__lookupGetter__;
        var lookupSetter = objectProtoype.__lookupSetter__;

        // MAIN //

        /**
        * Defines (or modifies) an object property.
        *
        * ## Notes
        *
        * -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
        *
        * @param {Object} obj - object on which to define the property
        * @param {string} prop - property name
        * @param {Object} descriptor - property descriptor
        * @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
        * @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
        * @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
        * @param {*} [descriptor.value] - property value
        * @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
        * @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
        * @throws {TypeError} first argument must be an object
        * @throws {TypeError} third argument must be an object
        * @throws {Error} property descriptor cannot have both a value and a setter and/or getter
        * @returns {Object} object with added property
        *
        * @example
        * var obj = {};
        *
        * defineProperty( obj, 'foo', {
        *     'value': 'bar'
        * });
        *
        * var str = obj.foo;
        * // returns 'bar'
        */
        function defineProperty$6(obj, prop, descriptor) {
          var prototype;
          var hasValue;
          var hasGet;
          var hasSet;
          if (typeof obj !== 'object' || obj === null || toStr$5.call(obj) === '[object Array]') {
            throw new TypeError(format$e('invalid argument. First argument must be an object. Value: `%s`.', obj));
          }
          if (typeof descriptor !== 'object' || descriptor === null || toStr$5.call(descriptor) === '[object Array]') {
            throw new TypeError(format$e('invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor));
          }
          hasValue = 'value' in descriptor;
          if (hasValue) {
            if (lookupGetter.call(obj, prop) || lookupSetter.call(obj, prop)) {
              // Override `__proto__` to avoid touching inherited accessors:
              prototype = obj.__proto__;
              obj.__proto__ = objectProtoype;

              // Delete property as existing getters/setters prevent assigning value to specified property:
              delete obj[prop];
              obj[prop] = descriptor.value;

              // Restore original prototype:
              obj.__proto__ = prototype;
            } else {
              obj[prop] = descriptor.value;
            }
          }
          hasGet = 'get' in descriptor;
          hasSet = 'set' in descriptor;
          if (hasValue && (hasGet || hasSet)) {
            throw new Error('invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.');
          }
          if (hasGet && defineGetter) {
            defineGetter.call(obj, prop, descriptor.get);
          }
          if (hasSet && defineSetter) {
            defineSetter.call(obj, prop, descriptor.set);
          }
          return obj;
        }

        // EXPORTS //

        var polyfill$r = defineProperty$6;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Define (or modify) an object property.
        *
        * @module @stdlib/utils-define-property
        *
        * @example
        * var defineProperty = require( '@stdlib/utils-define-property' );
        *
        * var obj = {};
        * defineProperty( obj, 'foo', {
        *     'value': 'bar',
        *     'writable': false,
        *     'configurable': false,
        *     'enumerable': false
        * });
        * obj.foo = 'boop'; // => throws
        */

        // MODULES //

        var hasDefinePropertySupport = has_define_property_support;
        var builtin$d = builtin$e;
        var polyfill$q = polyfill$r;

        // MAIN //

        var defineProperty$5;
        if (hasDefinePropertySupport()) {
          defineProperty$5 = builtin$d;
        } else {
          defineProperty$5 = polyfill$q;
        }

        // EXPORTS //

        var lib$1K = defineProperty$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var defineProperty$4 = lib$1K;

        // MAIN //

        /**
        * Defines a non-enumerable read-only property.
        *
        * @param {Object} obj - object on which to define the property
        * @param {(string|symbol)} prop - property name
        * @param {*} value - value to set
        *
        * @example
        * var obj = {};
        *
        * setNonEnumerableReadOnly( obj, 'foo', 'bar' );
        *
        * try {
        *     obj.foo = 'boop';
        * } catch ( err ) {
        *     console.error( err.message );
        * }
        */
        function setNonEnumerableReadOnly(obj, prop, value) {
          defineProperty$4(obj, prop, {
            'configurable': false,
            'enumerable': false,
            'writable': false,
            'value': value
          });
        }

        // EXPORTS //

        var main$2H = setNonEnumerableReadOnly;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Define a non-enumerable read-only property.
        *
        * @module @stdlib/utils-define-nonenumerable-read-only-property
        *
        * @example
        * var setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );
        *
        * var obj = {};
        *
        * setNonEnumerableReadOnly( obj, 'foo', 'bar' );
        *
        * try {
        *     obj.foo = 'boop';
        * } catch ( err ) {
        *     console.error( err.message );
        * }
        */

        // MODULES //

        var main$2G = main$2H;

        // EXPORTS //

        var lib$1J = main$2G;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var defineProperty$3 = lib$1K;

        // MAIN //

        /**
        * Defines a non-enumerable read-only accessor.
        *
        * @param {Object} obj - object on which to define the property
        * @param {(string|symbol)} prop - property name
        * @param {Function} getter - accessor
        *
        * @example
        * function getter() {
        *     return 'bar';
        * }
        *
        * var obj = {};
        *
        * setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
        *
        * try {
        *     obj.foo = 'boop';
        * } catch ( err ) {
        *     console.error( err.message );
        * }
        */
        function setNonEnumerableReadOnlyAccessor(obj, prop, getter) {
          // eslint-disable-line id-length
          defineProperty$3(obj, prop, {
            'configurable': false,
            'enumerable': false,
            'get': getter
          });
        }

        // EXPORTS //

        var main$2F = setNonEnumerableReadOnlyAccessor;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Define a non-enumerable read-only accessor.
        *
        * @module @stdlib/utils-define-nonenumerable-read-only-accessor
        *
        * @example
        * var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );
        *
        * function getter() {
        *     return 'bar';
        * }
        *
        * var obj = {};
        *
        * setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
        *
        * try {
        *     obj.foo = 'boop';
        * } catch ( err ) {
        *     console.error( err.message );
        * }
        */

        // MODULES //

        var main$2E = main$2F;

        // EXPORTS //

        var lib$1I = main$2E;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var defineProperty$2 = lib$1K;

        // MAIN //

        /**
        * Defines a non-enumerable read-write accessor.
        *
        * @param {Object} obj - object on which to define the property
        * @param {(string|symbol)} prop - property name
        * @param {Function} getter - get accessor
        * @param {Function} setter - set accessor
        *
        * @example
        * function getter() {
        *     return name + ' foo';
        * }
        *
        * function setter( v ) {
        *     name = v;
        * }
        *
        * var name = 'bar';
        * var obj = {};
        *
        * setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
        *
        * var v = obj.foo;
        * // returns 'bar foo'
        *
        * obj.foo = 'beep';
        *
        * v = obj.foo;
        * // returns 'beep foo'
        */
        function setNonEnumerableReadWriteAccessor(obj, prop, getter, setter) {
          // eslint-disable-line id-length
          defineProperty$2(obj, prop, {
            'configurable': false,
            'enumerable': false,
            'get': getter,
            'set': setter
          });
        }

        // EXPORTS //

        var main$2D = setNonEnumerableReadWriteAccessor;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Define a non-enumerable read-write accessor.
        *
        * @module @stdlib/utils-define-nonenumerable-read-write-accessor
        *
        * @example
        * var setNonEnumerableReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );
        *
        * function getter() {
        *     return name + ' foo';
        * }
        *
        * function setter( v ) {
        *     name = v;
        * }
        *
        * var name = 'bar';
        * var obj = {};
        *
        * setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
        *
        * var v = obj.foo;
        * // returns 'bar foo'
        *
        * obj.foo = 'beep';
        *
        * v = obj.foo;
        * // returns 'beep foo'
        */

        // MODULES //

        var main$2C = main$2D;

        // EXPORTS //

        var lib$1H = main$2C;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // FUNCTIONS //

        var has = Object.prototype.hasOwnProperty;

        // MAIN //

        /**
        * Tests if an object has a specified property.
        *
        * @param {*} value - value to test
        * @param {*} property - property to test
        * @returns {boolean} boolean indicating if an object has a specified property
        *
        * @example
        * var beep = {
        *     'boop': true
        * };
        *
        * var bool = hasOwnProp( beep, 'boop' );
        * // returns true
        *
        * @example
        * var beep = {
        *     'boop': true
        * };
        *
        * var bool = hasOwnProp( beep, 'bap' );
        * // returns false
        */
        function hasOwnProp$4(value, property) {
          if (value === void 0 || value === null) {
            return false;
          }
          return has.call(value, property);
        }

        // EXPORTS //

        var main$2B = hasOwnProp$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test whether an object has a specified property.
        *
        * @module @stdlib/assert-has-own-property
        *
        * @example
        * var hasOwnProp = require( '@stdlib/assert-has-own-property' );
        *
        * var beep = {
        *     'boop': true
        * };
        *
        * var bool = hasOwnProp( beep, 'boop' );
        * // returns true
        *
        * bool = hasOwnProp( beep, 'bop' );
        * // returns false
        */

        // MODULES //

        var main$2A = main$2B;

        // EXPORTS //

        var lib$1G = main$2A;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Tests for native `Symbol` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Symbol` support
        *
        * @example
        * var bool = hasSymbolSupport();
        * // returns <boolean>
        */
        function hasSymbolSupport() {
          return typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
        }

        // EXPORTS //

        var main$2z = hasSymbolSupport;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Symbol` support.
        *
        * @module @stdlib/assert-has-symbol-support
        *
        * @example
        * var hasSymbolSupport = require( '@stdlib/assert-has-symbol-support' );
        *
        * var bool = hasSymbolSupport();
        * // returns <boolean>
        */

        // MODULES //

        var main$2y = main$2z;

        // EXPORTS //

        var lib$1F = main$2y;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasSymbols = lib$1F;

        // VARIABLES //

        var FLG$3 = hasSymbols();

        // MAIN //

        /**
        * Tests for native `toStringTag` support.
        *
        * @returns {boolean} boolean indicating if an environment has `toStringTag` support
        *
        * @example
        * var bool = hasToStringTagSupport();
        * // returns <boolean>
        */
        function hasToStringTagSupport() {
          return FLG$3 && typeof Symbol.toStringTag === 'symbol';
        }

        // EXPORTS //

        var main$2x = hasToStringTagSupport;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `toStringTag` support.
        *
        * @module @stdlib/assert-has-tostringtag-support
        *
        * @example
        * var hasToStringTagSupport = require( '@stdlib/assert-has-tostringtag-support' );
        *
        * var bool = hasToStringTagSupport();
        * // returns <boolean>
        */

        // MODULES //

        var main$2w = main$2x;

        // EXPORTS //

        var lib$1E = main$2w;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var toStr$4 = Object.prototype.toString;

        // EXPORTS //

        var tostring$4 = toStr$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var toStr$3 = tostring$4;

        // MAIN //

        /**
        * Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
        *
        * @param {*} v - input value
        * @returns {string} string value indicating a specification defined classification of the input value
        *
        * @example
        * var str = nativeClass( 'a' );
        * // returns '[object String]'
        *
        * @example
        * var str = nativeClass( 5 );
        * // returns '[object Number]'
        *
        * @example
        * function Beep() {
        *     return this;
        * }
        * var str = nativeClass( new Beep() );
        * // returns '[object Object]'
        */
        function nativeClass$i(v) {
          return toStr$3.call(v);
        }

        // EXPORTS //

        var main$2v = nativeClass$i;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var Sym = typeof Symbol === 'function' ? Symbol : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$2u = Sym;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Symbol factory.
        *
        * @module @stdlib/symbol-ctor
        *
        * @example
        * var Symbol = require( '@stdlib/symbol-ctor' );
        *
        * var s = Symbol( 'beep' );
        * // returns <symbol>
        */

        // MODULES //

        var main$2t = main$2u;

        // EXPORTS //

        var lib$1D = main$2t;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Symbol$2 = lib$1D;

        // MAIN //

        var toStrTag = typeof Symbol$2 === 'function' ? Symbol$2.toStringTag : '';

        // EXPORTS //

        var tostringtag = toStrTag;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasOwnProp$3 = lib$1G;
        var toStringTag = tostringtag;
        var toStr$2 = tostring$4;

        // MAIN //

        /**
        * Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
        *
        * @param {*} v - input value
        * @returns {string} string value indicating a specification defined classification of the input value
        *
        * @example
        * var str = nativeClass( 'a' );
        * // returns '[object String]'
        *
        * @example
        * var str = nativeClass( 5 );
        * // returns '[object Number]'
        *
        * @example
        * function Beep() {
        *     return this;
        * }
        * var str = nativeClass( new Beep() );
        * // returns '[object Object]'
        */
        function nativeClass$h(v) {
          var isOwn;
          var tag;
          var out;
          if (v === null || v === void 0) {
            return toStr$2.call(v);
          }
          tag = v[toStringTag];
          isOwn = hasOwnProp$3(v, toStringTag);

          // Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
          try {
            v[toStringTag] = void 0;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            return toStr$2.call(v);
          }
          out = toStr$2.call(v);
          if (isOwn) {
            v[toStringTag] = tag;
          } else {
            delete v[toStringTag];
          }
          return out;
        }

        // EXPORTS //

        var polyfill$p = nativeClass$h;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return a string value indicating a specification defined classification of an object.
        *
        * @module @stdlib/utils-native-class
        *
        * @example
        * var nativeClass = require( '@stdlib/utils-native-class' );
        *
        * var str = nativeClass( 'a' );
        * // returns '[object String]'
        *
        * str = nativeClass( 5 );
        * // returns '[object Number]'
        *
        * function Beep() {
        *     return this;
        * }
        * str = nativeClass( new Beep() );
        * // returns '[object Object]'
        */

        // MODULES //

        var hasToStringTag$3 = lib$1E;
        var builtin$c = main$2v;
        var polyfill$o = polyfill$p;

        // MAIN //

        var main$2s;
        if (hasToStringTag$3()) {
          main$2s = polyfill$o;
        } else {
          main$2s = builtin$c;
        }

        // EXPORTS //

        var lib$1C = main$2s;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$g = lib$1C;

        // VARIABLES //

        var f;

        // FUNCTIONS //

        /**
        * Tests if a value is an array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an array
        *
        * @example
        * var bool = isArray( [] );
        * // returns true
        *
        * @example
        * var bool = isArray( {} );
        * // returns false
        */
        function isArray$5(value) {
          return nativeClass$g(value) === '[object Array]';
        }

        // MAIN //

        if (Array.isArray) {
          f = Array.isArray;
        } else {
          f = isArray$5;
        }

        // EXPORTS //

        var main$2r = f;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an array.
        *
        * @module @stdlib/assert-is-array
        *
        * @example
        * var isArray = require( '@stdlib/assert-is-array' );
        *
        * var bool = isArray( [] );
        * // returns true
        *
        * bool = isArray( {} );
        * // returns false
        */

        // MODULES //

        var main$2q = main$2r;

        // EXPORTS //

        var lib$1B = main$2q;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isArray$4 = lib$1B;

        // MAIN //

        /**
        * Tests if a value is an object; e.g., `{}`.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an object
        *
        * @example
        * var bool = isObject( {} );
        * // returns true
        *
        * @example
        * var bool = isObject( null );
        * // returns false
        */
        function isObject$g(value) {
          return typeof value === 'object' && value !== null && !isArray$4(value);
        }

        // EXPORTS //

        var main$2p = isObject$g;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an object.
        *
        * @module @stdlib/assert-is-object
        *
        * @example
        * var isObject = require( '@stdlib/assert-is-object' );
        *
        * var bool = isObject( {} );
        * // returns true
        *
        * bool = isObject( true );
        * // returns false
        */

        // MODULES //

        var main$2o = main$2p;

        // EXPORTS //

        var lib$1A = main$2o;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        var RE$3 = /./;

        // EXPORTS //

        var re = RE$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is a boolean primitive.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a boolean primitive
        *
        * @example
        * var bool = isBoolean( true );
        * // returns true
        *
        * @example
        * var bool = isBoolean( false );
        * // returns true
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        *
        * var bool = isBoolean( new Boolean( true ) );
        * // returns false
        */
        function isBoolean$4(value) {
          return typeof value === 'boolean';
        }

        // EXPORTS //

        var primitive$5 = isBoolean$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Returns a boolean.
        *
        * @name Boolean
        * @constructor
        * @type {Function}
        * @param {*} value - input value
        * @returns {(boolean|Boolean)} boolean
        *
        * @example
        * var b = Boolean( null );
        * // returns false
        *
        * b = Boolean( [] );
        * // returns true
        *
        * b = Boolean( {} );
        * // returns true
        *
        * @example
        * var b = new Boolean( false );
        * // returns <Boolean>
        */
        var Bool = Boolean; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$2n = Bool;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Boolean constructor.
        *
        * @module @stdlib/boolean-ctor
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        *
        * var b = Boolean( null );
        * // returns false
        *
        * b = Boolean( [] );
        * // returns true
        *
        * b = Boolean( {} );
        * // returns true
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        *
        * var b = new Boolean( false );
        * // returns <Boolean>
        */

        // MODULES //

        var main$2m = main$2n;

        // EXPORTS //

        var lib$1z = main$2m;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // eslint-disable-next-line stdlib/no-redeclare
        var toString$5 = Boolean.prototype.toString; // non-generic

        // EXPORTS //

        var tostring$3 = toString$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var toString$4 = tostring$3; // eslint-disable-line stdlib/no-redeclare

        // MAIN //

        /**
        * Attempts to serialize a value to a string.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value can be serialized
        */
        function test$5(value) {
          try {
            toString$4.call(value);
            return true;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            return false;
          }
        }

        // EXPORTS //

        var try2serialize$1 = test$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasToStringTag$2 = lib$1E;
        var nativeClass$f = lib$1C;
        var Boolean$1 = lib$1z;
        var test$4 = try2serialize$1;

        // VARIABLES //

        var FLG$2 = hasToStringTag$2();

        // MAIN //

        /**
        * Tests if a value is a boolean object.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a boolean object
        *
        * @example
        * var bool = isBoolean( true );
        * // returns false
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        *
        * var bool = isBoolean( new Boolean( false ) );
        * // returns true
        */
        function isBoolean$3(value) {
          if (typeof value === 'object') {
            if (value instanceof Boolean$1) {
              return true;
            }
            if (FLG$2) {
              return test$4(value);
            }
            return nativeClass$f(value) === '[object Boolean]';
          }
          return false;
        }

        // EXPORTS //

        var object$5 = isBoolean$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPrimitive$b = primitive$5;
        var isObject$f = object$5;

        // MAIN //

        /**
        * Tests if a value is a boolean.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a boolean
        *
        * @example
        * var bool = isBoolean( false );
        * // returns true
        *
        * @example
        * var bool = isBoolean( true );
        * // returns true
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        *
        * var bool = isBoolean( new Boolean( false ) );
        * // returns true
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        *
        * var bool = isBoolean( new Boolean( true ) );
        * // returns true
        */
        function isBoolean$2(value) {
          return isPrimitive$b(value) || isObject$f(value);
        }

        // EXPORTS //

        var main$2l = isBoolean$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a boolean.
        *
        * @module @stdlib/assert-is-boolean
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        * var isBoolean = require( '@stdlib/assert-is-boolean' );
        *
        * var bool = isBoolean( false );
        * // returns true
        *
        * bool = isBoolean( new Boolean( false ) );
        * // returns true
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        * var isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;
        *
        * var bool = isBoolean( false );
        * // returns true
        *
        * bool = isBoolean( new Boolean( true ) );
        * // returns false
        *
        * @example
        * var Boolean = require( '@stdlib/boolean-ctor' );
        * var isBoolean = require( '@stdlib/assert-is-boolean' ).isObject;
        *
        * var bool = isBoolean( true );
        * // returns false
        *
        * bool = isBoolean( new Boolean( false ) );
        * // returns true
        */

        // MODULES //

        var setReadOnly$e = lib$1J;
        var main$2k = main$2l;
        var isPrimitive$a = primitive$5;
        var isObject$e = object$5;

        // MAIN //

        setReadOnly$e(main$2k, 'isPrimitive', isPrimitive$a);
        setReadOnly$e(main$2k, 'isObject', isObject$e);

        // EXPORTS //

        var lib$1y = main$2k;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Returns the global object using code generation.
        *
        * @private
        * @returns {Object} global object
        */
        function getGlobal$2() {
          return new Function('return this;')(); // eslint-disable-line no-new-func, stdlib/require-globals
        }

        // EXPORTS //

        var codegen = getGlobal$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var obj$2 = typeof self === 'object' ? self : null;

        // EXPORTS //

        var self_1 = obj$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var obj$1 = typeof window === 'object' ? window : null;

        // EXPORTS //

        var window_1 = obj$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var obj = typeof globalThis === 'object' ? globalThis : null; // eslint-disable-line no-undef

        // EXPORTS //

        var global_this = obj;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isBoolean$1 = lib$1y.isPrimitive;
        var format$d = lib$1L;
        var getThis = codegen;
        var Self = self_1;
        var Win = window_1;
        var GlobalThis = global_this;

        // MAIN //

        /**
        * Returns the global object.
        *
        * ## Notes
        *
        * -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.
        *
        * @private
        * @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object
        * @throws {TypeError} must provide a boolean
        * @throws {Error} unable to resolve global object
        * @returns {Object} global object
        *
        * @example
        * var g = getGlobal();
        * // returns {...}
        */
        function getGlobal$1(codegen) {
          if (arguments.length) {
            if (!isBoolean$1(codegen)) {
              throw new TypeError(format$d('invalid argument. Must provide a boolean. Value: `%s`.', codegen));
            }
            if (codegen) {
              return getThis();
            }
            // Fall through...
          }
          // Case: 2020 revision of ECMAScript standard
          if (GlobalThis) {
            return GlobalThis;
          }
          // Case: browsers and web workers
          if (Self) {
            return Self;
          }
          // Case: browsers
          if (Win) {
            return Win;
          }
          // Case: unknown
          throw new Error('unexpected error. Unable to resolve global object.');
        }

        // EXPORTS //

        var browser = getGlobal$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var getGlobal = browser;

        // MAIN //

        var root = getGlobal();
        var nodeList$1 = root.document && root.document.childNodes;

        // EXPORTS //

        var nodelist = nodeList$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        var typedarray$1 = Int8Array; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var typedarray_1 = typedarray$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var RE$2 = re;
        var nodeList = nodelist;
        var typedarray = typedarray_1;

        // MAIN //

        /**
        * Checks whether a polyfill is needed when using the `typeof` operator.
        *
        * @private
        * @returns {boolean} boolean indicating whether a polyfill is needed
        */
        function check() {
          if (
          // Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
          typeof RE$2 === 'function' ||
          // Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
          typeof typedarray === 'object' ||
          // PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
          typeof nodeList === 'function') {
            return true;
          }
          return false;
        }

        // EXPORTS //

        var check_1 = check;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
        *
        * @returns {RegExp} regular expression
        *
        * @example
        * var RE_FUNCTION_NAME = reFunctionName();
        *
        * function fname( fcn ) {
        *     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
        * }
        *
        * var fn = fname( Math.sqrt );
        * // returns 'sqrt'
        *
        * fn = fname( Int8Array );
        * // returns 'Int8Array'
        *
        * fn = fname( Object.prototype.toString );
        * // returns 'toString'
        *
        * fn = fname( function(){} );
        * // returns ''
        */
        function reFunctionName$1() {
          return /^\s*function\s*([^(]*)/i;
        }

        // EXPORTS //

        var main$2j = reFunctionName$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var reFunctionName = main$2j;

        // MAIN //

        /**
        * Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
        *
        * Regular expression: `/^\s*function\s*([^(]*)/i`
        *
        * -   `/^\s*`
        *     -   Match zero or more spaces at beginning
        *
        * -   `function`
        *     -   Match the word `function`
        *
        * -   `\s*`
        *     -   Match zero or more spaces after the word `function`
        *
        * -   `()`
        *     -   Capture
        *
        * -   `[^(]*`
        *     -   Match anything except a left parenthesis `(` zero or more times
        *
        * -   `/i`
        *     -   ignore case
        *
        * @constant
        * @type {RegExp}
        * @default /^\s*function\s*([^(]*)/i
        */
        var RE_FUNCTION_NAME = reFunctionName();

        // EXPORTS //

        var regexp = RE_FUNCTION_NAME;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
        *
        * @module @stdlib/regexp-function-name
        *
        * @example
        * var reFunctionName = require( '@stdlib/regexp-function-name' );
        * var RE_FUNCTION_NAME = reFunctionName();
        *
        * function fname( fcn ) {
        *     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
        * }
        *
        * var fn = fname( Math.sqrt );
        * // returns 'sqrt'
        *
        * fn = fname( Int8Array );
        * // returns 'Int8Array'
        *
        * fn = fname( Object.prototype.toString );
        * // returns 'toString'
        *
        * fn = fname( function(){} );
        * // returns ''
        */

        // MODULES //

        var setReadOnly$d = lib$1J;
        var main$2i = main$2j;
        var REGEXP = regexp;

        // MAIN //

        setReadOnly$d(main$2i, 'REGEXP', REGEXP);

        // EXPORTS //

        var lib$1x = main$2i;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isArray$3 = lib$1B;
        var format$c = lib$1L;

        // MAIN //

        /**
        * Returns a function which tests if every element in an array passes a test condition.
        *
        * @param {Function} predicate - function to apply
        * @throws {TypeError} must provide a function
        * @returns {Function} an array function
        *
        * @example
        * var isOdd = require( '@stdlib/assert-is-odd' );
        *
        * var arr1 = [ 1, 3, 5, 7 ];
        * var arr2 = [ 3, 5, 8 ];
        *
        * var validate = arrayfcn( isOdd );
        *
        * var bool = validate( arr1 );
        * // returns true
        *
        * bool = validate( arr2 );
        * // returns false
        */
        function arrayfcn(predicate) {
          if (typeof predicate !== 'function') {
            throw new TypeError(format$c('invalid argument. Must provide a function. Value: `%s`.', predicate));
          }
          return every;

          /**
          * Tests if every element in an array passes a test condition.
          *
          * @private
          * @param {*} value - value to test
          * @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
          */
          function every(value) {
            var len;
            var i;
            if (!isArray$3(value)) {
              return false;
            }
            len = value.length;
            if (len === 0) {
              return false;
            }
            for (i = 0; i < len; i++) {
              if (predicate(value[i]) === false) {
                return false;
              }
            }
            return true;
          }
        }

        // EXPORTS //

        var main$2h = arrayfcn;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return a function which tests if every element in an array passes a test condition.
        *
        * @module @stdlib/assert-tools-array-function
        *
        * @example
        * var isOdd = require( '@stdlib/assert-is-odd' );
        * var arrayfcn = require( '@stdlib/assert-tools-array-function' );
        *
        * var arr1 = [ 1, 3, 5, 7 ];
        * var arr2 = [ 3, 5, 8 ];
        *
        * var validate = arrayfcn( isOdd );
        *
        * var bool = validate( arr1 );
        * // returns true
        *
        * bool = validate( arr2 );
        * // returns false
        */

        // MODULES //

        var main$2g = main$2h;

        // EXPORTS //

        var lib$1w = main$2g;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is object-like.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether a value is object-like
        *
        * @example
        * var bool = isObjectLike( {} );
        * // returns true
        *
        * @example
        * var bool = isObjectLike( [] );
        * // returns true
        *
        * @example
        * var bool = isObjectLike( null );
        * // returns false
        */
        function isObjectLike$1(value) {
          return value !== null && typeof value === 'object';
        }

        // EXPORTS //

        var main$2f = isObjectLike$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is object-like.
        *
        * @module @stdlib/assert-is-object-like
        *
        * @example
        * var isObjectLike = require( '@stdlib/assert-is-object-like' );
        *
        * var bool = isObjectLike( {} );
        * // returns true
        *
        * bool = isObjectLike( [] );
        * // returns true
        *
        * bool = isObjectLike( null );
        * // returns false
        *
        * @example
        * var isObjectLike = require( '@stdlib/assert-is-object-like' ).isObjectLikeArray;
        *
        * var bool = isObjectLike( [ {}, [] ] );
        * // returns true
        *
        * bool = isObjectLike( [ {}, '3.0' ] );
        * // returns false
        */

        // MODULES //

        var setReadOnly$c = lib$1J;
        var arrayfun = lib$1w;
        var main$2e = main$2f;

        // VARIABLES //

        var isObjectLikeArray = arrayfun(main$2e);

        // MAIN //

        setReadOnly$c(main$2e, 'isObjectLikeArray', isObjectLikeArray);

        // EXPORTS //

        var lib$1v = main$2e;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isObjectLike = lib$1v;

        // MAIN //

        /**
        * Tests if a value is a Buffer instance.
        *
        * @param {*} value - value to validate
        * @returns {boolean} boolean indicating if a value is a Buffer instance
        *
        * @example
        * var v = isBuffer( new Buffer( 'beep' ) );
        * // returns true
        *
        * @example
        * var v = isBuffer( new Buffer( [1,2,3,4] ) );
        * // returns true
        *
        * @example
        * var v = isBuffer( {} );
        * // returns false
        *
        * @example
        * var v = isBuffer( [] );
        * // returns false
        */
        function isBuffer$2(value) {
          return isObjectLike(value) && (
          // eslint-disable-next-line no-underscore-dangle
          value._isBuffer ||
          // for envs missing Object.prototype.constructor (e.g., Safari 5-7)

          value.constructor &&
          // WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
          typeof value.constructor.isBuffer === 'function' && value.constructor.isBuffer(value));
        }

        // EXPORTS //

        var main$2d = isBuffer$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Buffer instance.
        *
        * @module @stdlib/assert-is-buffer
        *
        * @example
        * var isBuffer = require( '@stdlib/assert-is-buffer' );
        *
        * var v = isBuffer( new Buffer( 'beep' ) );
        * // returns true
        *
        * v = isBuffer( {} );
        * // returns false
        */

        // MODULES //

        var main$2c = main$2d;

        // EXPORTS //

        var lib$1u = main$2c;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$e = lib$1C;
        var RE$1 = lib$1x.REGEXP;
        var isBuffer$1 = lib$1u;

        // MAIN //

        /**
        * Determines the name of a value's constructor.
        *
        * @param {*} v - input value
        * @returns {string} name of a value's constructor
        *
        * @example
        * var v = constructorName( 'a' );
        * // returns 'String'
        *
        * @example
        * var v = constructorName( 5 );
        * // returns 'Number'
        *
        * @example
        * var v = constructorName( null );
        * // returns 'Null'
        *
        * @example
        * var v = constructorName( undefined );
        * // returns 'Undefined'
        *
        * @example
        * var v = constructorName( function noop() {} );
        * // returns 'Function'
        */
        function constructorName$1(v) {
          var match;
          var name;
          var ctor;
          name = nativeClass$e(v).slice(8, -1);
          if ((name === 'Object' || name === 'Error') && v.constructor) {
            ctor = v.constructor;
            if (typeof ctor.name === 'string') {
              return ctor.name;
            }
            match = RE$1.exec(ctor.toString());
            if (match) {
              return match[1];
            }
          }
          if (isBuffer$1(v)) {
            return 'Buffer';
          }
          return name;
        }

        // EXPORTS //

        var main$2b = constructorName$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Determine the name of a value's constructor.
        *
        * @module @stdlib/utils-constructor-name
        *
        * @example
        * var constructorName = require( '@stdlib/utils-constructor-name' );
        *
        * var v = constructorName( 'a' );
        * // returns 'String'
        *
        * v = constructorName( {} );
        * // returns 'Object'
        *
        * v = constructorName( true );
        * // returns 'Boolean'
        */

        // MODULES //

        var main$2a = main$2b;

        // EXPORTS //

        var lib$1t = main$2a;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var ctorName$4 = lib$1t;

        // NOTES //

        /*
        * Built-in `typeof` operator behavior:
        *
        * ```text
        * typeof null => 'object'
        * typeof undefined => 'undefined'
        * typeof 'a' => 'string'
        * typeof 5 => 'number'
        * typeof NaN => 'number'
        * typeof true => 'boolean'
        * typeof false => 'boolean'
        * typeof {} => 'object'
        * typeof [] => 'object'
        * typeof function foo(){} => 'function'
        * typeof function* foo(){} => 'object'
        * typeof Symbol() => 'symbol'
        * ```
        *
        */

        // MAIN //

        /**
        * Determines a value's type.
        *
        * @param {*} v - input value
        * @returns {string} string indicating the value's type
        */
        function typeOf$2(v) {
          var type;

          // Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
          if (v === null) {
            return 'null';
          }
          type = typeof v;

          // If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
          if (type === 'object') {
            return ctorName$4(v).toLowerCase();
          }
          return type;
        }

        // EXPORTS //

        var main$29 = typeOf$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var ctorName$3 = lib$1t;

        // MAIN //

        /**
        * Determines a value's type.
        *
        * @param {*} v - input value
        * @returns {string} string indicating the value's type
        */
        function typeOf$1(v) {
          return ctorName$3(v).toLowerCase();
        }

        // EXPORTS //

        var polyfill$n = typeOf$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Determine a value's type.
        *
        * @module @stdlib/utils-type-of
        *
        * @example
        * var typeOf = require( '@stdlib/utils-type-of' );
        *
        * var str = typeOf( 'a' );
        * // returns 'string'
        *
        * str = typeOf( 5 );
        * // returns 'number'
        */

        // MODULES //

        var usePolyfill = check_1;
        var builtin$b = main$29;
        var polyfill$m = polyfill$n;

        // MAIN //

        var main$28 = usePolyfill() ? polyfill$m : builtin$b;

        // EXPORTS //

        var lib$1s = main$28;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var typeOf = lib$1s;

        // MAIN //

        /**
        * Tests if a value is a function.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a function
        *
        * @example
        * function beep() {
        *     return 'beep';
        * }
        *
        * var bool = isFunction( beep );
        * // returns true
        */
        function isFunction$5(value) {
          // Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
          return typeOf(value) === 'function';
        }

        // EXPORTS //

        var main$27 = isFunction$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a function.
        *
        * @module @stdlib/assert-is-function
        *
        * @example
        * var isFunction = require( '@stdlib/assert-is-function' );
        *
        * function beep() {
        *     return 'beep';
        * }
        *
        * var bool = isFunction( beep );
        * // returns true
        */

        // MODULES //

        var main$26 = main$27;

        // EXPORTS //

        var lib$1r = main$26;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Returns an object.
        *
        * @name Object
        * @constructor
        * @type {Function}
        * @param {*} value - input value
        * @returns {Object} object
        *
        * @example
        * var o = new Object( null );
        * // returns {}
        *
        * @example
        * var o = new Object( 5.0 );
        * // returns <Number>
        *
        * @example
        * var o = new Object( 'beep' );
        * // returns <String>
        *
        * @example
        * var o1 = {};
        *
        * var o2 = new Object( o1 );
        * // returns {}
        *
        * var bool = ( o1 === o2 );
        * // returns true
        */
        var Obj = Object; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$25 = Obj;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Object constructor.
        *
        * @module @stdlib/object-ctor
        *
        * @example
        * var Object = require( '@stdlib/object-ctor' );
        *
        * var o = new Object( null );
        * // returns {}
        *
        * o = new Object( 5.0 );
        * // returns <Number>
        *
        * o = new Object( 'beep' );
        * // returns <String>
        *
        * var o1 = {};
        *
        * var o2 = new Object( o1 );
        * // returns {}
        *
        * var bool = ( o1 === o2 );
        * // returns true
        */

        // MODULES //

        var main$24 = main$25;

        // EXPORTS //

        var lib$1q = main$24;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var getProto$4 = Object.getPrototypeOf;

        // EXPORTS //

        var native = getProto$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Returns the value of the `__proto__` property.
        *
        * @private
        * @param {Object} obj - input object
        * @returns {*} value of `__proto__` property
        */
        function getProto$3(obj) {
          // eslint-disable-next-line no-proto
          return obj.__proto__;
        }

        // EXPORTS //

        var proto = getProto$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$d = lib$1C;
        var getProto$2 = proto;

        // MAIN //

        /**
        * Returns the prototype of a provided object.
        *
        * @private
        * @param {Object} obj - input object
        * @returns {(Object|null)} prototype
        */
        function getPrototypeOf$5(obj) {
          var proto = getProto$2(obj);
          if (proto || proto === null) {
            return proto;
          }
          if (nativeClass$d(obj.constructor) === '[object Function]') {
            // May break if the constructor has been tampered with...
            return obj.constructor.prototype;
          }
          if (obj instanceof Object) {
            return Object.prototype;
          }
          // Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.
          return null;
        }

        // EXPORTS //

        var polyfill$l = getPrototypeOf$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isFunction$4 = lib$1r;
        var builtin$a = native;
        var polyfill$k = polyfill$l;

        // MAIN //

        var getProto$1;
        if (isFunction$4(Object.getPrototypeOf)) {
          getProto$1 = builtin$a;
        } else {
          getProto$1 = polyfill$k;
        }

        // EXPORTS //

        var detect = getProto$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Object$1 = lib$1q;
        var getProto = detect;

        // MAIN //

        /**
        * Returns the prototype of a provided object.
        *
        * @param {*} value - input value
        * @returns {(Object|null)} prototype
        *
        * @example
        * var proto = getPrototypeOf( {} );
        * // returns {}
        */
        function getPrototypeOf$4(value) {
          if (value === null || value === void 0) {
            return null;
          }
          // In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:
          value = Object$1(value);
          return getProto(value);
        }

        // EXPORTS //

        var main$23 = getPrototypeOf$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the prototype of a provided object.
        *
        * @module @stdlib/utils-get-prototype-of
        *
        * @example
        * var getPrototype = require( '@stdlib/utils-get-prototype-of' );
        *
        * var proto = getPrototype( {} );
        * // returns {}
        */

        // MODULES //

        var main$22 = main$23;

        // EXPORTS //

        var lib$1p = main$22;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isObject$d = lib$1A;
        var isFunction$3 = lib$1r;
        var getPrototypeOf$3 = lib$1p;
        var hasOwnProp$2 = lib$1G;
        var nativeClass$c = lib$1C;

        // VARIABLES //

        var objectPrototype = Object.prototype;

        // FUNCTIONS //

        /**
        * Tests that an object only has own properties.
        *
        * @private
        * @param {Object} obj - value to test
        * @returns {boolean} boolean indicating if an object only has own properties
        */
        function ownProps(obj) {
          var key;

          // NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).
          for (key in obj) {
            if (!hasOwnProp$2(obj, key)) {
              return false;
            }
          }
          return true;
        }

        // MAIN //

        /**
        * Tests if a value is a plain object.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a plain object
        *
        * @example
        * var bool = isPlainObject( {} );
        * // returns true
        *
        * @example
        * var bool = isPlainObject( null );
        * // returns false
        */
        function isPlainObject(value) {
          var proto;

          // Screen for obvious non-objects...
          if (!isObject$d(value)) {
            return false;
          }
          // Objects with no prototype (e.g., `Object.create( null )`) are plain...
          proto = getPrototypeOf$3(value);
          if (!proto) {
            return true;
          }
          // Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...
          return (
            // Cannot have own `constructor` property:
            !hasOwnProp$2(value, 'constructor') &&
            // Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):
            hasOwnProp$2(proto, 'constructor') && isFunction$3(proto.constructor) && nativeClass$c(proto.constructor) === '[object Function]' &&
            // Test for object-specific method:
            hasOwnProp$2(proto, 'isPrototypeOf') && isFunction$3(proto.isPrototypeOf) && (
            // Test if the prototype matches the global `Object` prototype (same realm):
            proto === objectPrototype ||
            // Test that all properties are own properties (cross-realm; *most* likely a plain object):
            ownProps(value))
          );
        }

        // EXPORTS //

        var main$21 = isPlainObject;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a plain object.
        *
        * @module @stdlib/assert-is-plain-object
        *
        * @example
        * var isPlainObject = require( '@stdlib/assert-is-plain-object' );
        *
        * var bool = isPlainObject( {} );
        * // returns true
        *
        * bool = isPlainObject( null );
        * // returns false
        */

        // MODULES //

        var main$20 = main$21;

        // EXPORTS //

        var lib$1o = main$20;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: implementation (?)

        /**
        * Rounds a double-precision floating-point number toward negative infinity.
        *
        * @param {number} x - input value
        * @returns {number} rounded value
        *
        * @example
        * var v = floor( -4.2 );
        * // returns -5.0
        *
        * @example
        * var v = floor( 9.99999 );
        * // returns 9.0
        *
        * @example
        * var v = floor( 0.0 );
        * // returns 0.0
        *
        * @example
        * var v = floor( NaN );
        * // returns NaN
        */
        var floor$4 = Math.floor; // eslint-disable-line stdlib/no-builtin-math

        // EXPORTS //

        var main$1$ = floor$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Round a double-precision floating-point number toward negative infinity.
        *
        * @module @stdlib/math-base-special-floor
        *
        * @example
        * var floor = require( '@stdlib/math-base-special-floor' );
        *
        * var v = floor( -4.2 );
        * // returns -5.0
        *
        * v = floor( 9.99999 );
        * // returns 9.0
        *
        * v = floor( 0.0 );
        * // returns 0.0
        *
        * v = floor( NaN );
        * // returns NaN
        */

        // MODULES //

        var main$1_ = main$1$;

        // EXPORTS //

        var lib$1n = main$1_;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var floor$3 = lib$1n;

        // MAIN //

        /**
        * Tests if a finite double-precision floating-point number is an integer.
        *
        * @param {number} x - value to test
        * @returns {boolean} boolean indicating whether the value is an integer
        *
        * @example
        * var bool = isInteger( 1.0 );
        * // returns true
        *
        * @example
        * var bool = isInteger( 3.14 );
        * // returns false
        */
        function isInteger$d(x) {
          return floor$3(x) === x;
        }

        // EXPORTS //

        var main$1Z = isInteger$d;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a finite double-precision floating-point number is an integer.
        *
        * @module @stdlib/math-base-assert-is-integer
        *
        * @example
        * var isInteger = require( '@stdlib/math-base-assert-is-integer' );
        *
        * var bool = isInteger( 1.0 );
        * // returns true
        *
        * bool = isInteger( 3.14 );
        * // returns false
        */

        // MODULES //

        var main$1Y = main$1Z;

        // EXPORTS //

        var lib$1m = main$1Y;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum length of a typed array.
        *
        * @module @stdlib/constants-array-max-typed-array-length
        *
        * @example
        * var MAX_TYPED_ARRAY_LENGTH = require( '@stdlib/constants-array-max-typed-array-length' );
        * // returns 9007199254740991
        */

        // MAIN //

        /**
        * Maximum length of a typed array.
        *
        * ```tex
        * 2^{53} - 1
        * ```
        *
        * @constant
        * @type {number}
        * @default 9007199254740991
        */
        var MAX_TYPED_ARRAY_LENGTH = 9007199254740991;

        // EXPORTS //

        var lib$1l = MAX_TYPED_ARRAY_LENGTH;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$c = lib$1m;
        var MAX_LENGTH$1 = lib$1l;

        // MAIN //

        /**
        * Tests if a value is a collection.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether a value is a collection
        *
        * @example
        * var bool = isCollection( [] );
        * // returns true
        *
        * @example
        * var bool = isCollection( {} );
        * // returns false
        */
        function isCollection$3(value) {
          return typeof value === 'object' && value !== null && typeof value.length === 'number' && isInteger$c(value.length) && value.length >= 0 && value.length <= MAX_LENGTH$1;
        }

        // EXPORTS //

        var main$1X = isCollection$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a collection.
        *
        * @module @stdlib/assert-is-collection
        *
        * @example
        * var isCollection = require( '@stdlib/assert-is-collection' );
        *
        * var bool = isCollection( [] );
        * // returns true
        *
        * bool = isCollection( {} );
        * // returns false
        */

        // MODULES //

        var main$1W = main$1X;

        // EXPORTS //

        var lib$1k = main$1W;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$b = lib$1C;

        // VARIABLES //

        var hasUint32Array = typeof Uint32Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is a Uint32Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a Uint32Array
        *
        * @example
        * var bool = isUint32Array( new Uint32Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isUint32Array( [] );
        * // returns false
        */
        function isUint32Array$3(value) {
          return hasUint32Array && value instanceof Uint32Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$b(value) === '[object Uint32Array]';
        }

        // EXPORTS //

        var main$1V = isUint32Array$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Uint32Array.
        *
        * @module @stdlib/assert-is-uint32array
        *
        * @example
        * var isUint32Array = require( '@stdlib/assert-is-uint32array' );
        *
        * var bool = isUint32Array( new Uint32Array( 10 ) );
        * // returns true
        *
        * bool = isUint32Array( [] );
        * // returns false
        */

        // MODULES //

        var isUint32Array$2 = main$1V;

        // EXPORTS //

        var lib$1j = isUint32Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is a number primitive.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number primitive
        *
        * @example
        * var bool = isNumber( 3.14 );
        * // returns true
        *
        * @example
        * var bool = isNumber( NaN );
        * // returns true
        *
        * @example
        * var bool = isNumber( new Number( 3.14 ) );
        * // returns false
        */
        function isNumber$6(value) {
          return typeof value === 'number';
        }

        // EXPORTS //

        var primitive$4 = isNumber$6;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // EXPORTS //

        var main$1U = Number; // eslint-disable-line stdlib/require-globals

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Constructor which returns a `Number` object.
        *
        * @module @stdlib/number-ctor
        *
        * @example
        * var Number = require( '@stdlib/number-ctor' );
        *
        * var v = new Number( 10.0 );
        * // returns <Number>
        */

        // MODULES //

        var main$1T = main$1U;

        // EXPORTS //

        var lib$1i = main$1T;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Number$3 = lib$1i;

        // MAIN //

        // eslint-disable-next-line stdlib/no-redeclare
        var toString$3 = Number$3.prototype.toString; // non-generic

        // EXPORTS //

        var tostring$2 = toString$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var toString$2 = tostring$2; // eslint-disable-line stdlib/no-redeclare

        // MAIN //

        /**
        * Attempts to serialize a value to a string.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value can be serialized
        */
        function test$3(value) {
          try {
            toString$2.call(value);
            return true;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            return false;
          }
        }

        // EXPORTS //

        var try2serialize = test$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasToStringTag$1 = lib$1E;
        var nativeClass$a = lib$1C;
        var Number$2 = lib$1i;
        var test$2 = try2serialize;

        // VARIABLES //

        var FLG$1 = hasToStringTag$1();

        // MAIN //

        /**
        * Tests if a value is a number object.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number object
        *
        * @example
        * var bool = isNumber( 3.14 );
        * // returns false
        *
        * @example
        * var bool = isNumber( new Number( 3.14 ) );
        * // returns true
        */
        function isNumber$5(value) {
          if (typeof value === 'object') {
            if (value instanceof Number$2) {
              return true;
            }
            if (FLG$1) {
              return test$2(value);
            }
            return nativeClass$a(value) === '[object Number]';
          }
          return false;
        }

        // EXPORTS //

        var object$4 = isNumber$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPrimitive$9 = primitive$4;
        var isObject$c = object$4;

        // MAIN //

        /**
        * Tests if a value is a number.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a number
        *
        * @example
        * var bool = isNumber( 3.14 );
        * // returns true
        *
        * @example
        * var bool = isNumber( new Number( 3.14 ) );
        * // returns true
        *
        * @example
        * var bool = isNumber( NaN );
        * // returns true
        *
        * @example
        * var bool = isNumber( null );
        * // returns false
        */
        function isNumber$4(value) {
          return isPrimitive$9(value) || isObject$c(value);
        }

        // EXPORTS //

        var main$1S = isNumber$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a number.
        *
        * @module @stdlib/assert-is-number
        *
        * @example
        * var isNumber = require( '@stdlib/assert-is-number' );
        *
        * var bool = isNumber( 3.14 );
        * // returns true
        *
        * bool = isNumber( new Number( 3.14 ) );
        * // returns true
        *
        * bool = isNumber( NaN );
        * // returns true
        *
        * bool = isNumber( null );
        * // returns false
        *
        * @example
        * var isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;
        *
        * var bool = isNumber( 3.14 );
        * // returns true
        *
        * bool = isNumber( NaN );
        * // returns true
        *
        * bool = isNumber( new Number( 3.14 ) );
        * // returns false
        *
        * @example
        * var isNumber = require( '@stdlib/assert-is-number' ).isObject;
        *
        * var bool = isNumber( 3.14 );
        * // returns false
        *
        * bool = isNumber( new Number( 3.14 ) );
        * // returns true
        */

        // MODULES //

        var setReadOnly$b = lib$1J;
        var main$1R = main$1S;
        var isPrimitive$8 = primitive$4;
        var isObject$b = object$4;

        // MAIN //

        setReadOnly$b(main$1R, 'isPrimitive', isPrimitive$8);
        setReadOnly$b(main$1R, 'isObject', isObject$b);

        // EXPORTS //

        var lib$1h = main$1R;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Double-precision floating-point positive infinity.
        *
        * @module @stdlib/constants-float64-pinf
        * @type {number}
        *
        * @example
        * var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );
        * // returns Infinity
        */

        // MAIN //

        /**
        * Double-precision floating-point positive infinity.
        *
        * ## Notes
        *
        * Double-precision floating-point positive infinity has the bit sequence
        *
        * ```binarystring
        * 0 11111111111 00000000000000000000 00000000000000000000000000000000
        * ```
        *
        * @constant
        * @type {number}
        * @default Number.POSITIVE_INFINITY
        * @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
        */
        var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var lib$1g = FLOAT64_PINF;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Double-precision floating-point negative infinity.
        *
        * @module @stdlib/constants-float64-ninf
        * @type {number}
        *
        * @example
        * var FLOAT64_NINF = require( '@stdlib/constants-float64-ninf' );
        * // returns -Infinity
        */

        // MODULES //

        var Number$1 = lib$1i;

        // MAIN //

        /**
        * Double-precision floating-point negative infinity.
        *
        * ## Notes
        *
        * Double-precision floating-point negative infinity has the bit sequence
        *
        * ```binarystring
        * 1 11111111111 00000000000000000000 00000000000000000000000000000000
        * ```
        *
        * @constant
        * @type {number}
        * @default Number.NEGATIVE_INFINITY
        * @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
        */
        var FLOAT64_NINF = Number$1.NEGATIVE_INFINITY;

        // EXPORTS //

        var lib$1f = FLOAT64_NINF;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var PINF$3 = lib$1g;
        var NINF = lib$1f;
        var isInt$2 = lib$1m;

        // MAIN //

        /**
        * Tests if a number primitive is an integer value.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a number primitive is an integer value
        */
        function isInteger$b(value) {
          return value < PINF$3 && value > NINF && isInt$2(value);
        }

        // EXPORTS //

        var integer = isInteger$b;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isNumber$3 = lib$1h.isPrimitive;
        var isInt$1 = integer;

        // MAIN //

        /**
        * Tests if a value is a number primitive having an integer value.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number primitive having an integer value
        *
        * @example
        * var bool = isInteger( -3.0 );
        * // returns true
        *
        * @example
        * var bool = isInteger( new Number( -3.0 ) );
        * // returns false
        */
        function isInteger$a(value) {
          return isNumber$3(value) && isInt$1(value);
        }

        // EXPORTS //

        var primitive$3 = isInteger$a;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isNumber$2 = lib$1h.isObject;
        var isInt = integer;

        // MAIN //

        /**
        * Tests if a value is a number object having an integer value.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number object having an integer value
        *
        * @example
        * var bool = isInteger( 3.0 );
        * // returns false
        *
        * @example
        * var bool = isInteger( new Number( 3.0 ) );
        * // returns true
        */
        function isInteger$9(value) {
          return isNumber$2(value) && isInt(value.valueOf());
        }

        // EXPORTS //

        var object$3 = isInteger$9;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPrimitive$7 = primitive$3;
        var isObject$a = object$3;

        // MAIN //

        /**
        * Tests if a value is an integer.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an integer
        *
        * @example
        * var bool = isInteger( 5.0 );
        * // returns true
        *
        * @example
        * var bool = isInteger( new Number( 5.0 ) );
        * // returns true
        *
        * @example
        * var bool = isInteger( -3.14 );
        * // returns false
        *
        * @example
        * var bool = isInteger( null );
        * // returns false
        */
        function isInteger$8(value) {
          return isPrimitive$7(value) || isObject$a(value);
        }

        // EXPORTS //

        var main$1Q = isInteger$8;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an integer.
        *
        * @module @stdlib/assert-is-integer
        *
        * @example
        * var isInteger = require( '@stdlib/assert-is-integer' );
        *
        * var bool = isInteger( 5.0 );
        * // returns true
        *
        * bool = isInteger( new Number( 5.0 ) );
        * // returns true
        *
        * bool = isInteger( -3.14 );
        * // returns false
        *
        * bool = isInteger( null );
        * // returns false
        *
        * @example
        * // Use interface to check for integer primitives...
        * var isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;
        *
        * var bool = isInteger( -3.0 );
        * // returns true
        *
        * bool = isInteger( new Number( -3.0 ) );
        * // returns false
        *
        * @example
        * // Use interface to check for integer objects...
        * var isInteger = require( '@stdlib/assert-is-integer' ).isObject;
        *
        * var bool = isInteger( 3.0 );
        * // returns false
        *
        * bool = isInteger( new Number( 3.0 ) );
        * // returns true
        */

        // MODULES //

        var setReadOnly$a = lib$1J;
        var main$1P = main$1Q;
        var isPrimitive$6 = primitive$3;
        var isObject$9 = object$3;

        // MAIN //

        setReadOnly$a(main$1P, 'isPrimitive', isPrimitive$6);
        setReadOnly$a(main$1P, 'isObject', isObject$9);

        // EXPORTS //

        var lib$1e = main$1P;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$7 = lib$1e.isPrimitive;

        // MAIN //

        /**
        * Tests if a value is a number primitive having a positive integer value.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
        *
        * @example
        * var bool = isPositiveInteger( 3.0 );
        * // returns true
        *
        * @example
        * var bool = isPositiveInteger( new Number( 3.0 ) );
        * // returns false
        */
        function isPositiveInteger$3(value) {
          return isInteger$7(value) && value > 0.0;
        }

        // EXPORTS //

        var primitive$2 = isPositiveInteger$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$6 = lib$1e.isObject;

        // MAIN //

        /**
        * Tests if a value is a number object having a positive integer value.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number object having a positive integer value
        *
        * @example
        * var bool = isPositiveInteger( 3.0 );
        * // returns false
        *
        * @example
        * var bool = isPositiveInteger( new Number( 3.0 ) );
        * // returns true
        */
        function isPositiveInteger$2(value) {
          return isInteger$6(value) && value.valueOf() > 0.0;
        }

        // EXPORTS //

        var object$2 = isPositiveInteger$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPrimitive$5 = primitive$2;
        var isObject$8 = object$2;

        // MAIN //

        /**
        * Tests if a value is a positive integer.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a positive integer
        *
        * @example
        * var bool = isPositiveInteger( 5.0 );
        * // returns true
        *
        * @example
        * var bool = isPositiveInteger( new Number( 5.0 ) );
        * // returns true
        *
        * @example
        * var bool = isPositiveInteger( 0.0 );
        * // returns false
        *
        * @example
        * var bool = isPositiveInteger( -5.0 );
        * // returns false
        *
        * @example
        * var bool = isPositiveInteger( 3.14 );
        * // returns false
        *
        * @example
        * var bool = isPositiveInteger( null );
        * // returns false
        */
        function isPositiveInteger$1(value) {
          return isPrimitive$5(value) || isObject$8(value);
        }

        // EXPORTS //

        var main$1O = isPositiveInteger$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a positive integer.
        *
        * @module @stdlib/assert-is-positive-integer
        *
        * @example
        * var isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );
        *
        * var bool = isPositiveInteger( 5.0 );
        * // returns true
        *
        * bool = isPositiveInteger( new Number( 5.0 ) );
        * // returns true
        *
        * bool = isPositiveInteger( -5.0 );
        * // returns false
        *
        * bool = isPositiveInteger( 3.14 );
        * // returns false
        *
        * bool = isPositiveInteger( null );
        * // returns false
        *
        * @example
        * var isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;
        *
        * var bool = isPositiveInteger( 3.0 );
        * // returns true
        *
        * bool = isPositiveInteger( new Number( 3.0 ) );
        * // returns false
        *
        * @example
        * var isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isObject;
        *
        * var bool = isPositiveInteger( 3.0 );
        * // returns false
        *
        * bool = isPositiveInteger( new Number( 3.0 ) );
        * // returns true
        */

        // MODULES //

        var setReadOnly$9 = lib$1J;
        var main$1N = main$1O;
        var isPrimitive$4 = primitive$2;
        var isObject$7 = object$2;

        // MAIN //

        setReadOnly$9(main$1N, 'isPrimitive', isPrimitive$4);
        setReadOnly$9(main$1N, 'isObject', isObject$7);

        // EXPORTS //

        var lib$1d = main$1N;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum safe double-precision floating-point integer.
        *
        * @module @stdlib/constants-float64-max-safe-integer
        * @type {number}
        *
        * @example
        * var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants-float64-max-safe-integer' );
        * // returns 9007199254740991
        */

        // MAIN //

        /**
        * Maximum safe double-precision floating-point integer.
        *
        * ## Notes
        *
        * The integer has the value
        *
        * ```tex
        * 2^{53} - 1
        * ```
        *
        * @constant
        * @type {number}
        * @default 9007199254740991
        * @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
        * @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
        */
        var FLOAT64_MAX_SAFE_INTEGER$1 = 9007199254740991;

        // EXPORTS //

        var lib$1c = FLOAT64_MAX_SAFE_INTEGER$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum unsigned 32-bit integer.
        *
        * @module @stdlib/constants-uint32-max
        * @type {uinteger32}
        *
        * @example
        * var UINT32_MAX = require( '@stdlib/constants-uint32-max' );
        * // returns 4294967295
        */

        // MAIN //

        /**
        * Maximum unsigned 32-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * 2^{32} - 1
        * ```
        *
        * which corresponds to the bit sequence
        *
        * ```binarystring
        * 11111111111111111111111111111111
        * ```
        *
        * @constant
        * @type {uinteger32}
        * @default 4294967295
        */
        var UINT32_MAX$3 = 4294967295;

        // EXPORTS //

        var lib$1b = UINT32_MAX$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$1M = typeof Uint32Array === 'function' ? Uint32Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var uint32array = main$1M;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isUint32Array$1 = lib$1j;
        var UINT32_MAX$2 = lib$1b;
        var GlobalUint32Array = uint32array;

        // MAIN //

        /**
        * Tests for native `Uint32Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Uint32Array` support
        *
        * @example
        * var bool = hasUint32ArraySupport();
        * // returns <boolean>
        */
        function hasUint32ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalUint32Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = [1, 3.14, -3.14, UINT32_MAX$2 + 1, UINT32_MAX$2 + 2];
            arr = new GlobalUint32Array(arr);
            bool = isUint32Array$1(arr) && arr[0] === 1 && arr[1] === 3 &&
            // truncation
            arr[2] === UINT32_MAX$2 - 2 &&
            // truncation and wrap around
            arr[3] === 0 &&
            // wrap around
            arr[4] === 1 // wrap around
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$1L = hasUint32ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Uint32Array` support.
        *
        * @module @stdlib/assert-has-uint32array-support
        *
        * @example
        * var hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );
        *
        * var bool = hasUint32ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasUint32ArraySupport$1 = main$1L;

        // EXPORTS //

        var lib$1a = hasUint32ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$h = typeof Uint32Array === 'function' ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$1K = ctor$h;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$j() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$8 = polyfill$j;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
        *
        * @module @stdlib/array-uint32
        *
        * @example
        * var ctor = require( '@stdlib/array-uint32' );
        *
        * var arr = new ctor( 10 );
        * // returns <Uint32Array>
        */

        // MODULES //

        var hasUint32ArraySupport = lib$1a;
        var builtin$9 = main$1K;
        var polyfill$i = polyfill_1$8;

        // MAIN //

        var ctor$g;
        if (hasUint32ArraySupport()) {
          ctor$g = builtin$9;
        } else {
          ctor$g = polyfill$i;
        }

        // EXPORTS //

        var lib$19 = ctor$g;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var PINF$2 = lib$1g;

        // MAIN //

        /**
        * Tests if a double-precision floating-point numeric value is positive zero.
        *
        * @param {number} x - value to test
        * @returns {boolean} boolean indicating whether the value is positive zero
        *
        * @example
        * var bool = isPositiveZero( 0.0 );
        * // returns true
        *
        * @example
        * var bool = isPositiveZero( -0.0 );
        * // returns false
        */
        function isPositiveZero$1(x) {
          return x === 0.0 && 1.0 / x === PINF$2;
        }

        // EXPORTS //

        var main$1J = isPositiveZero$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a double-precision floating-point numeric value is positive zero.
        *
        * @module @stdlib/math-base-assert-is-positive-zero
        *
        * @example
        * var isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );
        *
        * var bool = isPositiveZero( 0.0 );
        * // returns true
        *
        * bool = isPositiveZero( -0.0 );
        * // returns false
        */

        // MODULES //

        var main$1I = main$1J;

        // EXPORTS //

        var lib$18 = main$1I;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Tests if a double-precision floating-point numeric value is `NaN`.
        *
        * @param {number} x - value to test
        * @returns {boolean} boolean indicating whether the value is `NaN`
        *
        * @example
        * var bool = isnan( NaN );
        * // returns true
        *
        * @example
        * var bool = isnan( 7.0 );
        * // returns false
        */
        function isnan$1(x) {
          return x !== x;
        }

        // EXPORTS //

        var main$1H = isnan$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a double-precision floating-point numeric value is `NaN`.
        *
        * @module @stdlib/math-base-assert-is-nan
        *
        * @example
        * var isnan = require( '@stdlib/math-base-assert-is-nan' );
        *
        * var bool = isnan( NaN );
        * // returns true
        *
        * bool = isnan( 7.0 );
        * // returns false
        */

        // MODULES //

        var main$1G = main$1H;

        // EXPORTS //

        var lib$17 = main$1G;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPositiveZero = lib$18;
        var isnan = lib$17;
        var PINF$1 = lib$1g;

        // MAIN //

        /**
        * Returns the maximum value.
        *
        * @param {number} x - first number
        * @param {number} y - second number
        * @returns {number} maximum value
        *
        * @example
        * var v = max( 3.14, 4.2 );
        * // returns 4.2
        *
        * @example
        * var v = max( 3.14, NaN );
        * // returns NaN
        *
        * @example
        * var v = max( +0.0, -0.0 );
        * // returns +0.0
        */
        function max$2(x, y) {
          if (isnan(x) || isnan(y)) {
            return NaN;
          }
          if (x === PINF$1 || y === PINF$1) {
            return PINF$1;
          }
          if (x === y && x === 0.0) {
            if (isPositiveZero(x)) {
              return x;
            }
            return y;
          }
          if (x > y) {
            return x;
          }
          return y;
        }

        // EXPORTS //

        var main$1F = max$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the maximum value.
        *
        * @module @stdlib/math-base-special-max
        *
        * @example
        * var max = require( '@stdlib/math-base-special-max' );
        *
        * var v = max( 3.14, 4.2 );
        * // returns 4.2
        *
        * v = max( 3.14, NaN );
        * // returns NaN
        *
        * v = max( +0.0, -0.0 );
        * // returns +0.0
        */

        // MODULES //

        var max$1 = main$1F;

        // EXPORTS //

        var lib$16 = max$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        // Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111
        var LOW_WORD_MASK = 0x0000ffff >>> 0; // asm type annotation

        // MAIN //

        /**
        * Performs C-like multiplication of two unsigned 32-bit integers.
        *
        * ## Method
        *
        * -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words
        *
        *     ```tex
        *     a = w_h*2^{16} + w_l
        *     ```
        *
        *     where \\( w_h \\) is the most significant 16 bits and \\( w_l \\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\( 2^{32}-1 \\)
        *
        *     ```binarystring
        *     11111111111111111111111111111111
        *     ```
        *
        *     The 16-bit high word is then
        *
        *     ```binarystring
        *     1111111111111111
        *     ```
        *
        *     and the 16-bit low word
        *
        *     ```binarystring
        *     1111111111111111
        *     ```
        *
        *     If we cast the high word to 32-bit precision and multiply by \\( 2^{16} \\) (equivalent to a 16-bit left shift), then the bit sequence is
        *
        *     ```binarystring
        *     11111111111111110000000000000000
        *     ```
        *
        *     Similarly, upon casting the low word to 32-bit precision, the bit sequence is
        *
        *     ```binarystring
        *     00000000000000001111111111111111
        *     ```
        *
        *     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\( 2^{32}-1 \\).
        *
        * -   Accordingly, the multiplication of two 32-bit integers can be expressed
        *
        *     ```tex
        *     \begin{align*}
        *     a \cdot b &= ( a_h \cdot 2^{16} + a_l) \cdot ( b_h \cdot 2^{16} + b_l) \\
        *           &= a_l \cdot b_l + a_h \cdot b_l \cdot 2^{16} + a_l \cdot b_h \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32} \\
        *           &= a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32}
        *     \end{align*}
        *     ```
        *
        * -   We note that multiplying (dividing) an integer by \\( 2^n \\) is equivalent to performing a left (right) shift of \\( n \\) bits.
        *
        * -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\( 2^{32} \\). Stated another way, we only care about the low word of a 64-bit result.
        *
        * -   Accordingly, the last term, being evenly divisible by \\( 2^{32} \\), drops from the equation leaving the remaining two terms as the remainder.
        *
        *     ```tex
        *     a \cdot b = a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) << 16
        *     ```
        *
        * -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to "overflow". However, we can disregard (`>>>0`) overflow bits due to modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.
        *
        * @param {uinteger32} a - integer
        * @param {uinteger32} b - integer
        * @returns {uinteger32} product
        *
        * @example
        * var v = umul( 10>>>0, 4>>>0 );
        * // returns 40
        */
        function umul$1(a, b) {
          var lbits;
          var mbits;
          var ha;
          var hb;
          var la;
          var lb;
          a >>>= 0; // asm type annotation
          b >>>= 0; // asm type annotation

          // Isolate the most significant 16-bits:
          ha = a >>> 16 >>> 0; // asm type annotation
          hb = b >>> 16 >>> 0; // asm type annotation

          // Isolate the least significant 16-bits:
          la = (a & LOW_WORD_MASK) >>> 0; // asm type annotation
          lb = (b & LOW_WORD_MASK) >>> 0; // asm type annotation

          // Compute partial sums:
          lbits = la * lb >>> 0; // asm type annotation; no integer overflow possible
          mbits = ha * lb + la * hb << 16 >>> 0; // asm type annotation; possible integer overflow

          // The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):
          return lbits + mbits >>> 0; // asm type annotation
        }

        // EXPORTS //

        var main$1E = umul$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Perform C-like multiplication of two unsigned 32-bit integers.
        *
        * @module @stdlib/math-base-ops-umul
        *
        * @example
        * var umul = require( '@stdlib/math-base-ops-umul' );
        *
        * var v = umul( 10>>>0, 4>>>0 );
        * // returns 40
        */

        // MODULES //

        var main$1D = main$1E;

        // EXPORTS //

        var lib$15 = main$1D;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var TYPE = 'function';

        // MAIN //

        /**
        * Tests if an array-like object supports the accessor (get/set) protocol.
        *
        * @param {Object} value - value to test
        * @returns {boolean} boolean indicating whether a value is an accessor array
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var bool = isAccessorArray( new Complex128Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isAccessorArray( [] );
        * // returns false
        */
        function isAccessorArray$1(value) {
          return typeof value.get === TYPE && typeof value.set === TYPE; // eslint-disable-line valid-typeof
        }

        // EXPORTS //

        var main$1C = isAccessorArray$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if an array-like object supports the accessor (get/set) protocol.
        *
        * @module @stdlib/array-base-assert-is-accessor-array
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128array' );
        * var isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );
        *
        * var bool = isAccessorArray( new Complex128Array( 10 ) );
        * // returns true
        *
        * bool = isAccessorArray( [] );
        * // returns false
        */

        // MODULES //

        var main$1B = main$1C;

        // EXPORTS //

        var lib$14 = main$1B;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var GETTERS$1 = {
          'float64': getFloat64,
          'float32': getFloat32,
          'int32': getInt32,
          'int16': getInt16,
          'int8': getInt8,
          'uint32': getUint32,
          'uint16': getUint16,
          'uint8': getUint8,
          'uint8c': getUint8c,
          'generic': getGeneric,
          'default': getArrayLike$1
        };

        // FUNCTIONS //

        /**
        * Returns an element from a `Float64Array`.
        *
        * @private
        * @param {Float64Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Float64Array = require( '@stdlib/array-float64' );
        *
        * var arr = new Float64Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getFloat64( arr, 2 );
        * // returns 3.0
        */
        function getFloat64(arr, idx) {
          return arr[idx];
        }

        /**
        * Returns an element from a `Float32Array`.
        *
        * @private
        * @param {Float32Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Float32Array = require( '@stdlib/array-float32' );
        *
        * var arr = new Float32Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getFloat32( arr, 2 );
        * // returns 3.0
        */
        function getFloat32(arr, idx) {
          return arr[idx];
        }

        /**
        * Returns an element from an `Int32Array`.
        *
        * @private
        * @param {Int32Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Int32Array = require( '@stdlib/array-int32' );
        *
        * var arr = new Int32Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getInt32( arr, 2 );
        * // returns 3
        */
        function getInt32(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from an `Int16Array`.
        *
        * @private
        * @param {Int16Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Int16Array = require( '@stdlib/array-int16' );
        *
        * var arr = new Int16Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getInt16( arr, 2 );
        * // returns 3
        */
        function getInt16(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from an `Int8Array`.
        *
        * @private
        * @param {Int8Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Int8Array = require( '@stdlib/array-int8' );
        *
        * var arr = new Int8Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getInt8( arr, 2 );
        * // returns 3
        */
        function getInt8(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from a `Uint32Array`.
        *
        * @private
        * @param {Uint32Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Uint32Array = require( '@stdlib/array-uint32' );
        *
        * var arr = new Uint32Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getUint32( arr, 2 );
        * // returns 3
        */
        function getUint32(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from a `Uint16Array`.
        *
        * @private
        * @param {Uint16Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Uint16Array = require( '@stdlib/array-uint16' );
        *
        * var arr = new Uint16Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getUint16( arr, 2 );
        * // returns 3
        */
        function getUint16(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from a `Uint8Array`.
        *
        * @private
        * @param {Uint8Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Uint8Array = require( '@stdlib/array-uint8' );
        *
        * var arr = new Uint8Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getUint8( arr, 2 );
        * // returns 3
        */
        function getUint8(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from a `Uint8ClampedArray`.
        *
        * @private
        * @param {Uint8ClampedArray} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Uint8ClampedArray = require( '@stdlib/array-uint8c' );
        *
        * var arr = new Uint8ClampedArray( [ 1, 2, 3, 4 ] );
        *
        * var v = getUint8c( arr, 2 );
        * // returns 3
        */
        function getUint8c(arr, idx) {
          // eslint-disable-line stdlib/jsdoc-doctest-decimal-point
          return arr[idx];
        }

        /**
        * Returns an element from a generic `Array`.
        *
        * @private
        * @param {Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {*} element value
        *
        * @example
        * var arr = [ 1, 2, 3, 4 ];
        *
        * var v = getGeneric( arr, 2 );
        * // returns 3
        */
        function getGeneric(arr, idx) {
          return arr[idx];
        }

        /**
        * Returns an element from an indexed array-like object.
        *
        * @private
        * @param {Collection} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {*} element value
        *
        * @example
        * var arr = [ 1, 2, 3, 4 ];
        *
        * var v = getArrayLike( arr, 2 );
        * // returns 3
        */
        function getArrayLike$1(arr, idx) {
          return arr[idx];
        }

        // MAIN //

        /**
        * Returns an accessor function for retrieving an element from an indexed array-like object.
        *
        * @param {string} dtype - array dtype
        * @returns {Function} accessor
        *
        * @example
        * var dtype = require( '@stdlib/array-dtype' );
        *
        * var arr = [ 1, 2, 3, 4 ];
        *
        * var get = getter( dtype( arr ) );
        * var v = get( arr, 2 );
        * // returns 3
        */
        function getter$4(dtype) {
          var f = GETTERS$1[dtype];
          if (typeof f === 'function') {
            return f;
          }
          return GETTERS$1.default;
        }

        // EXPORTS //

        var main$1A = getter$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return an accessor function for retrieving an element from an indexed array-like object.
        *
        * @module @stdlib/array-base-getter
        *
        * @example
        * var dtype = require( '@stdlib/array-dtype' );
        * var getter = require( '@stdlib/array-base-getter' );
        *
        * var arr = [ 1, 2, 3, 4 ];
        *
        * var get = getter( dtype( arr ) );
        * var v = get( arr, 2 );
        * // returns 3
        */

        // MODULES //

        var main$1z = main$1A;

        // EXPORTS //

        var lib$13 = main$1z;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var SETTERS$1 = {
          'float64': setFloat64,
          'float32': setFloat32,
          'int32': setInt32,
          'int16': setInt16,
          'int8': setInt8,
          'uint32': setUint32,
          'uint16': setUint16,
          'uint8': setUint8,
          'uint8c': setUint8c,
          'generic': setGeneric,
          'default': setArrayLike$1
        };

        // FUNCTIONS //

        /**
        * Sets an element in a `Float64Array`.
        *
        * @private
        * @param {Float64Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Float64Array = require( '@stdlib/array-float64' );
        *
        * var arr = new Float64Array( 4 );
        *
        * setFloat64( arr, 2, 3.0 );
        *
        * var v = arr[ 2 ];
        * // returns 3.0
        */
        function setFloat64(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in a `Float32Array`.
        *
        * @private
        * @param {Float32Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Float32Array = require( '@stdlib/array-float32' );
        *
        * var arr = new Float32Array( 4 );
        *
        * setFloat32( arr, 2, 3.0 );
        *
        * var v = arr[ 2 ];
        * // returns 3.0
        */
        function setFloat32(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in an `Int32Array`.
        *
        * @private
        * @param {Int32Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Int32Array = require( '@stdlib/array-int32' );
        *
        * var arr = new Int32Array( 4 );
        *
        * setInt32( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setInt32(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in an `Int16Array`.
        *
        * @private
        * @param {Int16Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Int16Array = require( '@stdlib/array-int16' );
        *
        * var arr = new Int16Array( 4 );
        *
        * setInt16( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setInt16(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in an `Int8Array`.
        *
        * @private
        * @param {Int8Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Int8Array = require( '@stdlib/array-int8' );
        *
        * var arr = new Int8Array( 4 );
        *
        * setInt8( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setInt8(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in a `Uint32Array`.
        *
        * @private
        * @param {Uint32Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Uint32Array = require( '@stdlib/array-uint32' );
        *
        * var arr = new Uint32Array( 4 );
        *
        * setUint32( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setUint32(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in a `Uint16Array`.
        *
        * @private
        * @param {Uint16Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Uint16Array = require( '@stdlib/array-uint16' );
        *
        * var arr = new Uint16Array( 4 );
        *
        * setUint16( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setUint16(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in a `Uint8Array`.
        *
        * @private
        * @param {Uint8Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Uint8Array = require( '@stdlib/array-uint8' );
        *
        * var arr = new Uint8Array( 4 );
        *
        * setUint8( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setUint8(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in a `Uint8ClampedArray`.
        *
        * @private
        * @param {Uint8ClampedArray} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {number} value - value to set
        *
        * @example
        * var Uint8ClampedArray = require( '@stdlib/array-uint8c' );
        *
        * var arr = new Uint8ClampedArray( 4 );
        *
        * setUint8c( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setUint8c(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in a generic `Array`.
        *
        * @private
        * @param {Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {*} value - value to set
        *
        * @example
        * var arr = [ 1, 2, 3, 4 ];
        *
        * setGeneric( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setGeneric(arr, idx, value) {
          arr[idx] = value;
        }

        /**
        * Sets an element in an indexed array-like object.
        *
        * @private
        * @param {Collection} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {*} value - value to set
        *
        * @example
        * var arr = [ 1, 2, 3, 4 ];
        *
        * setArrayLike( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setArrayLike$1(arr, idx, value) {
          arr[idx] = value;
        }

        // MAIN //

        /**
        * Returns an accessor function for setting an element in an indexed array-like object.
        *
        * @param {string} dtype - array dtype
        * @returns {Function} accessor
        *
        * @example
        * var dtype = require( '@stdlib/array-dtype' );
        *
        * var arr = [ 1, 2, 3, 4 ];
        *
        * var set = setter( dtype( arr ) );
        * set( arr, 2, 3 );
        *
        * var v = arr[ 2 ];
        * // returns 3
        */
        function setter$2(dtype) {
          var f = SETTERS$1[dtype];
          if (typeof f === 'function') {
            return f;
          }
          return SETTERS$1.default;
        }

        // EXPORTS //

        var main$1y = setter$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return an accessor function for setting an element in an indexed array-like object.
        *
        * @module @stdlib/array-base-setter
        *
        * @example
        * var dtype = require( '@stdlib/array-dtype' );
        * var set = require( '@stdlib/array-base-setter' );
        *
        * var arr = [ 1, 2, 3, 4 ];
        *
        * var set = setter( dtype( arr ) );
        * set( arr, 2, 10 );
        *
        * var v = arr[ 2 ];
        * // returns 10
        */

        // MODULES //

        var main$1x = main$1y;

        // EXPORTS //

        var lib$12 = main$1x;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var GETTERS = {
          'complex128': getComplex128$1,
          'complex64': getComplex64$1,
          'default': getArrayLike
        };

        // FUNCTIONS //

        /**
        * Returns an element from a `Complex128Array`.
        *
        * @private
        * @param {Complex128Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getComplex128( arr, 1 );
        * // returns <Complex128>
        *
        * var re = real( v );
        * // returns 3.0
        *
        * var im = imag( v );
        * // returns 4.0
        */
        function getComplex128$1(arr, idx) {
          return arr.get(idx);
        }

        /**
        * Returns an element from a `Complex64Array`.
        *
        * @private
        * @param {Complex64Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {number} element value
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( [ 1, 2, 3, 4 ] );
        *
        * var v = getComplex64( arr, 1 );
        * // returns <Complex64>
        *
        * var re = realf( v );
        * // returns 3.0
        *
        * var im = imagf( v );
        * // returns 4.0
        */
        function getComplex64$1(arr, idx) {
          return arr.get(idx);
        }

        /**
        * Returns an element from an array-like object supporting the get/set protocol.
        *
        * @private
        * @param {Collection} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @returns {*} element value
        *
        * @example
        * var arr = [ 1, 2, 3, 4 ];
        *
        * function get( idx ) {
        *    return arr[ idx ];
        * }
        *
        * function set( value, idx ) {
        *    arr[ idx ] = value;
        * }
        *
        * arr.get = get;
        * arr.set = set;
        *
        * var v = getArrayLike( arr, 2 );
        * // returns 3
        */
        function getArrayLike(arr, idx) {
          return arr.get(idx);
        }

        // MAIN //

        /**
        * Returns an accessor function for retrieving an element from an array-like object supporting the get/set protocol.
        *
        * @param {string} dtype - array dtype
        * @returns {Function} accessor
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var dtype = require( '@stdlib/array-dtype' );
        *
        * var arr = new Complex64Array( [ 1, 2, 3, 4 ] );
        *
        * var get = getter( dtype( arr ) );
        * var v = get( arr, 1 );
        * // returns <Complex64>
        *
        * var re = realf( v );
        * // returns 3.0
        *
        * var im = imagf( v );
        * // returns 4.0
        */
        function getter$3(dtype) {
          var f = GETTERS[dtype];
          if (typeof f === 'function') {
            return f;
          }
          return GETTERS.default;
        }

        // EXPORTS //

        var main$1w = getter$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return an accessor function for retrieving an element from an array-like object supporting the get/set protocol.
        *
        * @module @stdlib/array-base-accessor-getter
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var dtype = require( '@stdlib/array-dtype' );
        * var getter = require( '@stdlib/array-base-accessor-getter' );
        *
        * var arr = new Complex64Array( [ 1, 2, 3, 4 ] );
        *
        * var get = getter( dtype( arr ) );
        * var v = get( arr, 1 );
        * // returns <Complex64>
        *
        * var re = realf( v );
        * // returns 3.0
        *
        * var im = imagf( v );
        * // returns 4.0
        */

        // MODULES //

        var main$1v = main$1w;

        // EXPORTS //

        var lib$11 = main$1v;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var SETTERS = {
          'complex128': setComplex128,
          'complex64': setComplex64,
          'default': setArrayLike
        };

        // FUNCTIONS //

        /**
        * Sets an element in a `Complex128Array`.
        *
        * @private
        * @param {Complex128Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {(Collection|Complex|ComplexArray)} value - value(s)
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( [ 1, 2, 3, 4 ] );
        *
        * setComplex128( arr, 1, new Complex128( 10.0, 11.0 ) );
        * var v = arr.get( 1 );
        * // returns <Complex128>
        *
        * var re = real( v );
        * // returns 10.0
        *
        * var im = imag( v );
        * // returns 11.0
        */
        function setComplex128(arr, idx, value) {
          arr.set(value, idx);
        }

        /**
        * Sets an element in a `Complex64Array`.
        *
        * @private
        * @param {Complex64Array} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {(Collection|Complex|ComplexArray)} value - value(s)
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( [ 1, 2, 3, 4 ] );
        *
        * setComplex64( arr, 1, new Complex64( 10.0, 11.0 ) );
        * var v = arr.get( 1 );
        * // returns <Complex64>
        *
        * var re = realf( v );
        * // returns 10.0
        *
        * var im = imagf( v );
        * // returns 11.0
        */
        function setComplex64(arr, idx, value) {
          arr.set(value, idx);
        }

        /**
        * Sets an element in an array-like object supporting the get/set protocol.
        *
        * @private
        * @param {Collection} arr - input array
        * @param {NonNegativeInteger} idx - element index
        * @param {(Collection|Complex|ComplexArray)} value - value(s)
        *
        * @example
        * var arr = [ 1, 2, 3, 4 ];
        *
        * function get( idx ) {
        *    return arr[ idx ];
        * }
        *
        * function set( value, idx ) {
        *    arr[ idx ] = value;
        * }
        *
        * arr.get = get;
        * arr.set = set;
        *
        * setArrayLike( arr, 2, 10 );
        *
        * var v = arr[ 2 ];
        * // returns 10
        */
        function setArrayLike(arr, idx, value) {
          arr.set(value, idx);
        }

        // MAIN //

        /**
        * Returns an accessor function for setting an element in an array-like object supporting the get/set protocol.
        *
        * @param {string} dtype - array dtype
        * @returns {Function} accessor
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var dtype = require( '@stdlib/array-dtype' );
        *
        * var arr = new Complex64Array( [ 1, 2, 3, 4 ] );
        *
        * var set = setter( dtype( arr ) );
        * set( arr, 1, new Complex64( 10.0, 11.0 ) );
        *
        * var v = arr.get( 1 );
        * // returns <Complex64>
        *
        * var re = realf( v );
        * // returns 10.0
        *
        * var im = imagf( v );
        * // returns 11.0
        */
        function setter$1(dtype) {
          var f = SETTERS[dtype];
          if (typeof f === 'function') {
            return f;
          }
          return SETTERS.default;
        }

        // EXPORTS //

        var main$1u = setter$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return an accessor function for setting an element in an array-like object supporting the get/set protocol.
        *
        * @module @stdlib/array-base-accessor-setter
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var dtype = require( '@stdlib/array-dtype' );
        * var setter = require( '@stdlib/array-base-accessor-setter' );
        *
        * var arr = new Complex64Array( [ 1, 2, 3, 4 ] );
        *
        * var set = setter( dtype( arr ) );
        * set( arr, 1, new Complex64( 10.0, 11.0 ) );
        *
        * var v = arr.get( 1 );
        * // returns <Complex64>
        *
        * var re = realf( v );
        * // returns 10.0
        *
        * var im = imagf( v );
        * // returns 11.0
        */

        // MODULES //

        var main$1t = main$1u;

        // EXPORTS //

        var lib$10 = main$1t;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        // Mapping from array constructors to data types...
        var ctor2dtypes = {
          'Float32Array': 'float32',
          'Float64Array': 'float64',
          'Array': 'generic',
          'Int16Array': 'int16',
          'Int32Array': 'int32',
          'Int8Array': 'int8',
          'Uint16Array': 'uint16',
          'Uint32Array': 'uint32',
          'Uint8Array': 'uint8',
          'Uint8ClampedArray': 'uint8c',
          'Complex64Array': 'complex64',
          'Complex128Array': 'complex128'
        };

        // EXPORTS //

        var ctor2dtype$1 = ctor2dtypes;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$9 = lib$1C;

        // VARIABLES //

        var hasFloat64Array = typeof Float64Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is a Float64Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a Float64Array
        *
        * @example
        * var bool = isFloat64Array( new Float64Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isFloat64Array( [] );
        * // returns false
        */
        function isFloat64Array$2(value) {
          return hasFloat64Array && value instanceof Float64Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$9(value) === '[object Float64Array]';
        }

        // EXPORTS //

        var main$1s = isFloat64Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Float64Array.
        *
        * @module @stdlib/assert-is-float64array
        *
        * @example
        * var isFloat64Array = require( '@stdlib/assert-is-float64array' );
        *
        * var bool = isFloat64Array( new Float64Array( 10 ) );
        * // returns true
        *
        * bool = isFloat64Array( [] );
        * // returns false
        */

        // MODULES //

        var isFloat64Array$1 = main$1s;

        // EXPORTS //

        var lib$$ = isFloat64Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$1r = typeof Float64Array === 'function' ? Float64Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var float64array = main$1r;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isFloat64Array = lib$$;
        var GlobalFloat64Array = float64array;

        // MAIN //

        /**
        * Tests for native `Float64Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Float64Array` support
        *
        * @example
        * var bool = hasFloat64ArraySupport();
        * // returns <boolean>
        */
        function hasFloat64ArraySupport$3() {
          var bool;
          var arr;
          if (typeof GlobalFloat64Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = new GlobalFloat64Array([1.0, 3.14, -3.14, NaN]);
            bool = isFloat64Array(arr) && arr[0] === 1.0 && arr[1] === 3.14 && arr[2] === -3.14 && arr[3] !== arr[3];
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$1q = hasFloat64ArraySupport$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Float64Array` support.
        *
        * @module @stdlib/assert-has-float64array-support
        *
        * @example
        * var hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );
        *
        * var bool = hasFloat64ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasFloat64ArraySupport$2 = main$1q;

        // EXPORTS //

        var lib$_ = hasFloat64ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$f = typeof Float64Array === 'function' ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$1p = ctor$f;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$h() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$7 = polyfill$h;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
        *
        * @module @stdlib/array-float64
        *
        * @example
        * var ctor = require( '@stdlib/array-float64' );
        *
        * var arr = new ctor( 10 );
        * // returns <Float64Array>
        */

        // MODULES //

        var hasFloat64ArraySupport$1 = lib$_;
        var builtin$8 = main$1p;
        var polyfill$g = polyfill_1$7;

        // MAIN //

        var ctor$e;
        if (hasFloat64ArraySupport$1()) {
          ctor$e = builtin$8;
        } else {
          ctor$e = polyfill$g;
        }

        // EXPORTS //

        var lib$Z = ctor$e;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$8 = lib$1C;

        // VARIABLES //

        var hasFloat32Array = typeof Float32Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is a Float32Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a Float32Array
        *
        * @example
        * var bool = isFloat32Array( new Float32Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isFloat32Array( [] );
        * // returns false
        */
        function isFloat32Array$2(value) {
          return hasFloat32Array && value instanceof Float32Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$8(value) === '[object Float32Array]';
        }

        // EXPORTS //

        var main$1o = isFloat32Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Float32Array.
        *
        * @module @stdlib/assert-is-float32array
        *
        * @example
        * var isFloat32Array = require( '@stdlib/assert-is-float32array' );
        *
        * var bool = isFloat32Array( new Float32Array( 10 ) );
        * // returns true
        *
        * bool = isFloat32Array( [] );
        * // returns false
        */

        // MODULES //

        var isFloat32Array$1 = main$1o;

        // EXPORTS //

        var lib$Y = isFloat32Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$1n = typeof Float32Array === 'function' ? Float32Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var float32array = main$1n;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isFloat32Array = lib$Y;
        var PINF = lib$1g;
        var GlobalFloat32Array = float32array;

        // MAIN //

        /**
        * Tests for native `Float32Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Float32Array` support
        *
        * @example
        * var bool = hasFloat32ArraySupport();
        * // returns <boolean>
        */
        function hasFloat32ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalFloat32Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = new GlobalFloat32Array([1.0, 3.14, -3.14, 5.0e40]);
            bool = isFloat32Array(arr) && arr[0] === 1.0 && arr[1] === 3.140000104904175 && arr[2] === -3.140000104904175 && arr[3] === PINF;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$1m = hasFloat32ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Float32Array` support.
        *
        * @module @stdlib/assert-has-float32array-support
        *
        * @example
        * var hasFloat32ArraySupport = require( '@stdlib/assert-has-float32array-support' );
        *
        * var bool = hasFloat32ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasFloat32ArraySupport$1 = main$1m;

        // EXPORTS //

        var lib$X = hasFloat32ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$d = typeof Float32Array === 'function' ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$1l = ctor$d;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of single-precision floating-point numbers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$f() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$6 = polyfill$f;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.
        *
        * @module @stdlib/array-float32
        *
        * @example
        * var ctor = require( '@stdlib/array-float32' );
        *
        * var arr = new ctor( 10 );
        * // returns <Float32Array>
        */

        // MODULES //

        var hasFloat32ArraySupport = lib$X;
        var builtin$7 = main$1l;
        var polyfill$e = polyfill_1$6;

        // MAIN //

        var ctor$c;
        if (hasFloat32ArraySupport()) {
          ctor$c = builtin$7;
        } else {
          ctor$c = polyfill$e;
        }

        // EXPORTS //

        var lib$W = ctor$c;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$7 = lib$1C;

        // VARIABLES //

        var hasInt32Array = typeof Int32Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is an Int32Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an Int32Array
        *
        * @example
        * var bool = isInt32Array( new Int32Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isInt32Array( [] );
        * // returns false
        */
        function isInt32Array$2(value) {
          return hasInt32Array && value instanceof Int32Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$7(value) === '[object Int32Array]';
        }

        // EXPORTS //

        var main$1k = isInt32Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an Int32Array.
        *
        * @module @stdlib/assert-is-int32array
        *
        * @example
        * var isInt32Array = require( '@stdlib/assert-is-int32array' );
        *
        * var bool = isInt32Array( new Int32Array( 10 ) );
        * // returns true
        *
        * bool = isInt32Array( [] );
        * // returns false
        */

        // MODULES //

        var isInt32Array$1 = main$1k;

        // EXPORTS //

        var lib$V = isInt32Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum signed 32-bit integer.
        *
        * @module @stdlib/constants-int32-max
        * @type {integer32}
        *
        * @example
        * var INT32_MAX = require( '@stdlib/constants-int32-max' );
        * // returns 2147483647
        */

        // MAIN //

        /**
        * Maximum signed 32-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * 2^{31} - 1
        * ```
        *
        * which corresponds to the bit sequence
        *
        * ```binarystring
        * 01111111111111111111111111111111
        * ```
        *
        * @constant
        * @type {integer32}
        * @default 2147483647
        */
        var INT32_MAX$1 = 2147483647 | 0; // asm type annotation

        // EXPORTS //

        var lib$U = INT32_MAX$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Minimum signed 32-bit integer.
        *
        * @module @stdlib/constants-int32-min
        * @type {integer32}
        *
        * @example
        * var INT32_MIN = require( '@stdlib/constants-int32-min' );
        * // returns -2147483648
        */

        // MAIN //

        /**
        * Minimum signed 32-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * -(2^{31})
        * ```
        *
        * which corresponds to the two's complement bit sequence
        *
        * ```binarystring
        * 10000000000000000000000000000000
        * ```
        *
        * @constant
        * @type {integer32}
        * @default -2147483648
        */
        var INT32_MIN$1 = -2147483648 | 0; // asm type annotation

        // EXPORTS //

        var lib$T = INT32_MIN$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$1j = typeof Int32Array === 'function' ? Int32Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var int32array = main$1j;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInt32Array = lib$V;
        var INT32_MAX = lib$U;
        var INT32_MIN = lib$T;
        var GlobalInt32Array = int32array;

        // MAIN //

        /**
        * Tests for native `Int32Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Int32Array` support
        *
        * @example
        * var bool = hasInt32ArraySupport();
        * // returns <boolean>
        */
        function hasInt32ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalInt32Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = new GlobalInt32Array([1, 3.14, -3.14, INT32_MAX + 1]);
            bool = isInt32Array(arr) && arr[0] === 1 && arr[1] === 3 &&
            // truncation
            arr[2] === -3 &&
            // truncation
            arr[3] === INT32_MIN // wrap around
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$1i = hasInt32ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Int32Array` support.
        *
        * @module @stdlib/assert-has-int32array-support
        *
        * @example
        * var hasInt32ArraySupport = require( '@stdlib/assert-has-int32array-support' );
        *
        * var bool = hasInt32ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasInt32ArraySupport$1 = main$1i;

        // EXPORTS //

        var lib$S = hasInt32ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$b = typeof Int32Array === 'function' ? Int32Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$1h = ctor$b;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of twos-complement 32-bit signed integers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$d() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$5 = polyfill$d;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of twos-complement 32-bit signed integers in the platform byte order.
        *
        * @module @stdlib/array-int32
        *
        * @example
        * var ctor = require( '@stdlib/array-int32' );
        *
        * var arr = new ctor( 10 );
        * // returns <Int32Array>
        */

        // MODULES //

        var hasInt32ArraySupport = lib$S;
        var builtin$6 = main$1h;
        var polyfill$c = polyfill_1$5;

        // MAIN //

        var ctor$a;
        if (hasInt32ArraySupport()) {
          ctor$a = builtin$6;
        } else {
          ctor$a = polyfill$c;
        }

        // EXPORTS //

        var lib$R = ctor$a;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$6 = lib$1C;

        // VARIABLES //

        var hasUint16Array = typeof Uint16Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is a Uint16Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a Uint16Array
        *
        * @example
        * var bool = isUint16Array( new Uint16Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isUint16Array( [] );
        * // returns false
        */
        function isUint16Array$2(value) {
          return hasUint16Array && value instanceof Uint16Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$6(value) === '[object Uint16Array]';
        }

        // EXPORTS //

        var main$1g = isUint16Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Uint16Array.
        *
        * @module @stdlib/assert-is-uint16array
        *
        * @example
        * var isUint16Array = require( '@stdlib/assert-is-uint16array' );
        *
        * var bool = isUint16Array( new Uint16Array( 10 ) );
        * // returns true
        *
        * bool = isUint16Array( [] );
        * // returns false
        */

        // MODULES //

        var isUint16Array$1 = main$1g;

        // EXPORTS //

        var lib$Q = isUint16Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum unsigned 16-bit integer.
        *
        * @module @stdlib/constants-uint16-max
        * @type {integer32}
        *
        * @example
        * var UINT16_MAX = require( '@stdlib/constants-uint16-max' );
        * // returns 65535
        */

        // MAIN //

        /**
        * Maximum unsigned 16-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * 2^{16} - 1
        * ```
        *
        * which corresponds to the bit sequence
        *
        * ```binarystring
        * 1111111111111111
        * ```
        *
        * @constant
        * @type {integer32}
        * @default 65535
        */
        var UINT16_MAX$1 = 65535 | 0; // asm type annotation

        // EXPORTS //

        var lib$P = UINT16_MAX$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$1f = typeof Uint16Array === 'function' ? Uint16Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var uint16array = main$1f;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isUint16Array = lib$Q;
        var UINT16_MAX = lib$P;
        var GlobalUint16Array = uint16array;

        // MAIN //

        /**
        * Tests for native `Uint16Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Uint16Array` support
        *
        * @example
        * var bool = hasUint16ArraySupport();
        * // returns <boolean>
        */
        function hasUint16ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalUint16Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = [1, 3.14, -3.14, UINT16_MAX + 1, UINT16_MAX + 2];
            arr = new GlobalUint16Array(arr);
            bool = isUint16Array(arr) && arr[0] === 1 && arr[1] === 3 &&
            // truncation
            arr[2] === UINT16_MAX - 2 &&
            // truncation and wrap around
            arr[3] === 0 &&
            // wrap around
            arr[4] === 1 // wrap around
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$1e = hasUint16ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Uint16Array` support.
        *
        * @module @stdlib/assert-has-uint16array-support
        *
        * @example
        * var hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );
        *
        * var bool = hasUint16ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasUint16ArraySupport$1 = main$1e;

        // EXPORTS //

        var lib$O = hasUint16ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$9 = typeof Uint16Array === 'function' ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$1d = ctor$9;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$b() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$4 = polyfill$b;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
        *
        * @module @stdlib/array-uint16
        *
        * @example
        * var ctor = require( '@stdlib/array-uint16' );
        *
        * var arr = new ctor( 10 );
        * // returns <Uint16Array>
        */

        // MODULES //

        var hasUint16ArraySupport = lib$O;
        var builtin$5 = main$1d;
        var polyfill$a = polyfill_1$4;

        // MAIN //

        var ctor$8;
        if (hasUint16ArraySupport()) {
          ctor$8 = builtin$5;
        } else {
          ctor$8 = polyfill$a;
        }

        // EXPORTS //

        var lib$N = ctor$8;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$5 = lib$1C;

        // VARIABLES //

        var hasInt16Array = typeof Int16Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is an Int16Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an Int16Array
        *
        * @example
        * var bool = isInt16Array( new Int16Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isInt16Array( [] );
        * // returns false
        */
        function isInt16Array$2(value) {
          return hasInt16Array && value instanceof Int16Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$5(value) === '[object Int16Array]';
        }

        // EXPORTS //

        var main$1c = isInt16Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an Int16Array.
        *
        * @module @stdlib/assert-is-int16array
        *
        * @example
        * var isInt16Array = require( '@stdlib/assert-is-int16array' );
        *
        * var bool = isInt16Array( new Int16Array( 10 ) );
        * // returns true
        *
        * bool = isInt16Array( [] );
        * // returns false
        */

        // MODULES //

        var isInt16Array$1 = main$1c;

        // EXPORTS //

        var lib$M = isInt16Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum signed 16-bit integer.
        *
        * @module @stdlib/constants-int16-max
        * @type {integer32}
        *
        * @example
        * var INT16_MAX = require( '@stdlib/constants-int16-max' );
        * // returns 32767
        */

        // MAIN //

        /**
        * Maximum signed 16-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * 2^{15} - 1
        * ```
        *
        * which corresponds to the bit sequence
        *
        * ```binarystring
        * 0111111111111111
        * ```
        *
        * @constant
        * @type {integer32}
        * @default 32767
        */
        var INT16_MAX$1 = 32767 | 0; // asm type annotation

        // EXPORTS //

        var lib$L = INT16_MAX$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Minimum signed 16-bit integer.
        *
        * @module @stdlib/constants-int16-min
        * @type {integer32}
        *
        * @example
        * var INT16_MIN = require( '@stdlib/constants-int16-min' );
        * // returns -32768
        */

        // MAIN //

        /**
        * Minimum signed 16-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * -(2^{15})
        * ```
        *
        * which corresponds to the two's complement bit sequence
        *
        * ```binarystring
        * 1000000000000000
        * ```
        *
        * @constant
        * @type {integer32}
        * @default -32768
        */
        var INT16_MIN$1 = -32768 | 0; // asm type annotation

        // EXPORTS //

        var lib$K = INT16_MIN$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$1b = typeof Int16Array === 'function' ? Int16Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var int16array = main$1b;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInt16Array = lib$M;
        var INT16_MAX = lib$L;
        var INT16_MIN = lib$K;
        var GlobalInt16Array = int16array;

        // MAIN //

        /**
        * Tests for native `Int16Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Int16Array` support
        *
        * @example
        * var bool = hasInt16ArraySupport();
        * // returns <boolean>
        */
        function hasInt16ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalInt16Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = new GlobalInt16Array([1, 3.14, -3.14, INT16_MAX + 1]);
            bool = isInt16Array(arr) && arr[0] === 1 && arr[1] === 3 &&
            // truncation
            arr[2] === -3 &&
            // truncation
            arr[3] === INT16_MIN // wrap around
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$1a = hasInt16ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Int16Array` support.
        *
        * @module @stdlib/assert-has-int16array-support
        *
        * @example
        * var hasInt16ArraySupport = require( '@stdlib/assert-has-int16array-support' );
        *
        * var bool = hasInt16ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasInt16ArraySupport$1 = main$1a;

        // EXPORTS //

        var lib$J = hasInt16ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$7 = typeof Int16Array === 'function' ? Int16Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$19 = ctor$7;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of twos-complement 16-bit signed integers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$9() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$3 = polyfill$9;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of twos-complement 16-bit signed integers in the platform byte order.
        *
        * @module @stdlib/array-int16
        *
        * @example
        * var ctor = require( '@stdlib/array-int16' );
        *
        * var arr = new ctor( 10 );
        * // returns <Int16Array>
        */

        // MODULES //

        var hasInt16ArraySupport = lib$J;
        var builtin$4 = main$19;
        var polyfill$8 = polyfill_1$3;

        // MAIN //

        var ctor$6;
        if (hasInt16ArraySupport()) {
          ctor$6 = builtin$4;
        } else {
          ctor$6 = polyfill$8;
        }

        // EXPORTS //

        var lib$I = ctor$6;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$4 = lib$1C;

        // VARIABLES //

        var hasUint8Array = typeof Uint8Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is a Uint8Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a Uint8Array
        *
        * @example
        * var bool = isUint8Array( new Uint8Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isUint8Array( [] );
        * // returns false
        */
        function isUint8Array$2(value) {
          return hasUint8Array && value instanceof Uint8Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$4(value) === '[object Uint8Array]';
        }

        // EXPORTS //

        var main$18 = isUint8Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Uint8Array.
        *
        * @module @stdlib/assert-is-uint8array
        *
        * @example
        * var isUint8Array = require( '@stdlib/assert-is-uint8array' );
        *
        * var bool = isUint8Array( new Uint8Array( 10 ) );
        * // returns true
        *
        * bool = isUint8Array( [] );
        * // returns false
        */

        // MODULES //

        var isUint8Array$1 = main$18;

        // EXPORTS //

        var lib$H = isUint8Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum unsigned 8-bit integer.
        *
        * @module @stdlib/constants-uint8-max
        * @type {integer32}
        *
        * @example
        * var UINT8_MAX = require( '@stdlib/constants-uint8-max' );
        * // returns 255
        */

        // MAIN //

        /**
        * Maximum unsigned 8-bit integer.
        *
        * ## Notes
        *
        * The number has the value
        *
        * ```tex
        * 2^{8} - 1
        * ```
        *
        * which corresponds to the bit sequence
        *
        * ```binarystring
        * 11111111
        * ```
        *
        * @constant
        * @type {integer32}
        * @default 255
        */
        var UINT8_MAX$1 = 255 | 0; // asm type annotation

        // EXPORTS //

        var lib$G = UINT8_MAX$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$17 = typeof Uint8Array === 'function' ? Uint8Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var uint8array = main$17;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isUint8Array = lib$H;
        var UINT8_MAX = lib$G;
        var GlobalUint8Array = uint8array;

        // MAIN //

        /**
        * Tests for native `Uint8Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Uint8Array` support
        *
        * @example
        * var bool = hasUint8ArraySupport();
        * // returns <boolean>
        */
        function hasUint8ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalUint8Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = [1, 3.14, -3.14, UINT8_MAX + 1, UINT8_MAX + 2];
            arr = new GlobalUint8Array(arr);
            bool = isUint8Array(arr) && arr[0] === 1 && arr[1] === 3 &&
            // truncation
            arr[2] === UINT8_MAX - 2 &&
            // truncation and wrap around
            arr[3] === 0 &&
            // wrap around
            arr[4] === 1 // wrap around
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$16 = hasUint8ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Uint8Array` support.
        *
        * @module @stdlib/assert-has-uint8array-support
        *
        * @example
        * var hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );
        *
        * var bool = hasUint8ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasUint8ArraySupport$1 = main$16;

        // EXPORTS //

        var lib$F = hasUint8ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$5 = typeof Uint8Array === 'function' ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$15 = ctor$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$7() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$2 = polyfill$7;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
        *
        * @module @stdlib/array-uint8
        *
        * @example
        * var ctor = require( '@stdlib/array-uint8' );
        *
        * var arr = new ctor( 10 );
        * // returns <Uint8Array>
        */

        // MODULES //

        var hasUint8ArraySupport = lib$F;
        var builtin$3 = main$15;
        var polyfill$6 = polyfill_1$2;

        // MAIN //

        var ctor$4;
        if (hasUint8ArraySupport()) {
          ctor$4 = builtin$3;
        } else {
          ctor$4 = polyfill$6;
        }

        // EXPORTS //

        var lib$E = ctor$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$3 = lib$1C;

        // VARIABLES //

        var hasUint8ClampedArray = typeof Uint8ClampedArray === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is a Uint8ClampedArray.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a Uint8ClampedArray
        *
        * @example
        * var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isUint8ClampedArray( [] );
        * // returns false
        */
        function isUint8ClampedArray$2(value) {
          return hasUint8ClampedArray && value instanceof Uint8ClampedArray ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$3(value) === '[object Uint8ClampedArray]';
        }

        // EXPORTS //

        var main$14 = isUint8ClampedArray$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a Uint8ClampedArray.
        *
        * @module @stdlib/assert-is-uint8clampedarray
        *
        * @example
        * var isUint8ClampedArray = require( '@stdlib/assert-is-uint8clampedarray' );
        *
        * var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
        * // returns true
        *
        * bool = isUint8ClampedArray( [] );
        * // returns false
        */

        // MODULES //

        var isUint8ClampedArray$1 = main$14;

        // EXPORTS //

        var lib$D = isUint8ClampedArray$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$13 = typeof Uint8ClampedArray === 'function' ? Uint8ClampedArray : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var uint8clampedarray = main$13;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isUint8ClampedArray = lib$D;
        var GlobalUint8ClampedArray = uint8clampedarray;

        // MAIN //

        /**
        * Tests for native `Uint8ClampedArray` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Uint8ClampedArray` support
        *
        * @example
        * var bool = hasUint8ClampedArraySupport();
        * // returns <boolean>
        */
        function hasUint8ClampedArraySupport$2() {
          // eslint-disable-line id-length
          var bool;
          var arr;
          if (typeof GlobalUint8ClampedArray !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = new GlobalUint8ClampedArray([-1, 0, 1, 3.14, 4.99, 255, 256]);
            bool = isUint8ClampedArray(arr) && arr[0] === 0 &&
            // clamped
            arr[1] === 0 && arr[2] === 1 && arr[3] === 3 &&
            // round to nearest
            arr[4] === 5 &&
            // round to nearest
            arr[5] === 255 && arr[6] === 255 // clamped
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$12 = hasUint8ClampedArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Uint8ClampedArray` support.
        *
        * @module @stdlib/assert-has-uint8clampedarray-support
        *
        * @example
        * var hasUint8ClampedArraySupport = require( '@stdlib/assert-has-uint8clampedarray-support' );
        *
        * var bool = hasUint8ClampedArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasUint8ClampedArraySupport$1 = main$12;

        // EXPORTS //

        var lib$C = hasUint8ClampedArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$3 = typeof Uint8ClampedArray === 'function' ? Uint8ClampedArray : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$11 = ctor$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
        *
        * @throws {Error} not implemented
        */
        function polyfill$5() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1$1 = polyfill$5;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
        *
        * @module @stdlib/array-uint8c
        *
        * @example
        * var ctor = require( '@stdlib/array-uint8c' );
        *
        * var arr = new ctor( 10 );
        * // returns <Uint8ClampedArray>
        */

        // MODULES //

        var hasUint8ClampedArraySupport = lib$C; // eslint-disable-line id-length
        var builtin$2 = main$11;
        var polyfill$4 = polyfill_1$1;

        // MAIN //

        var ctor$2;
        if (hasUint8ClampedArraySupport()) {
          ctor$2 = builtin$2;
        } else {
          ctor$2 = polyfill$4;
        }

        // EXPORTS //

        var lib$B = ctor$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$2 = lib$1C;

        // VARIABLES //

        var hasInt8Array = typeof Int8Array === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is an Int8Array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an Int8Array
        *
        * @example
        * var bool = isInt8Array( new Int8Array( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isInt8Array( [] );
        * // returns false
        */
        function isInt8Array$2(value) {
          return hasInt8Array && value instanceof Int8Array ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$2(value) === '[object Int8Array]';
        }

        // EXPORTS //

        var main$10 = isInt8Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an Int8Array.
        *
        * @module @stdlib/assert-is-int8array
        *
        * @example
        * var isInt8Array = require( '@stdlib/assert-is-int8array' );
        *
        * var bool = isInt8Array( new Int8Array( 10 ) );
        * // returns true
        *
        * bool = isInt8Array( [] );
        * // returns false
        */

        // MODULES //

        var isInt8Array$1 = main$10;

        // EXPORTS //

        var lib$A = isInt8Array$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum signed 8-bit integer.
        *
        * @module @stdlib/constants-int8-max
        * @type {integer32}
        *
        * @example
        * var INT8_MAX = require( '@stdlib/constants-int8-max' );
        * // returns 127
        */

        // MAIN //

        /**
        * Maximum signed 8-bit integer.
        *
        * ## Notes
        *
        * The number is given by
        *
        * ```tex
        * 2^{7} - 1
        * ```
        *
        * which corresponds to the bit sequence
        *
        * ```binarystring
        * 01111111
        * ```
        *
        * @constant
        * @type {integer32}
        * @default 127
        */
        var INT8_MAX$1 = 127 | 0; // asm type annotation

        // EXPORTS //

        var lib$z = INT8_MAX$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Minimum signed 8-bit integer.
        *
        * @module @stdlib/constants-int8-min
        * @type {integer32}
        *
        * @example
        * var INT8_MIN = require( '@stdlib/constants-int8-min' );
        * // returns -128
        */

        // MAIN //

        /**
        * Minimum signed 8-bit integer.
        *
        * ## Notes
        *
        * The number is given by
        *
        * ```tex
        * -(2^{7})
        * ```
        *
        * which corresponds to the two's complement bit sequence
        *
        * ```binarystring
        * 10000000
        * ```
        *
        * @constant
        * @type {integer32}
        * @default -128
        */
        var INT8_MIN$1 = -128 | 0; // asm type annotation

        // EXPORTS //

        var lib$y = INT8_MIN$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var main$$ = typeof Int8Array === 'function' ? Int8Array : null; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var int8array = main$$;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInt8Array = lib$A;
        var INT8_MAX = lib$z;
        var INT8_MIN = lib$y;
        var GlobalInt8Array = int8array;

        // MAIN //

        /**
        * Tests for native `Int8Array` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Int8Array` support
        *
        * @example
        * var bool = hasInt8ArraySupport();
        * // returns <boolean>
        */
        function hasInt8ArraySupport$2() {
          var bool;
          var arr;
          if (typeof GlobalInt8Array !== 'function') {
            return false;
          }
          // Test basic support...
          try {
            arr = new GlobalInt8Array([1, 3.14, -3.14, INT8_MAX + 1]);
            bool = isInt8Array(arr) && arr[0] === 1 && arr[1] === 3 &&
            // truncation
            arr[2] === -3 &&
            // truncation
            arr[3] === INT8_MIN // wrap around
            ;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            bool = false;
          }
          return bool;
        }

        // EXPORTS //

        var main$_ = hasInt8ArraySupport$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Int8Array` support.
        *
        * @module @stdlib/assert-has-int8array-support
        *
        * @example
        * var hasInt8ArraySupport = require( '@stdlib/assert-has-int8array-support' );
        *
        * var bool = hasInt8ArraySupport();
        * // returns <boolean>
        */

        // MODULES //

        var hasInt8ArraySupport$1 = main$_;

        // EXPORTS //

        var lib$x = hasInt8ArraySupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var ctor$1 = typeof Int8Array === 'function' ? Int8Array : void 0; // eslint-disable-line stdlib/require-globals

        // EXPORTS //

        var main$Z = ctor$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // TODO: write polyfill

        // MAIN //

        /**
        * Typed array which represents an array of twos-complement 8-bit signed integers in the platform byte order.
        *
        * @throws {Error} not implemented
        */
        function polyfill$3() {
          throw new Error('not implemented');
        }

        // EXPORTS //

        var polyfill_1 = polyfill$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Typed array constructor which returns a typed array representing an array of twos-complement 8-bit signed integers in the platform byte order.
        *
        * @module @stdlib/array-int8
        *
        * @example
        * var ctor = require( '@stdlib/array-int8' );
        *
        * var arr = new ctor( 10 );
        * // returns <Int8Array>
        */

        // MODULES //

        var hasInt8ArraySupport = lib$x;
        var builtin$1 = main$Z;
        var polyfill$2 = polyfill_1;

        // MAIN //

        var ctor;
        if (hasInt8ArraySupport()) {
          ctor = builtin$1;
        } else {
          ctor = polyfill$2;
        }

        // EXPORTS //

        var lib$w = ctor;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$5 = lib$1e.isPrimitive;

        // MAIN //

        /**
        * Tests if a value is a number primitive having a nonnegative integer value.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
        *
        * @example
        * var bool = isNonNegativeInteger( 3.0 );
        * // returns true
        *
        * @example
        * var bool = isNonNegativeInteger( new Number( 3.0 ) );
        * // returns false
        */
        function isNonNegativeInteger$4(value) {
          return isInteger$5(value) && value >= 0;
        }

        // EXPORTS //

        var primitive$1 = isNonNegativeInteger$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$4 = lib$1e.isObject;

        // MAIN //

        /**
        * Tests if a value is a number object having a nonnegative integer value.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
        *
        * @example
        * var bool = isNonNegativeInteger( 3.0 );
        * // returns false
        *
        * @example
        * var bool = isNonNegativeInteger( new Number( 3.0 ) );
        * // returns true
        */
        function isNonNegativeInteger$3(value) {
          return isInteger$4(value) && value.valueOf() >= 0;
        }

        // EXPORTS //

        var object$1 = isNonNegativeInteger$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPrimitive$3 = primitive$1;
        var isObject$6 = object$1;

        // MAIN //

        /**
        * Tests if a value is a nonnegative integer.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a nonnegative integer
        *
        * @example
        * var bool = isNonNegativeInteger( 5.0 );
        * // returns true
        *
        * @example
        * var bool = isNonNegativeInteger( new Number( 5.0 ) );
        * // returns true
        *
        * @example
        * var bool = isNonNegativeInteger( -5.0 );
        * // returns false
        *
        * @example
        * var bool = isNonNegativeInteger( 3.14 );
        * // returns false
        *
        * @example
        * var bool = isNonNegativeInteger( null );
        * // returns false
        */
        function isNonNegativeInteger$2(value) {
          return isPrimitive$3(value) || isObject$6(value);
        }

        // EXPORTS //

        var main$Y = isNonNegativeInteger$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a nonnegative integer.
        *
        * @module @stdlib/assert-is-nonnegative-integer
        *
        * @example
        * var isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );
        *
        * var bool = isNonNegativeInteger( 5.0 );
        * // returns true
        *
        * bool = isNonNegativeInteger( new Number( 5.0 ) );
        * // returns true
        *
        * bool = isNonNegativeInteger( -5.0 );
        * // returns false
        *
        * bool = isNonNegativeInteger( 3.14 );
        * // returns false
        *
        * bool = isNonNegativeInteger( null );
        * // returns false
        *
        * @example
        * var isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;
        *
        * var bool = isNonNegativeInteger( 3.0 );
        * // returns true
        *
        * bool = isNonNegativeInteger( new Number( 3.0 ) );
        * // returns false
        *
        * @example
        * var isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isObject;
        *
        * var bool = isNonNegativeInteger( 3.0 );
        * // returns false
        *
        * bool = isNonNegativeInteger( new Number( 3.0 ) );
        * // returns true
        */

        // MODULES //

        var setReadOnly$8 = lib$1J;
        var main$X = main$Y;
        var isPrimitive$2 = primitive$1;
        var isObject$5 = object$1;

        // MAIN //

        setReadOnly$8(main$X, 'isPrimitive', isPrimitive$2);
        setReadOnly$8(main$X, 'isObject', isObject$5);

        // EXPORTS //

        var lib$v = main$X;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Maximum length of a generic array.
        *
        * @module @stdlib/constants-array-max-array-length
        *
        * @example
        * var MAX_ARRAY_LENGTH = require( '@stdlib/constants-array-max-array-length' );
        * // returns 4294967295
        */

        // MAIN //

        /**
        * Maximum length of a generic array.
        *
        * ```tex
        * 2^{32} - 1
        * ```
        *
        * @constant
        * @type {uinteger32}
        * @default 4294967295
        */
        var MAX_ARRAY_LENGTH = 4294967295 >>> 0; // asm type annotation

        // EXPORTS //

        var lib$u = MAX_ARRAY_LENGTH;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$3 = lib$1m;
        var MAX_LENGTH = lib$u;

        // MAIN //

        /**
        * Tests if a value is an array-like object.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is an array-like object
        *
        * @example
        * var bool = isArrayLikeObject( [] );
        * // returns true
        *
        * @example
        * var bool = isArrayLikeObject( { 'length':10 } );
        * // returns true
        *
        * @example
        * var bool = isArrayLikeObject( 'beep' );
        * // returns false
        */
        function isArrayLikeObject$6(value) {
          return typeof value === 'object' && value !== null && typeof value.length === 'number' && isInteger$3(value.length) && value.length >= 0 && value.length <= MAX_LENGTH;
        }

        // EXPORTS //

        var main$W = isArrayLikeObject$6;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an array-like object.
        *
        * @module @stdlib/assert-is-array-like-object
        *
        * @example
        * var isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );
        *
        * var bool = isArrayLikeObject( [] );
        * // returns true
        *
        * bool = isArrayLikeObject( { 'length':10 } );
        * // returns true
        *
        * bool = isArrayLikeObject( 'beep' );
        * // returns false
        */

        // MODULES //

        var main$V = main$W;

        // EXPORTS //

        var lib$t = main$V;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var nativeClass$1 = lib$1C;

        // VARIABLES //

        var hasArrayBuffer = typeof ArrayBuffer === 'function'; // eslint-disable-line stdlib/require-globals

        // MAIN //

        /**
        * Tests if a value is an ArrayBuffer.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is an ArrayBuffer
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var bool = isArrayBuffer( new ArrayBuffer( 10 ) );
        * // returns true
        *
        * @example
        * var bool = isArrayBuffer( [] );
        * // returns false
        */
        function isArrayBuffer$2(value) {
          return hasArrayBuffer && value instanceof ArrayBuffer ||
          // eslint-disable-line stdlib/require-globals
          nativeClass$1(value) === '[object ArrayBuffer]';
        }

        // EXPORTS //

        var main$U = isArrayBuffer$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is an ArrayBuffer.
        *
        * @module @stdlib/assert-is-arraybuffer
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );
        *
        * var bool = isArrayBuffer( new ArrayBuffer( 10 ) );
        * // returns true
        *
        * bool = isArrayBuffer( [] );
        * // returns false
        */

        // MODULES //

        var main$T = main$U;

        // EXPORTS //

        var lib$s = main$T;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Tests if a value is a string primitive.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a string primitive
        *
        * @example
        * var bool = isString( 'beep' );
        * // returns true
        *
        * @example
        * var bool = isString( new String( 'beep' ) );
        * // returns false
        */
        function isString$4(value) {
          return typeof value === 'string';
        }

        // EXPORTS //

        var primitive = isString$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // eslint-disable-next-line stdlib/no-redeclare
        var valueOf$1 = String.prototype.valueOf; // non-generic

        // EXPORTS //

        var valueof = valueOf$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var valueOf = valueof; // eslint-disable-line stdlib/no-redeclare

        // MAIN //

        /**
        * Attempts to extract a string value.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a string can be extracted
        */
        function test$1(value) {
          try {
            valueOf.call(value);
            return true;
          } catch (err) {
            // eslint-disable-line no-unused-vars
            return false;
          }
        }

        // EXPORTS //

        var try2valueof = test$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasToStringTag = lib$1E;
        var nativeClass = lib$1C;
        var test = try2valueof;

        // VARIABLES //

        var FLG = hasToStringTag();

        // MAIN //

        /**
        * Tests if a value is a string object.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a string object
        *
        * @example
        * var bool = isString( new String( 'beep' ) );
        * // returns true
        *
        * @example
        * var bool = isString( 'beep' );
        * // returns false
        */
        function isString$3(value) {
          if (typeof value === 'object') {
            if (value instanceof String) {
              return true;
            }
            if (FLG) {
              return test(value);
            }
            return nativeClass(value) === '[object String]';
          }
          return false;
        }

        // EXPORTS //

        var object = isString$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isPrimitive$1 = primitive;
        var isObject$4 = object;

        // MAIN //

        /**
        * Tests if a value is a string.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating whether value is a string
        *
        * @example
        * var bool = isString( new String( 'beep' ) );
        * // returns true
        *
        * @example
        * var bool = isString( 'beep' );
        * // returns true
        */
        function isString$2(value) {
          return isPrimitive$1(value) || isObject$4(value);
        }

        // EXPORTS //

        var main$S = isString$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a string.
        *
        * @module @stdlib/assert-is-string
        *
        * @example
        * var isString = require( '@stdlib/assert-is-string' );
        *
        * var bool = isString( 'beep' );
        * // returns true
        *
        * bool = isString( new String( 'beep' ) );
        * // returns true
        *
        * bool = isString( 5 );
        * // returns false
        *
        * @example
        * var isString = require( '@stdlib/assert-is-string' ).isObject;
        *
        * var bool = isString( new String( 'beep' ) );
        * // returns true
        *
        * bool = isString( 'beep' );
        * // returns false
        *
        * @example
        * var isString = require( '@stdlib/assert-is-string' ).isPrimitive;
        *
        * var bool = isString( 'beep' );
        * // returns true
        *
        * bool = isString( new String( 'beep' ) );
        * // returns false
        */

        // MODULES //

        var setReadOnly$7 = lib$1J;
        var main$R = main$S;
        var isPrimitive = primitive;
        var isObject$3 = object;

        // MAIN //

        setReadOnly$7(main$R, 'isPrimitive', isPrimitive);
        setReadOnly$7(main$R, 'isObject', isObject$3);

        // EXPORTS //

        var lib$r = main$R;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Serializes a complex number as a string.
        *
        * @private
        * @returns {string} serialized complex number
        */
        function toString$1() {
          // eslint-disable-line stdlib/no-redeclare
          /* eslint-disable no-invalid-this */
          var str = '' + this.re;
          if (this.im < 0) {
            str += ' - ' + -this.im;
          } else {
            str += ' + ' + this.im;
          }
          str += 'i';
          return str;
        }

        // EXPORTS //

        var tostring$1 = toString$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Serializes a complex number as a JSON object.
        *
        * @private
        * @returns {Object} JSON representation
        */
        function toJSON$3() {
          /* eslint-disable no-invalid-this */
          var out = {};
          out.type = 'Complex128';
          out.re = this.re;
          out.im = this.im;
          return out;
        }

        // EXPORTS //

        var tojson$1 = toJSON$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isNumber$1 = lib$1h.isPrimitive;
        var defineProperty$1 = lib$1K;
        var setReadOnly$6 = lib$1J;
        var format$b = lib$1L;
        var toStr$1 = tostring$1;
        var toJSON$2 = tojson$1;

        // MAIN //

        /**
        * 128-bit complex number constructor.
        *
        * @constructor
        * @param {number} real - real component
        * @param {number} imag - imaginary component
        * @throws {TypeError} must invoke using the `new` keyword
        * @throws {TypeError} real component must be a number
        * @throws {TypeError} imaginary component must be a number
        * @returns {Complex128} 128-bit complex number
        *
        * @example
        * var z = new Complex128( 5.0, 3.0 );
        * // returns <Complex128>
        */
        function Complex128$2(real, imag) {
          if (!(this instanceof Complex128$2)) {
            throw new TypeError('invalid invocation. Constructor must be called with the `new` keyword.');
          }
          if (!isNumber$1(real)) {
            throw new TypeError(format$b('invalid argument. Real component must be a number. Value: `%s`.', real));
          }
          if (!isNumber$1(imag)) {
            throw new TypeError(format$b('invalid argument. Imaginary component must be a number. Value: `%s`.', imag));
          }
          defineProperty$1(this, 're', {
            'configurable': false,
            'enumerable': true,
            'writable': false,
            'value': real
          });
          defineProperty$1(this, 'im', {
            'configurable': false,
            'enumerable': true,
            'writable': false,
            'value': imag
          });
          return this;
        }

        /**
        * Size (in bytes) of each component.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex128
        * @type {integer}
        * @returns {integer} size of each component
        *
        * @example
        * var nbytes = Complex128.BYTES_PER_ELEMENT;
        * // returns 8
        */
        setReadOnly$6(Complex128$2, 'BYTES_PER_ELEMENT', 8);

        /**
        * Size (in bytes) of each component.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex128.prototype
        * @type {integer}
        * @returns {integer} size of each component
        *
        * @example
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var nbytes = z.BYTES_PER_ELEMENT;
        * // returns 8
        */
        setReadOnly$6(Complex128$2.prototype, 'BYTES_PER_ELEMENT', 8);

        /**
        * Length (in bytes) of a complex number.
        *
        * @name byteLength
        * @memberof Complex128.prototype
        * @type {integer}
        * @returns {integer} byte length
        *
        * @example
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var nbytes = z.byteLength;
        * // returns 16
        */
        setReadOnly$6(Complex128$2.prototype, 'byteLength', 16);

        /**
        * Serializes a complex number as a string.
        *
        * @name toString
        * @memberof Complex128.prototype
        * @type {Function}
        * @returns {string} serialized complex number
        *
        * @example
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var str = z.toString();
        * // returns '5 + 3i'
        */
        setReadOnly$6(Complex128$2.prototype, 'toString', toStr$1);

        /**
        * Serializes a complex number as a JSON object.
        *
        * ## Notes
        *
        * -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.
        *
        * @name toJSON
        * @memberof Complex128.prototype
        * @type {Function}
        * @returns {Object} serialized complex number
        *
        * @example
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var obj = z.toJSON();
        * // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }
        */
        setReadOnly$6(Complex128$2.prototype, 'toJSON', toJSON$2);

        // EXPORTS //

        var main$Q = Complex128$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * 128-bit complex number constructor.
        *
        * @module @stdlib/complex-float64
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var z = new Complex128( 5.0, 3.0 );
        * // returns <Complex128>
        */

        // MODULES //

        var main$P = main$Q;

        // EXPORTS //

        var lib$q = main$P;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        var fround = typeof Math.fround === 'function' ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math

        // EXPORTS //

        var main$O = fround;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Float32Array$6 = lib$W;

        // VARIABLES //

        var FLOAT32_VIEW = new Float32Array$6(1);

        // MAIN //

        /**
        * Converts a double-precision floating-point number to the nearest single-precision floating-point number.
        *
        * @param {number} x - double-precision floating-point number
        * @returns {number} nearest single-precision floating-point number
        *
        * @example
        * var y = float64ToFloat32( 1.337 );
        * // returns 1.3370000123977661
        */
        function float64ToFloat32$2(x) {
          FLOAT32_VIEW[0] = x;
          return FLOAT32_VIEW[0];
        }

        // EXPORTS //

        var polyfill$1 = float64ToFloat32$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Convert a double-precision floating-point number to the nearest single-precision floating-point number.
        *
        * @module @stdlib/number-float64-base-to-float32
        *
        * @example
        * var float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );
        *
        * var y = float64ToFloat32( 1.337 );
        * // returns 1.3370000123977661
        */

        // MODULES //

        var builtin = main$O;
        var polyfill = polyfill$1;

        // MAIN //

        var float64ToFloat32$1;
        if (typeof builtin === 'function') {
          float64ToFloat32$1 = builtin;
        } else {
          float64ToFloat32$1 = polyfill;
        }

        // EXPORTS //

        var lib$p = float64ToFloat32$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Serializes a complex number as a string.
        *
        * @private
        * @returns {string} serialized complex number
        */
        function toString() {
          // eslint-disable-line stdlib/no-redeclare
          /* eslint-disable no-invalid-this */
          var str = '' + this.re;
          if (this.im < 0) {
            str += ' - ' + -this.im;
          } else {
            str += ' + ' + this.im;
          }
          str += 'i';
          return str;
        }

        // EXPORTS //

        var tostring = toString;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Serializes a complex number as a JSON object.
        *
        * @private
        * @returns {Object} JSON representation
        */
        function toJSON$1() {
          /* eslint-disable no-invalid-this */
          var out = {};
          out.type = 'Complex64';
          out.re = this.re;
          out.im = this.im;
          return out;
        }

        // EXPORTS //

        var tojson = toJSON$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isNumber = lib$1h.isPrimitive;
        var defineProperty = lib$1K;
        var setReadOnly$5 = lib$1J;
        var float64ToFloat32 = lib$p;
        var format$a = lib$1L;
        var toStr = tostring;
        var toJSON = tojson;

        // MAIN //

        /**
        * 64-bit complex number constructor.
        *
        * @constructor
        * @param {number} real - real component
        * @param {number} imag - imaginary component
        * @throws {TypeError} must invoke using the `new` keyword
        * @throws {TypeError} real component must be a number
        * @throws {TypeError} imaginary component must be a number
        * @returns {Complex64} 64-bit complex number
        *
        * @example
        * var z = new Complex64( 5.0, 3.0 );
        * // returns <Complex64>
        */
        function Complex64$2(real, imag) {
          if (!(this instanceof Complex64$2)) {
            throw new TypeError('invalid invocation. Constructor must be called with the `new` keyword.');
          }
          if (!isNumber(real)) {
            throw new TypeError(format$a('invalid argument. Real component must be a number. Value: `%s`.', real));
          }
          if (!isNumber(imag)) {
            throw new TypeError(format$a('invalid argument. Imaginary component must be a number. Value: `%s`.', imag));
          }
          defineProperty(this, 're', {
            'configurable': false,
            'enumerable': true,
            'writable': false,
            'value': float64ToFloat32(real)
          });
          defineProperty(this, 'im', {
            'configurable': false,
            'enumerable': true,
            'writable': false,
            'value': float64ToFloat32(imag)
          });
          return this;
        }

        /**
        * Size (in bytes) of each component.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex64
        * @type {integer}
        * @returns {integer} size of each component
        *
        * @example
        * var nbytes = Complex64.BYTES_PER_ELEMENT;
        * // returns 4
        */
        setReadOnly$5(Complex64$2, 'BYTES_PER_ELEMENT', 4);

        /**
        * Size (in bytes) of each component.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex64.prototype
        * @type {integer}
        * @returns {integer} size of each component
        *
        * @example
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var nbytes = z.BYTES_PER_ELEMENT;
        * // returns 4
        */
        setReadOnly$5(Complex64$2.prototype, 'BYTES_PER_ELEMENT', 4);

        /**
        * Length (in bytes) of a complex number.
        *
        * @name byteLength
        * @memberof Complex64.prototype
        * @type {integer}
        * @returns {integer} byte length
        *
        * @example
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var nbytes = z.byteLength;
        * // returns 8
        */
        setReadOnly$5(Complex64$2.prototype, 'byteLength', 8);

        /**
        * Serializes a complex number as a string.
        *
        * @name toString
        * @memberof Complex64.prototype
        * @type {Function}
        * @returns {string} serialized complex number
        *
        * @example
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var str = z.toString();
        * // returns '5 + 3i'
        */
        setReadOnly$5(Complex64$2.prototype, 'toString', toStr);

        /**
        * Serializes a complex number as a JSON object.
        *
        * ## Notes
        *
        * -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.
        *
        * @name toJSON
        * @memberof Complex64.prototype
        * @type {Function}
        * @returns {Object} serialized complex number
        *
        * @example
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var obj = z.toJSON();
        * // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }
        */
        setReadOnly$5(Complex64$2.prototype, 'toJSON', toJSON);

        // EXPORTS //

        var main$N = Complex64$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * 64-bit complex number constructor.
        *
        * @module @stdlib/complex-float32
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var z = new Complex64( 5.0, 3.0 );
        * // returns <Complex64>
        */

        // MODULES //

        var main$M = main$N;

        // EXPORTS //

        var lib$o = main$M;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Complex128$1 = lib$q;
        var Complex64$1 = lib$o;

        // MAIN //

        /**
        * Tests if a value is a complex number-like object.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a complex number-like object.
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var x = new Complex128( 4.0, 2.0 );
        * var bool = isComplexLike( x );
        * // returns true
        *
        * x = new Complex64( 4.0, 2.0 );
        * bool = isComplexLike( x );
        * // returns true
        */
        function isComplexLike$8(value) {
          if (value instanceof Complex128$1 || value instanceof Complex64$1) {
            return true;
          }
          return typeof value === 'object' && value !== null && typeof value.re === 'number' && typeof value.im === 'number';
        }

        // EXPORTS //

        var main$L = isComplexLike$8;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a complex number-like object.
        *
        * @module @stdlib/assert-is-complex-like
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var isComplexLike = require( '@stdlib/assert-is-complex-like' );
        *
        * var x = new Complex128( 4.0, 2.0 );
        * var bool = isComplexLike( x );
        * // returns true
        *
        * x = new Complex64( 4.0, 2.0 );
        * bool = isComplexLike( x );
        * // returns true
        */

        // MODULES //

        var main$K = main$L;

        // EXPORTS //

        var lib$n = main$K;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isInteger$2 = lib$1m;

        // MAIN //

        /**
        * Tests if a finite numeric value is an even number.
        *
        * @param {number} x - value to test
        * @returns {boolean} boolean indicating whether the value is an even number
        *
        * @example
        * var bool = isEven( 5.0 );
        * // returns false
        *
        * @example
        * var bool = isEven( -2.0 );
        * // returns true
        *
        * @example
        * var bool = isEven( 0.0 );
        * // returns true
        *
        * @example
        * var bool = isEven( NaN );
        * // returns false
        */
        function isEven$2(x) {
          return isInteger$2(x / 2.0);
        }

        // EXPORTS //

        var main$J = isEven$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a finite numeric value is an even number.
        *
        * @module @stdlib/math-base-assert-is-even
        *
        * @example
        * var isEven = require( '@stdlib/math-base-assert-is-even' );
        *
        * var bool = isEven( 5.0 );
        * // returns false
        *
        * bool = isEven( -2.0 );
        * // returns true
        *
        * bool = isEven( 0.0 );
        * // returns true
        *
        * bool = isEven( NaN );
        * // returns false
        */

        // MODULES //

        var main$I = main$J;

        // EXPORTS //

        var lib$m = main$I;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2024 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var BYTES_PER_ELEMENT$3 = 8; // 4 bytes per float32 x (1 real + 1 imag component)

        // MAIN //

        /**
        * Returns a boolean indicating if a value is a `Complex64Array`.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a `Complex64Array`
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var bool = isComplex64Array( new Complex64Array( 10 ) );
        * // returns true
        *
        * bool = isComplex64Array( [] );
        * // returns false
        */
        function isComplex64Array$2(value) {
          // Note: the following is not robust and that is intentional. In this case, we are seeking a lower cost way to reasonably determine whether an input value is a `Complex64Array` in order to avoid walking the prototype chain and resolving constructors, which is necessary for robust identification of cross-realm instances. For more robust validation, see `@stdlib/assert/is-complex64array`.
          return typeof value === 'object' && value !== null && value.constructor.name === 'Complex64Array' && value.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT$3;
        }

        // EXPORTS //

        var main$H = isComplex64Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2024 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a `Complex64Array`.
        *
        * @module @stdlib/array-base-assert-is-complex64array
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var isComplex64Array = require( '@stdlib/array-base-assert-is-complex64array' );
        *
        * var bool = isComplex64Array( new Complex64Array( 10 ) );
        * // returns true
        *
        * bool = isComplex64Array( [] );
        * // returns false
        */

        // MODULES //

        var main$G = main$H;

        // EXPORTS //

        var lib$l = main$G;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2024 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // VARIABLES //

        var BYTES_PER_ELEMENT$2 = 16; // 8 bytes per float64 x (1 real + 1 imag component)

        // MAIN //

        /**
        * Returns a boolean indicating if a value is a `Complex128Array`.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a `Complex128Array`
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var bool = isComplex128Array( new Complex128Array( 10 ) );
        * // returns true
        *
        * bool = isComplex128Array( [] );
        * // returns false
        */
        function isComplex128Array$2(value) {
          // Note: the following is not robust and that is intentional. In this case, we are seeking a lower cost way to reasonably determine whether an input value is a `Complex128Array` in order to avoid walking the prototype chain and resolving constructors, which is necessary for robust identification of cross-realm instances. For more robust validation, see `@stdlib/assert/is-complex128array`.
          return typeof value === 'object' && value !== null && value.constructor.name === 'Complex128Array' && value.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT$2;
        }

        // EXPORTS //

        var main$F = isComplex128Array$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2024 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a `Complex128Array`.
        *
        * @module @stdlib/array-base-assert-is-complex128array
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        * var isComplex128Array = require( '@stdlib/array-base-assert-is-complex128array' );
        *
        * var bool = isComplex128Array( new Complex128Array( 10 ) );
        * // returns true
        *
        * bool = isComplex128Array( [] );
        * // returns false
        */

        // MODULES //

        var main$E = main$F;

        // EXPORTS //

        var lib$k = main$E;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasOwnProp$1 = lib$1G;
        var Symbol$1 = lib$1D;

        // MAIN //

        /**
        * Tests for native `Symbol.iterator` support.
        *
        * @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support
        *
        * @example
        * var bool = hasIteratorSymbolSupport();
        * // returns <boolean>
        */
        function hasIteratorSymbolSupport$3() {
          return typeof Symbol$1 === 'function' && typeof Symbol$1('foo') === 'symbol' && hasOwnProp$1(Symbol$1, 'iterator') && typeof Symbol$1.iterator === 'symbol';
        }

        // EXPORTS //

        var main$D = hasIteratorSymbolSupport$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native `Symbol.iterator` support.
        *
        * @module @stdlib/assert-has-iterator-symbol-support
        *
        * @example
        * var hasIteratorSymbolSupport = require( '@stdlib/assert-has-iterator-symbol-support' );
        *
        * var bool = hasIteratorSymbolSupport();
        * // returns <boolean>
        */

        // MODULES //

        var main$C = main$D;

        // EXPORTS //

        var lib$j = main$C;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var hasIteratorSymbolSupport$2 = lib$j;

        // MAIN //

        /**
        * Iterator symbol.
        *
        * @name IteratorSymbol
        * @constant
        * @type {(symbol|null)}
        *
        * @example
        * function iterator() {
        *     var it;
        *     var i;
        *
        *     i = -1;
        *
        *     it = {};
        *     it.next = next;
        *     it.return = done;
        *
        *     if ( IteratorSymbol ) {
        *         it[ IteratorSymbol ] = iterator;
        *     }
        *     return it;
        *
        *     function next() {
        *         i += 1;
        *         return {
        *             'value': i,
        *             'done': false
        *         };
        *     }
        *
        *     function done( value ) {
        *         if ( arguments.length === 0 ) {
        *             return {
        *                 'done': true
        *             };
        *         }
        *         return {
        *             'value': value,
        *             'done': true
        *         };
        *     }
        * }
        *
        * var obj = iterator();
        */
        var IteratorSymbol = hasIteratorSymbolSupport$2() ? Symbol.iterator : null;

        // EXPORTS //

        var main$B = IteratorSymbol;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Iterator symbol.
        *
        * @module @stdlib/symbol-iterator
        *
        * @example
        * var IteratorSymbol = require( '@stdlib/symbol-iterator' );
        *
        * function iterator() {
        *     var it;
        *     var i;
        *
        *     i = -1;
        *
        *     it = {};
        *     it.next = next;
        *     it.return = done;
        *
        *     if ( IteratorSymbol ) {
        *         it[ IteratorSymbol ] = iterator;
        *     }
        *     return it;
        *
        *     function next() {
        *         i += 1;
        *         return {
        *             'value': i,
        *             'done': false
        *         };
        *     }
        *
        *     function done( value ) {
        *         if ( arguments.length === 0 ) {
        *             return {
        *                 'done': true
        *             };
        *         }
        *         return {
        *             'value': value,
        *             'done': true
        *         };
        *     }
        * }
        *
        * var obj = iterator();
        */

        // MAIN //

        var main$A = main$B;

        // EXPORTS //

        var lib$i = main$A;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Returns the real component of a single-precision complex floating-point number.
        *
        * @param {Complex} z - complex number
        * @returns {number} real component
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var re = realf( z );
        * // returns 5.0
        */
        function realf$4(z) {
          return z.re;
        }

        // EXPORTS //

        var main$z = realf$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the real component of a single-precision complex floating-point number.
        *
        * @module @stdlib/complex-realf
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        *
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var re = realf( z );
        * // returns 5.0
        */

        // MODULES //

        var main$y = main$z;

        // EXPORTS //

        var lib$h = main$y;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Returns the imaginary component of a single-precision complex floating-point number.
        *
        * @param {Complex} z - complex number
        * @returns {number} imaginary component
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var im = imagf( z );
        * // returns 3.0
        */
        function imagf$4(z) {
          return z.im;
        }

        // EXPORTS //

        var main$x = imagf$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the imaginary component of a single-precision complex floating-point number.
        *
        * @module @stdlib/complex-imagf
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var z = new Complex64( 5.0, 3.0 );
        *
        * var im = imagf( z );
        * // returns 3.0
        */

        // MODULES //

        var main$w = main$x;

        // EXPORTS //

        var lib$g = main$w;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Float32Array$5 = lib$W;

        // MAIN //

        /**
        * Reinterprets a `Complex64Array` as a `Float32Array`.
        *
        * @param {Complex64Array} x - input array
        * @param {NonNegativeInteger} offset - starting index
        * @returns {Float32Array} `Float32Array` view
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var x = new Complex64Array( 10 );
        *
        * var out = reinterpret( x, 0 );
        * // returns <Float32Array>
        *
        * var bool = ( out.buffer === x.buffer );
        * // returns true
        */
        function reinterpret$1(x, offset) {
          return new Float32Array$5(x.buffer, x.byteOffset + x.BYTES_PER_ELEMENT * offset, 2 * (x.length - offset)); // eslint-disable-line max-len
        }

        // EXPORTS //

        var main$v = reinterpret$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Reinterpret a `Complex64Array` as a `Float32Array`.
        *
        * @module @stdlib/strided-base-reinterpret-complex64
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );
        *
        * var x = new Complex64Array( 10 );
        *
        * var out = reinterpret( x, 0 );
        * // returns <Float32Array>
        *
        * var bool = ( out.buffer === x.buffer );
        * // returns true
        */

        // MODULES //

        var main$u = main$v;

        // EXPORTS //

        var lib$f = main$u;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Float64Array$6 = lib$Z;

        // MAIN //

        /**
        * Reinterprets a `Complex128Array` as a `Float64Array`.
        *
        * @param {Complex128Array} x - input array
        * @param {NonNegativeInteger} offset - starting index
        * @returns {Float64Array} `Float64Array` view
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var x = new Complex128Array( 10 );
        *
        * var out = reinterpret( x, 0 );
        * // returns <Float64Array>
        *
        * var bool = ( out.buffer === x.buffer );
        * // returns true
        */
        function reinterpret(x, offset) {
          return new Float64Array$6(x.buffer, x.byteOffset + x.BYTES_PER_ELEMENT * offset, 2 * (x.length - offset)); // eslint-disable-line max-len
        }

        // EXPORTS //

        var main$t = reinterpret;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2021 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Reinterpret a `Complex128Array` as a `Float64Array`.
        *
        * @module @stdlib/strided-base-reinterpret-complex128
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        * var reinterpret = require( '@stdlib/strided-base-reinterpret-complex128' );
        *
        * var x = new Complex128Array( 10 );
        *
        * var out = reinterpret( x, 0 );
        * // returns <Float64Array>
        *
        * var bool = ( out.buffer === x.buffer );
        * // returns true
        */

        // MODULES //

        var main$s = main$t;

        // EXPORTS //

        var lib$e = main$s;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isArrayLikeObject$5 = lib$t;
        var isComplexLike$7 = lib$n;
        var realf$3 = lib$h;
        var imagf$3 = lib$g;
        var format$9 = lib$1L;

        // MAIN //

        /**
        * Returns an array of iterated values.
        *
        * @private
        * @param {Object} it - iterator
        * @returns {(Array|TypeError)} array or an error
        */
        function fromIterator$3(it) {
          var out;
          var v;
          var z;
          out = [];
          while (true) {
            v = it.next();
            if (v.done) {
              break;
            }
            z = v.value;
            if (isArrayLikeObject$5(z) && z.length >= 2) {
              out.push(z[0], z[1]);
            } else if (isComplexLike$7(z)) {
              out.push(realf$3(z), imagf$3(z));
            } else {
              return new TypeError(format$9('invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z));
            }
          }
          return out;
        }

        // EXPORTS //

        var from_iterator$1 = fromIterator$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isArrayLikeObject$4 = lib$t;
        var isComplexLike$6 = lib$n;
        var realf$2 = lib$h;
        var imagf$2 = lib$g;
        var format$8 = lib$1L;

        // MAIN //

        /**
        * Returns an array of iterated values.
        *
        * @private
        * @param {Object} it - iterator
        * @param {Function} clbk - callback to invoke for each iterated value
        * @param {*} thisArg - invocation context
        * @returns {(Array|TypeError)} array or an error
        */
        function fromIteratorMap$3(it, clbk, thisArg) {
          var out;
          var v;
          var z;
          var i;
          out = [];
          i = -1;
          while (true) {
            v = it.next();
            if (v.done) {
              break;
            }
            i += 1;
            z = clbk.call(thisArg, v.value, i);
            if (isArrayLikeObject$4(z) && z.length >= 2) {
              out.push(z[0], z[1]);
            } else if (isComplexLike$6(z)) {
              out.push(realf$2(z), imagf$2(z));
            } else {
              return new TypeError(format$8('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z));
            }
          }
          return out;
        }

        // EXPORTS //

        var from_iterator_map$1 = fromIteratorMap$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isComplexLike$5 = lib$n;
        var realf$1 = lib$h;
        var imagf$1 = lib$g;

        // MAIN //

        /**
        * Returns a strided array of real and imaginary components.
        *
        * @private
        * @param {Float32Array} buf - output array
        * @param {Array} arr - array containing complex numbers
        * @returns {(Float32Array|null)} output array or null
        */
        function fromArray$3(buf, arr) {
          var len;
          var v;
          var i;
          var j;
          len = arr.length;
          j = 0;
          for (i = 0; i < len; i++) {
            v = arr[i];
            if (!isComplexLike$5(v)) {
              return null;
            }
            buf[j] = realf$1(v);
            buf[j + 1] = imagf$1(v);
            j += 2; // stride
          }
          return buf;
        }

        // EXPORTS //

        var from_array$1 = fromArray$3;

        /* eslint-disable no-restricted-syntax, max-lines, no-invalid-this */

        // MODULES //

        var isNonNegativeInteger$1 = lib$v.isPrimitive;
        var isArrayLikeObject$3 = lib$t;
        var isCollection$2 = lib$1k;
        var isArrayBuffer$1 = lib$s;
        var isObject$2 = lib$1A;
        var isArray$2 = lib$1B;
        var isString$1 = lib$r.isPrimitive;
        var isFunction$2 = lib$1r;
        var isComplexLike$4 = lib$n;
        var isEven$1 = lib$m;
        var isInteger$1 = lib$1m;
        var isComplex64Array$1 = lib$l;
        var isComplex128Array$1 = lib$k;
        var hasIteratorSymbolSupport$1 = lib$j;
        var ITERATOR_SYMBOL$1 = lib$i;
        var setReadOnly$4 = lib$1J;
        var setReadOnlyAccessor$2 = lib$1I;
        var Float32Array$4 = lib$W;
        var Complex64 = lib$o;
        var format$7 = lib$1L;
        var realf = lib$h;
        var imagf = lib$g;
        var floor$2 = lib$1n;
        var reinterpret64$2 = lib$f;
        var reinterpret128$2 = lib$e;
        var getter$2 = lib$13;
        var accessorGetter$2 = lib$11;
        var fromIterator$2 = from_iterator$1;
        var fromIteratorMap$2 = from_iterator_map$1;
        var fromArray$2 = from_array$1;

        // VARIABLES //

        var BYTES_PER_ELEMENT$1 = Float32Array$4.BYTES_PER_ELEMENT * 2;
        var HAS_ITERATOR_SYMBOL$1 = hasIteratorSymbolSupport$1();

        // FUNCTIONS //

        /**
        * Returns a boolean indicating if a value is a complex typed array.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a complex typed array
        */
        function isComplexArray$1(value) {
          return value instanceof Complex64Array$3 || typeof value === 'object' && value !== null && (value.constructor.name === 'Complex64Array' || value.constructor.name === 'Complex128Array') && typeof value._length === 'number' &&
          // eslint-disable-line no-underscore-dangle

          // NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...
          typeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle
          ;
        }

        /**
        * Returns a boolean indicating if a value is a complex typed array constructor.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a complex typed array constructor
        */
        function isComplexArrayConstructor$1(value) {
          return value === Complex64Array$3 ||
          // NOTE: weaker test in order to avoid a circular dependency with Complex128Array...
          value.name === 'Complex128Array';
        }

        /**
        * Retrieves a complex number from a complex number array buffer.
        *
        * @private
        * @param {Float32Array} buf - array buffer
        * @param {NonNegativeInteger} idx - element index
        * @returns {Complex64} complex number
        */
        function getComplex64(buf, idx) {
          idx *= 2;
          return new Complex64(buf[idx], buf[idx + 1]);
        }

        // MAIN //

        /**
        * 64-bit complex number array constructor.
        *
        * @constructor
        * @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable
        * @param {NonNegativeInteger} [byteOffset=0] - byte offset
        * @param {NonNegativeInteger} [length] - view length
        * @throws {RangeError} ArrayBuffer byte length must be a multiple of `8`
        * @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two
        * @throws {TypeError} if provided only a single argument, must provide a valid argument
        * @throws {TypeError} byte offset must be a nonnegative integer
        * @throws {RangeError} byte offset must be a multiple of `8`
        * @throws {TypeError} view length must be a positive multiple of `8`
        * @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements
        * @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number
        * @returns {Complex64Array} complex number array
        *
        * @example
        * var arr = new Complex64Array();
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 0
        *
        * @example
        * var arr = new Complex64Array( 2 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var arr = new Complex64Array( [ 1.0, -1.0 ] );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var buf = new ArrayBuffer( 16 );
        * var arr = new Complex64Array( buf );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var buf = new ArrayBuffer( 16 );
        * var arr = new Complex64Array( buf, 8 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var buf = new ArrayBuffer( 32 );
        * var arr = new Complex64Array( buf, 8, 2 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        */
        function Complex64Array$3() {
          var byteOffset;
          var nargs;
          var buf;
          var len;
          nargs = arguments.length;
          if (!(this instanceof Complex64Array$3)) {
            if (nargs === 0) {
              return new Complex64Array$3();
            }
            if (nargs === 1) {
              return new Complex64Array$3(arguments[0]);
            }
            if (nargs === 2) {
              return new Complex64Array$3(arguments[0], arguments[1]);
            }
            return new Complex64Array$3(arguments[0], arguments[1], arguments[2]);
          }
          // Create the underlying data buffer...
          if (nargs === 0) {
            buf = new Float32Array$4(0); // backward-compatibility
          } else if (nargs === 1) {
            if (isNonNegativeInteger$1(arguments[0])) {
              buf = new Float32Array$4(arguments[0] * 2);
            } else if (isCollection$2(arguments[0])) {
              buf = arguments[0];
              len = buf.length;

              // If provided a "generic" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to "normal" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...
              if (len && isArray$2(buf) && isComplexLike$4(buf[0])) {
                buf = fromArray$2(new Float32Array$4(len * 2), buf);
                if (buf === null) {
                  // We failed and we are now forced to allocate a new array :-(
                  if (!isEven$1(len)) {
                    throw new RangeError(format$7('invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', len));
                  }
                  // We failed, so fall back to directly setting values...
                  buf = new Float32Array$4(arguments[0]);
                }
              } else {
                if (isComplex64Array$1(buf)) {
                  buf = reinterpret64$2(buf, 0);
                } else if (isComplex128Array$1(buf)) {
                  buf = reinterpret128$2(buf, 0);
                } else if (!isEven$1(len)) {
                  throw new RangeError(format$7('invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.', len));
                }
                buf = new Float32Array$4(buf);
              }
            } else if (isArrayBuffer$1(arguments[0])) {
              buf = arguments[0];
              if (!isInteger$1(buf.byteLength / BYTES_PER_ELEMENT$1)) {
                throw new RangeError(format$7('invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.', BYTES_PER_ELEMENT$1, buf.byteLength));
              }
              buf = new Float32Array$4(buf);
            } else if (isObject$2(arguments[0])) {
              buf = arguments[0];
              if (HAS_ITERATOR_SYMBOL$1 === false) {
                throw new TypeError(format$7('invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', buf));
              }
              if (!isFunction$2(buf[ITERATOR_SYMBOL$1])) {
                throw new TypeError(format$7('invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf));
              }
              buf = buf[ITERATOR_SYMBOL$1]();
              if (!isFunction$2(buf.next)) {
                throw new TypeError(format$7('invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf)); // FIXME: `buf` is what is returned from above, NOT the original value
              }
              buf = fromIterator$2(buf);
              if (buf instanceof Error) {
                throw buf;
              }
              buf = new Float32Array$4(buf);
            } else {
              throw new TypeError(format$7('invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arguments[0]));
            }
          } else {
            buf = arguments[0];
            if (!isArrayBuffer$1(buf)) {
              throw new TypeError(format$7('invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf));
            }
            byteOffset = arguments[1];
            if (!isNonNegativeInteger$1(byteOffset)) {
              throw new TypeError(format$7('invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset));
            }
            if (!isInteger$1(byteOffset / BYTES_PER_ELEMENT$1)) {
              throw new RangeError(format$7('invalid argument. Byte offset must be a multiple of %u. Value: `%u`.', BYTES_PER_ELEMENT$1, byteOffset));
            }
            if (nargs === 2) {
              len = buf.byteLength - byteOffset;
              if (!isInteger$1(len / BYTES_PER_ELEMENT$1)) {
                throw new RangeError(format$7('invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.', BYTES_PER_ELEMENT$1, len));
              }
              buf = new Float32Array$4(buf, byteOffset);
            } else {
              len = arguments[2];
              if (!isNonNegativeInteger$1(len)) {
                throw new TypeError(format$7('invalid argument. Length must be a nonnegative integer. Value: `%s`.', len));
              }
              if (len * BYTES_PER_ELEMENT$1 > buf.byteLength - byteOffset) {
                throw new RangeError(format$7('invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len * BYTES_PER_ELEMENT$1));
              }
              buf = new Float32Array$4(buf, byteOffset, len * 2);
            }
          }
          setReadOnly$4(this, '_buffer', buf);
          setReadOnly$4(this, '_length', buf.length / 2);
          return this;
        }

        /**
        * Size (in bytes) of each array element.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex64Array
        * @readonly
        * @type {PositiveInteger}
        * @default 8
        *
        * @example
        * var nbytes = Complex64Array.BYTES_PER_ELEMENT;
        * // returns 8
        */
        setReadOnly$4(Complex64Array$3, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT$1);

        /**
        * Constructor name.
        *
        * @name name
        * @memberof Complex64Array
        * @readonly
        * @type {string}
        * @default 'Complex64Array'
        *
        * @example
        * var str = Complex64Array.name;
        * // returns 'Complex64Array'
        */
        setReadOnly$4(Complex64Array$3, 'name', 'Complex64Array');

        /**
        * Creates a new 64-bit complex number array from an array-like object or an iterable.
        *
        * @name from
        * @memberof Complex64Array
        * @type {Function}
        * @param {(Collection|Iterable)} src - array-like object or iterable
        * @param {Function} [clbk] - callback to invoke for each source element
        * @param {*} [thisArg] - context
        * @throws {TypeError} `this` context must be a constructor
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an array-like object or an iterable
        * @throws {TypeError} second argument must be a function
        * @throws {RangeError} array-like objects must have a length which is a multiple of two
        * @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number
        * @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number
        * @returns {Complex64Array} 64-bit complex number array
        *
        * @example
        * var arr = Complex64Array.from( [ 1.0, -1.0 ] );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var arr = Complex64Array.from( [ new Complex64( 1.0, 1.0 ) ] );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function clbk( v ) {
        *     return new Complex64( realf(v)*2.0, imagf(v)*2.0 );
        * }
        *
        * var arr = Complex64Array.from( [ new Complex64( 1.0, 1.0 ) ], clbk );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 1
        */
        setReadOnly$4(Complex64Array$3, 'from', function from(src) {
          var thisArg;
          var nargs;
          var clbk;
          var out;
          var buf;
          var tmp;
          var get;
          var len;
          var flg;
          var v;
          var i;
          var j;
          if (!isFunction$2(this)) {
            throw new TypeError('invalid invocation. `this` context must be a constructor.');
          }
          if (!isComplexArrayConstructor$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          nargs = arguments.length;
          if (nargs > 1) {
            clbk = arguments[1];
            if (!isFunction$2(clbk)) {
              throw new TypeError(format$7('invalid argument. Second argument must be a function. Value: `%s`.', clbk));
            }
            if (nargs > 2) {
              thisArg = arguments[2];
            }
          }
          if (isComplexArray$1(src)) {
            len = src.length;
            if (clbk) {
              out = new this(len);
              buf = out._buffer; // eslint-disable-line no-underscore-dangle
              j = 0;
              for (i = 0; i < len; i++) {
                v = clbk.call(thisArg, src.get(i), i);
                if (isComplexLike$4(v)) {
                  buf[j] = realf(v);
                  buf[j + 1] = imagf(v);
                } else if (isArrayLikeObject$3(v) && v.length >= 2) {
                  buf[j] = v[0];
                  buf[j + 1] = v[1];
                } else {
                  throw new TypeError(format$7('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v));
                }
                j += 2; // stride
              }
              return out;
            }
            return new this(src);
          }
          if (isCollection$2(src)) {
            if (clbk) {
              // Note: array contents affect how we iterate over a provided data source. If only complex number objects, we can extract real and imaginary components. Otherwise, for non-complex number arrays (e.g., `Float64Array`, etc), we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.

              len = src.length;
              if (src.get && src.set) {
                get = accessorGetter$2('default');
              } else {
                get = getter$2('default');
              }
              // Detect whether we've been provided an array which returns complex number objects...
              for (i = 0; i < len; i++) {
                if (!isComplexLike$4(get(src, i))) {
                  flg = true;
                  break;
                }
              }
              // If an array does not contain only complex number objects, then we assume interleaved real and imaginary components...
              if (flg) {
                if (!isEven$1(len)) {
                  throw new RangeError(format$7('invalid argument. First argument must have a length which is a multiple of %u. Length: `%u`.', 2, len));
                }
                out = new this(len / 2);
                buf = out._buffer; // eslint-disable-line no-underscore-dangle
                for (i = 0; i < len; i++) {
                  buf[i] = clbk.call(thisArg, get(src, i), i);
                }
                return out;
              }
              // If an array contains only complex number objects, then we need to extract real and imaginary components...
              out = new this(len);
              buf = out._buffer; // eslint-disable-line no-underscore-dangle
              j = 0;
              for (i = 0; i < len; i++) {
                v = clbk.call(thisArg, get(src, i), i);
                if (isComplexLike$4(v)) {
                  buf[j] = realf(v);
                  buf[j + 1] = imagf(v);
                } else if (isArrayLikeObject$3(v) && v.length >= 2) {
                  buf[j] = v[0];
                  buf[j + 1] = v[1];
                } else {
                  throw new TypeError(format$7('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v));
                }
                j += 2; // stride
              }
              return out;
            }
            return new this(src);
          }
          if (isObject$2(src) && HAS_ITERATOR_SYMBOL$1 && isFunction$2(src[ITERATOR_SYMBOL$1])) {
            // eslint-disable-line max-len
            buf = src[ITERATOR_SYMBOL$1]();
            if (!isFunction$2(buf.next)) {
              throw new TypeError(format$7('invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src));
            }
            if (clbk) {
              tmp = fromIteratorMap$2(buf, clbk, thisArg);
            } else {
              tmp = fromIterator$2(buf);
            }
            if (tmp instanceof Error) {
              throw tmp;
            }
            len = tmp.length / 2;
            out = new this(len);
            buf = out._buffer; // eslint-disable-line no-underscore-dangle
            for (i = 0; i < len; i++) {
              buf[i] = tmp[i];
            }
            return out;
          }
          throw new TypeError(format$7('invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src));
        });

        /**
        * Creates a new 64-bit complex number array from a variable number of arguments.
        *
        * @name of
        * @memberof Complex64Array
        * @type {Function}
        * @param {...*} element - array elements
        * @throws {TypeError} `this` context must be a constructor
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex64Array} 64-bit complex number array
        *
        * @example
        * var arr = Complex64Array.of( 1.0, 1.0, 1.0, 1.0 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        */
        setReadOnly$4(Complex64Array$3, 'of', function of() {
          var args;
          var i;
          if (!isFunction$2(this)) {
            throw new TypeError('invalid invocation. `this` context must be a constructor.');
          }
          if (!isComplexArrayConstructor$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          args = [];
          for (i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          return new this(args);
        });

        /**
        * Returns an array element with support for both nonnegative and negative integer indices.
        *
        * @name at
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {integer} idx - element index
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} must provide an integer
        * @returns {(Complex64|void)} array element
        *
        * @example
        * var arr = new Complex64Array( 10 );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var z = arr.at( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 0.0
        *
        * var im = imagf( z );
        * // returns 0.0
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 9.0, -9.0 ], 9 );
        *
        * z = arr.at( 0 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 1.0
        *
        * im = imagf( z );
        * // returns -1.0
        *
        * z = arr.at( -1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 9.0
        *
        * im = imagf( z );
        * // returns -9.0
        *
        * z = arr.at( 100 );
        * // returns undefined
        *
        * z = arr.at( -100 );
        * // returns undefined
        */
        setReadOnly$4(Complex64Array$3.prototype, 'at', function at(idx) {
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isInteger$1(idx)) {
            throw new TypeError(format$7('invalid argument. Must provide an integer. Value: `%s`.', idx));
          }
          if (idx < 0) {
            idx += this._length;
          }
          if (idx < 0 || idx >= this._length) {
            return;
          }
          return getComplex64(this._buffer, idx);
        });

        /**
        * Pointer to the underlying data buffer.
        *
        * @name buffer
        * @memberof Complex64Array.prototype
        * @readonly
        * @type {ArrayBuffer}
        *
        * @example
        * var arr = new Complex64Array( 10 );
        *
        * var buf = arr.buffer;
        * // returns <ArrayBuffer>
        */
        setReadOnlyAccessor$2(Complex64Array$3.prototype, 'buffer', function get() {
          return this._buffer.buffer;
        });

        /**
        * Size (in bytes) of the array.
        *
        * @name byteLength
        * @memberof Complex64Array.prototype
        * @readonly
        * @type {NonNegativeInteger}
        *
        * @example
        * var arr = new Complex64Array( 10 );
        *
        * var byteLength = arr.byteLength;
        * // returns 80
        */
        setReadOnlyAccessor$2(Complex64Array$3.prototype, 'byteLength', function get() {
          return this._buffer.byteLength;
        });

        /**
        * Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.
        *
        * @name byteOffset
        * @memberof Complex64Array.prototype
        * @readonly
        * @type {NonNegativeInteger}
        *
        * @example
        * var arr = new Complex64Array( 10 );
        *
        * var byteOffset = arr.byteOffset;
        * // returns 0
        */
        setReadOnlyAccessor$2(Complex64Array$3.prototype, 'byteOffset', function get() {
          return this._buffer.byteOffset;
        });

        /**
        * Size (in bytes) of each array element.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex64Array.prototype
        * @readonly
        * @type {PositiveInteger}
        * @default 8
        *
        * @example
        * var arr = new Complex64Array( 10 );
        *
        * var nbytes = arr.BYTES_PER_ELEMENT;
        * // returns 8
        */
        setReadOnly$4(Complex64Array$3.prototype, 'BYTES_PER_ELEMENT', Complex64Array$3.BYTES_PER_ELEMENT);

        /**
        * Copies a sequence of elements within the array to the position starting at `target`.
        *
        * @name copyWithin
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {integer} target - index at which to start copying elements
        * @param {integer} start - source index at which to copy elements from
        * @param {integer} [end] - source index at which to stop copying elements from
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex64Array} modified array
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 4 );
        *
        * // Set the array elements:
        * arr.set( new Complex64( 1.0, 1.0 ), 0 );
        * arr.set( new Complex64( 2.0, 2.0 ), 1 );
        * arr.set( new Complex64( 3.0, 3.0 ), 2 );
        * arr.set( new Complex64( 4.0, 4.0 ), 3 );
        *
        * // Copy the first two elements to the last two elements:
        * arr.copyWithin( 2, 0, 2 );
        *
        * // Get the last array element:
        * var z = arr.get( 3 );
        *
        * var re = realf( z );
        * // returns 2.0
        *
        * var im = imagf( z );
        * // returns 2.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'copyWithin', function copyWithin(target, start) {
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          // FIXME: prefer a functional `copyWithin` implementation which addresses lack of universal browser support (e.g., IE11 and Safari) or ensure that typed arrays are polyfilled
          if (arguments.length === 2) {
            this._buffer.copyWithin(target * 2, start * 2);
          } else {
            this._buffer.copyWithin(target * 2, start * 2, arguments[2] * 2);
          }
          return this;
        });

        /**
        * Returns an iterator for iterating over array key-value pairs.
        *
        * @name entries
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Iterator} iterator
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var arr = [
        *     new Complex64( 1.0, 1.0 ),
        *     new Complex64( 2.0, 2.0 ),
        *     new Complex64( 3.0, 3.0 )
        * ];
        * arr = new Complex64Array( arr );
        *
        * // Create an iterator:
        * var it = arr.entries();
        *
        * // Iterate over the key-value pairs...
        * var v = it.next().value;
        * // returns [ 0, <Complex64> ]
        *
        * v = it.next().value;
        * // returns [ 1, <Complex64> ]
        *
        * v = it.next().value;
        * // returns [ 2, <Complex64> ]
        *
        * var bool = it.next().done;
        * // returns true
        */
        setReadOnly$4(Complex64Array$3.prototype, 'entries', function entries() {
          var buffer;
          var self;
          var iter;
          var len;
          var FLG;
          var i;
          var j;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          self = this;
          buffer = this._buffer;
          len = this._length;

          // Initialize the iteration indices:
          i = -1;
          j = -2;

          // Create an iterator protocol-compliant object:
          iter = {};
          setReadOnly$4(iter, 'next', next);
          setReadOnly$4(iter, 'return', end);
          if (ITERATOR_SYMBOL$1) {
            setReadOnly$4(iter, ITERATOR_SYMBOL$1, factory);
          }
          return iter;

          /**
          * Returns an iterator protocol-compliant object containing the next iterated value.
          *
          * @private
          * @returns {Object} iterator protocol-compliant object
          */
          function next() {
            var z;
            i += 1;
            if (FLG || i >= len) {
              return {
                'done': true
              };
            }
            j += 2;
            z = new Complex64(buffer[j], buffer[j + 1]);
            return {
              'value': [i, z],
              'done': false
            };
          }

          /**
          * Finishes an iterator.
          *
          * @private
          * @param {*} [value] - value to return
          * @returns {Object} iterator protocol-compliant object
          */
          function end(value) {
            FLG = true;
            if (arguments.length) {
              return {
                'value': value,
                'done': true
              };
            }
            return {
              'done': true
            };
          }

          /**
          * Returns a new iterator.
          *
          * @private
          * @returns {Iterator} iterator
          */
          function factory() {
            return self.entries();
          }
        });

        /**
        * Tests whether all elements in an array pass a test implemented by a predicate function.
        *
        * @name every
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {boolean} boolean indicating whether all elements pass a test
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var bool = arr.every( predicate );
        * // returns true
        */
        setReadOnly$4(Complex64Array$3.prototype, 'every', function every(predicate, thisArg) {
          var buf;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            if (!predicate.call(thisArg, getComplex64(buf, i), i, this)) {
              return false;
            }
          }
          return true;
        });

        /**
        * Returns a modified typed array filled with a fill value.
        *
        * @name fill
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {ComplexLike} value - fill value
        * @param {integer} [start=0] - starting index (inclusive)
        * @param {integer} [end] - ending index (exclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @throws {TypeError} third argument must be an integer
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.fill( new Complex64( 1.0, 1.0 ), 1 );
        *
        * var z = arr.get( 1 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 1.0
        *
        * var im = imagf( z );
        * // returns 1.0
        *
        * z = arr.get( 1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 1.0
        *
        * im = imagf( z );
        * // returns 1.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'fill', function fill(value, start, end) {
          var buf;
          var len;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike$4(value)) {
            throw new TypeError(format$7('invalid argument. First argument must be a complex number. Value: `%s`.', value));
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length > 1) {
            if (!isInteger$1(start)) {
              throw new TypeError(format$7('invalid argument. Second argument must be an integer. Value: `%s`.', start));
            }
            if (start < 0) {
              start += len;
              if (start < 0) {
                start = 0;
              }
            }
            if (arguments.length > 2) {
              if (!isInteger$1(end)) {
                throw new TypeError(format$7('invalid argument. Third argument must be an integer. Value: `%s`.', end));
              }
              if (end < 0) {
                end += len;
                if (end < 0) {
                  end = 0;
                }
              }
              if (end > len) {
                end = len;
              }
            } else {
              end = len;
            }
          } else {
            start = 0;
            end = len;
          }
          re = realf(value);
          im = imagf(value);
          for (i = start; i < end; i++) {
            idx = 2 * i;
            buf[idx] = re;
            buf[idx + 1] = im;
          }
          return this;
        });

        /**
        * Returns a new array containing the elements of an array which pass a test implemented by a predicate function.
        *
        * @name filter
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {Complex64Array} complex number array
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var out = arr.filter( predicate );
        * // returns <Complex64Array>
        *
        * var len = out.length;
        * // returns 1
        *
        * var z = out.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 2.0
        *
        * var im = imagf( z );
        * // returns 2.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'filter', function filter(predicate, thisArg) {
          var buf;
          var out;
          var i;
          var z;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          out = [];
          for (i = 0; i < this._length; i++) {
            z = getComplex64(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              out.push(z);
            }
          }
          return new this.constructor(out);
        });

        /**
        * Returns the first element in an array for which a predicate function returns a truthy value.
        *
        * @name find
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {(Complex64|void)} array element or undefined
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var z = arr.find( predicate );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 1.0
        *
        * var im = imagf( z );
        * // returns 1.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'find', function find(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            z = getComplex64(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return z;
            }
          }
        });

        /**
        * Returns the index of the first element in an array for which a predicate function returns a truthy value.
        *
        * @name findIndex
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {integer} index or -1
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var idx = arr.findIndex( predicate );
        * // returns 2
        */
        setReadOnly$4(Complex64Array$3.prototype, 'findIndex', function findIndex(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            z = getComplex64(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Returns the last element in an array for which a predicate function returns a truthy value.
        *
        * @name findLast
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {(Complex64|void)} array element or undefined
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var z = arr.findLast( predicate );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 3.0
        *
        * var im = imagf( z );
        * // returns 3.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'findLast', function findLast(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = this._length - 1; i >= 0; i--) {
            z = getComplex64(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return z;
            }
          }
        });

        /**
        * Returns the index of the last element in an array for which a predicate function returns a truthy value.
        *
        * @name findLastIndex
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {integer} index or -1
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var idx = arr.findLastIndex( predicate );
        * // returns 1
        */
        setReadOnly$4(Complex64Array$3.prototype, 'findLastIndex', function findLastIndex(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = this._length - 1; i >= 0; i--) {
            z = getComplex64(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Invokes a function once for each array element.
        *
        * @name forEach
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} fcn - function to invoke
        * @param {*} [thisArg] - function invocation context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * function log( v, i ) {
        *     console.log( '%s: %s', i, v.toString() );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * arr.forEach( log );
        */
        setReadOnly$4(Complex64Array$3.prototype, 'forEach', function forEach(fcn, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(fcn)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', fcn));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            z = getComplex64(buf, i);
            fcn.call(thisArg, z, i, this);
          }
        });

        /**
        * Returns an array element.
        *
        * @name get
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {NonNegativeInteger} idx - element index
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} must provide a nonnegative integer
        * @returns {(Complex64|void)} array element
        *
        * @example
        * var arr = new Complex64Array( 10 );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var z = arr.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 0.0
        *
        * var im = imagf( z );
        * // returns 0.0
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        *
        * z = arr.get( 0 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 1.0
        *
        * im = imagf( z );
        * // returns -1.0
        *
        * z = arr.get( 100 );
        * // returns undefined
        */
        setReadOnly$4(Complex64Array$3.prototype, 'get', function get(idx) {
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isNonNegativeInteger$1(idx)) {
            throw new TypeError(format$7('invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx));
          }
          if (idx >= this._length) {
            return;
          }
          return getComplex64(this._buffer, idx);
        });

        /**
        * Returns a boolean indicating whether an array includes a provided value.
        *
        * @name includes
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {ComplexLike} searchElement - search element
        * @param {integer} [fromIndex=0] - starting index (inclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @returns {boolean} boolean indicating whether an array includes a provided value
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var arr = new Complex64Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var bool = arr.includes( new Complex64( 3.0, -3.0 ) );
        * // returns true
        *
        * bool = arr.includes( new Complex64( 3.0, -3.0 ), 3 );
        * // returns false
        *
        * bool = arr.includes( new Complex64( 4.0, -4.0 ), -3 );
        * // returns true
        */
        setReadOnly$4(Complex64Array$3.prototype, 'includes', function includes(searchElement, fromIndex) {
          var buf;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike$4(searchElement)) {
            throw new TypeError(format$7('invalid argument. First argument must be a complex number. Value: `%s`.', searchElement));
          }
          if (arguments.length > 1) {
            if (!isInteger$1(fromIndex)) {
              throw new TypeError(format$7('invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex));
            }
            if (fromIndex < 0) {
              fromIndex += this._length;
              if (fromIndex < 0) {
                fromIndex = 0;
              }
            }
          } else {
            fromIndex = 0;
          }
          re = realf(searchElement);
          im = imagf(searchElement);
          buf = this._buffer;
          for (i = fromIndex; i < this._length; i++) {
            idx = 2 * i;
            if (re === buf[idx] && im === buf[idx + 1]) {
              return true;
            }
          }
          return false;
        });

        /**
        * Returns the first index at which a given element can be found.
        *
        * @name indexOf
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {ComplexLike} searchElement - element to find
        * @param {integer} [fromIndex=0] - starting index (inclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @returns {integer} index or -1
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var arr = new Complex64Array( 10 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var idx = arr.indexOf( new Complex64( 3.0, -3.0 ) );
        * // returns 2
        *
        * idx = arr.indexOf( new Complex64( 3.0, -3.0 ), 3 );
        * // returns -1
        *
        * idx = arr.indexOf( new Complex64( 4.0, -4.0 ), -3 );
        * // returns -1
        */
        setReadOnly$4(Complex64Array$3.prototype, 'indexOf', function indexOf(searchElement, fromIndex) {
          var buf;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike$4(searchElement)) {
            throw new TypeError(format$7('invalid argument. First argument must be a complex number. Value: `%s`.', searchElement));
          }
          if (arguments.length > 1) {
            if (!isInteger$1(fromIndex)) {
              throw new TypeError(format$7('invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex));
            }
            if (fromIndex < 0) {
              fromIndex += this._length;
              if (fromIndex < 0) {
                fromIndex = 0;
              }
            }
          } else {
            fromIndex = 0;
          }
          re = realf(searchElement);
          im = imagf(searchElement);
          buf = this._buffer;
          for (i = fromIndex; i < this._length; i++) {
            idx = 2 * i;
            if (re === buf[idx] && im === buf[idx + 1]) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Returns a new string by concatenating all array elements.
        *
        * @name join
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {string} [separator=','] - element separator
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a string
        * @returns {string} string representation
        *
        * @example
        * var arr = new Complex64Array( 2 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        *
        * var str = arr.join();
        * // returns '1 + 1i,2 + 2i'
        *
        * str = arr.join( '/' );
        * // returns '1 + 1i/2 + 2i'
        */
        setReadOnly$4(Complex64Array$3.prototype, 'join', function join(separator) {
          var out;
          var buf;
          var sep;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (arguments.length === 0) {
            sep = ',';
          } else if (isString$1(separator)) {
            sep = separator;
          } else {
            throw new TypeError(format$7('invalid argument. First argument must be a string. Value: `%s`.', separator));
          }
          out = [];
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            out.push(getComplex64(buf, i).toString());
          }
          return out.join(sep);
        });

        /**
        * Returns the last index at which a given element can be found.
        *
        * @name lastIndexOf
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {ComplexLike} searchElement - element to find
        * @param {integer} [fromIndex] - index at which to start searching backward (inclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @returns {integer} index or -1
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var arr = new Complex64Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 3.0, -3.0 ], 4 );
        *
        * var idx = arr.lastIndexOf( new Complex64( 3.0, -3.0 ) );
        * // returns 4
        *
        * idx = arr.lastIndexOf( new Complex64( 3.0, -3.0 ), 3 );
        * // returns 2
        *
        * idx = arr.lastIndexOf( new Complex64( 5.0, -5.0 ), 3 );
        * // returns -1
        *
        * idx = arr.lastIndexOf( new Complex64( 2.0, -2.0 ), -3 );
        * // returns 1
        */
        setReadOnly$4(Complex64Array$3.prototype, 'lastIndexOf', function lastIndexOf(searchElement, fromIndex) {
          var buf;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike$4(searchElement)) {
            throw new TypeError(format$7('invalid argument. First argument must be a complex number. Value: `%s`.', searchElement));
          }
          if (arguments.length > 1) {
            if (!isInteger$1(fromIndex)) {
              throw new TypeError(format$7('invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex));
            }
            if (fromIndex >= this._length) {
              fromIndex = this._length - 1;
            } else if (fromIndex < 0) {
              fromIndex += this._length;
            }
          } else {
            fromIndex = this._length - 1;
          }
          re = realf(searchElement);
          im = imagf(searchElement);
          buf = this._buffer;
          for (i = fromIndex; i >= 0; i--) {
            idx = 2 * i;
            if (re === buf[idx] && im === buf[idx + 1]) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Number of array elements.
        *
        * @name length
        * @memberof Complex64Array.prototype
        * @readonly
        * @type {NonNegativeInteger}
        *
        * @example
        * var arr = new Complex64Array( 10 );
        *
        * var len = arr.length;
        * // returns 10
        */
        setReadOnlyAccessor$2(Complex64Array$3.prototype, 'length', function get() {
          return this._length;
        });

        /**
        * Returns a new array with each element being the result of a provided callback function.
        *
        * @name map
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} fcn - callback function
        * @param {*} [thisArg] - callback function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {Complex64Array} complex number array
        *
        * @example
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function scale( v, i ) {
        *     return new Complex64( 2.0*realf( v ), 2.0*imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var out = arr.map( scale );
        * // returns <Complex64Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 2
        *
        * var im = imagf( z );
        * // returns -2
        */
        setReadOnly$4(Complex64Array$3.prototype, 'map', function map(fcn, thisArg) {
          var outbuf;
          var buf;
          var out;
          var i;
          var v;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(fcn)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', fcn));
          }
          buf = this._buffer;
          out = new this.constructor(this._length);
          outbuf = out._buffer; // eslint-disable-line no-underscore-dangle
          for (i = 0; i < this._length; i++) {
            v = fcn.call(thisArg, getComplex64(buf, i), i, this);
            if (isComplexLike$4(v)) {
              outbuf[2 * i] = realf(v);
              outbuf[2 * i + 1] = imagf(v);
            } else if (isArrayLikeObject$3(v) && v.length === 2) {
              outbuf[2 * i] = v[0];
              outbuf[2 * i + 1] = v[1];
            } else {
              throw new TypeError(format$7('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v));
            }
          }
          return out;
        });

        /**
        * Applies a provided callback function to each element of the array, in order, passing in the return value from the calculation on the preceding element and returning the accumulated result upon completion.
        *
        * @name reduce
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} reducer - callback function
        * @param {*} [initialValue] - initial value
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @throws {Error} if not provided an initial value, the array must have at least one element
        * @returns {*} accumulated result
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var caddf = require( '@stdlib/math-base-ops-caddf' );
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var z = arr.reduce( caddf );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 6.0
        *
        * var im = imagf( z );
        * // returns 6.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'reduce', function reduce(reducer, initialValue) {
          var buf;
          var acc;
          var len;
          var v;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(reducer)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', reducer));
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length > 1) {
            acc = initialValue;
            i = 0;
          } else {
            if (len === 0) {
              throw new Error('invalid operation. If not provided an initial value, an array must contain at least one element.');
            }
            acc = getComplex64(buf, 0);
            i = 1;
          }
          for (; i < len; i++) {
            v = getComplex64(buf, i);
            acc = reducer(acc, v, i, this);
          }
          return acc;
        });

        /**
        * Reverses an array in-place.
        *
        * @name reverse
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex64Array} reversed array
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var out = arr.reverse();
        * // returns <Complex64Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 3.0
        *
        * var im = imagf( z );
        * // returns 3.0
        *
        * z = out.get( 1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 2.0
        *
        * im = imagf( z );
        * // returns 2.0
        *
        * z = out.get( 2 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 1.0
        *
        * im = imagf( z );
        * // returns 1.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'reverse', function reverse() {
          var buf;
          var tmp;
          var len;
          var N;
          var i;
          var j;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          len = this._length;
          buf = this._buffer;
          N = floor$2(len / 2);
          for (i = 0; i < N; i++) {
            j = len - i - 1;
            tmp = buf[2 * i];
            buf[2 * i] = buf[2 * j];
            buf[2 * j] = tmp;
            tmp = buf[2 * i + 1];
            buf[2 * i + 1] = buf[2 * j + 1];
            buf[2 * j + 1] = tmp;
          }
          return this;
        });

        /**
        * Sets an array element.
        *
        * ## Notes
        *
        * -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:
        *
        *     ```text
        *     buf:                ---------------------
        *     src: ---------------------
        *     ```
        *
        *     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.
        *
        *     In the other overlapping scenario,
        *
        *     ```text
        *     buf: ---------------------
        *     src:                ---------------------
        *     ```
        *
        *     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values, as intended.
        *
        * @name set
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {(Collection|Complex|ComplexArray)} value - value(s)
        * @param {NonNegativeInteger} [i=0] - element index at which to start writing values
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array
        * @throws {TypeError} index argument must be a nonnegative integer
        * @throws {RangeError} array-like objects must have a length which is a multiple of two
        * @throws {RangeError} index argument is out-of-bounds
        * @throws {RangeError} target array lacks sufficient storage to accommodate source values
        * @returns {void}
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 10 );
        *
        * var z = arr.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 0.0
        *
        * var im = imagf( z );
        * // returns 0.0
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        *
        * z = arr.get( 0 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 1.0
        *
        * im = imagf( z );
        * // returns -1.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'set', function set(value) {
          /* eslint-disable no-underscore-dangle */
          var sbuf;
          var idx;
          var buf;
          var tmp;
          var flg;
          var N;
          var v;
          var i;
          var j;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          buf = this._buffer;
          if (arguments.length > 1) {
            idx = arguments[1];
            if (!isNonNegativeInteger$1(idx)) {
              throw new TypeError(format$7('invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx));
            }
          } else {
            idx = 0;
          }
          if (isComplexLike$4(value)) {
            if (idx >= this._length) {
              throw new RangeError(format$7('invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx));
            }
            idx *= 2;
            buf[idx] = realf(value);
            buf[idx + 1] = imagf(value);
            return;
          }
          if (isComplexArray$1(value)) {
            N = value._length;
            if (idx + N > this._length) {
              throw new RangeError('invalid arguments. Target array lacks sufficient storage to accommodate source values.');
            }
            sbuf = value._buffer;

            // Check for overlapping memory...
            j = buf.byteOffset + idx * BYTES_PER_ELEMENT$1;
            if (sbuf.buffer === buf.buffer && sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j) {
              // We need to copy source values...
              tmp = new Float32Array$4(sbuf.length);
              for (i = 0; i < sbuf.length; i++) {
                tmp[i] = sbuf[i];
              }
              sbuf = tmp;
            }
            idx *= 2;
            j = 0;
            for (i = 0; i < N; i++) {
              buf[idx] = sbuf[j];
              buf[idx + 1] = sbuf[j + 1];
              idx += 2; // stride
              j += 2; // stride
            }
            return;
          }
          if (isCollection$2(value)) {
            // Detect whether we've been provided an array of complex numbers...
            N = value.length;
            for (i = 0; i < N; i++) {
              if (!isComplexLike$4(value[i])) {
                flg = true;
                break;
              }
            }
            // If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...
            if (flg) {
              if (!isEven$1(N)) {
                throw new RangeError(format$7('invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', N));
              }
              if (idx + N / 2 > this._length) {
                throw new RangeError('invalid arguments. Target array lacks sufficient storage to accommodate source values.');
              }
              sbuf = value;

              // Check for overlapping memory...
              j = buf.byteOffset + idx * BYTES_PER_ELEMENT$1;
              if (sbuf.buffer === buf.buffer && sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j) {
                // We need to copy source values...
                tmp = new Float32Array$4(N);
                for (i = 0; i < N; i++) {
                  tmp[i] = sbuf[i]; // TODO: handle accessor arrays
                }
                sbuf = tmp;
              }
              idx *= 2;
              N /= 2;
              j = 0;
              for (i = 0; i < N; i++) {
                buf[idx] = sbuf[j];
                buf[idx + 1] = sbuf[j + 1];
                idx += 2; // stride
                j += 2; // stride
              }
              return;
            }
            // If an array contains only complex numbers, then we need to extract real and imaginary components...
            if (idx + N > this._length) {
              throw new RangeError('invalid arguments. Target array lacks sufficient storage to accommodate source values.');
            }
            idx *= 2;
            for (i = 0; i < N; i++) {
              v = value[i];
              buf[idx] = realf(v);
              buf[idx + 1] = imagf(v);
              idx += 2; // stride
            }
            return;
          }
          throw new TypeError(format$7('invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.', value));

          /* eslint-enable no-underscore-dangle */
        });

        /**
        * Copies a portion of a typed array to a new typed array.
        *
        * @name slice
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {integer} [start=0] - starting index (inclusive)
        * @param {integer} [end] - ending index (exclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an integer
        * @throws {TypeError} second argument must be an integer
        * @returns {Complex64Array} complex number array
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var out = arr.slice();
        * // returns <Complex64Array>
        *
        * var len = out.length;
        * // returns 5
        *
        * var z = out.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 1.0
        *
        * var im = imagf( z );
        * // returns -1.0
        *
        * z = out.get( len-1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 5.0
        *
        * im = imagf( z );
        * // returns -5.0
        *
        * out = arr.slice( 1, -2 );
        * // returns <Complex64Array>
        *
        * len = out.length;
        * // returns 2
        *
        * z = out.get( 0 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 2.0
        *
        * im = imagf( z );
        * // returns -2.0
        *
        * z = out.get( len-1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 3.0
        *
        * im = imagf( z );
        * // returns -3.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'slice', function slice(start, end) {
          var outlen;
          var outbuf;
          var out;
          var idx;
          var buf;
          var len;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length === 0) {
            start = 0;
            end = len;
          } else {
            if (!isInteger$1(start)) {
              throw new TypeError(format$7('invalid argument. First argument must be an integer. Value: `%s`.', start));
            }
            if (start < 0) {
              start += len;
              if (start < 0) {
                start = 0;
              }
            }
            if (arguments.length === 1) {
              end = len;
            } else {
              if (!isInteger$1(end)) {
                throw new TypeError(format$7('invalid argument. Second argument must be an integer. Value: `%s`.', end));
              }
              if (end < 0) {
                end += len;
                if (end < 0) {
                  end = 0;
                }
              } else if (end > len) {
                end = len;
              }
            }
          }
          if (start < end) {
            outlen = end - start;
          } else {
            outlen = 0;
          }
          out = new this.constructor(outlen);
          outbuf = out._buffer; // eslint-disable-line no-underscore-dangle
          for (i = 0; i < outlen; i++) {
            idx = 2 * (i + start);
            outbuf[2 * i] = buf[idx];
            outbuf[2 * i + 1] = buf[idx + 1];
          }
          return out;
        });

        /**
        * Tests whether at least one element in an array passes a test implemented by a predicate function.
        *
        * @name some
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {boolean} boolean indicating whether at least one element passes a test
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * function predicate( v ) {
        *     return ( realf( v ) === imagf( v ) );
        * }
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var bool = arr.some( predicate );
        * // returns true
        */
        setReadOnly$4(Complex64Array$3.prototype, 'some', function some(predicate, thisArg) {
          var buf;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$2(predicate)) {
            throw new TypeError(format$7('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            if (predicate.call(thisArg, getComplex64(buf, i), i, this)) {
              return true;
            }
          }
          return false;
        });

        /**
        * Creates a new typed array view over the same underlying `ArrayBuffer` and with the same underlying data type as the host array.
        *
        * @name subarray
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {integer} [begin=0] - starting index (inclusive)
        * @param {integer} [end] - ending index (exclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an integer
        * @throws {TypeError} second argument must be an integer
        * @returns {Complex64Array} subarray
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var subarr = arr.subarray();
        * // returns <Complex64Array>
        *
        * var len = subarr.length;
        * // returns 5
        *
        * var z = subarr.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 1.0
        *
        * var im = imagf( z );
        * // returns -1.0
        *
        * z = subarr.get( len-1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 5.0
        *
        * im = imagf( z );
        * // returns -5.0
        *
        * subarr = arr.subarray( 1, -2 );
        * // returns <Complex64Array>
        *
        * len = subarr.length;
        * // returns 2
        *
        * z = subarr.get( 0 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 2.0
        *
        * im = imagf( z );
        * // returns -2.0
        *
        * z = subarr.get( len-1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 3.0
        *
        * im = imagf( z );
        * // returns -3.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'subarray', function subarray(begin, end) {
          var offset;
          var buf;
          var len;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length === 0) {
            begin = 0;
            end = len;
          } else {
            if (!isInteger$1(begin)) {
              throw new TypeError(format$7('invalid argument. First argument must be an integer. Value: `%s`.', begin));
            }
            if (begin < 0) {
              begin += len;
              if (begin < 0) {
                begin = 0;
              }
            }
            if (arguments.length === 1) {
              end = len;
            } else {
              if (!isInteger$1(end)) {
                throw new TypeError(format$7('invalid argument. Second argument must be an integer. Value: `%s`.', end));
              }
              if (end < 0) {
                end += len;
                if (end < 0) {
                  end = 0;
                }
              } else if (end > len) {
                end = len;
              }
            }
          }
          if (begin >= len) {
            len = 0;
            offset = buf.byteLength;
          } else if (begin >= end) {
            len = 0;
            offset = buf.byteOffset + begin * BYTES_PER_ELEMENT$1;
          } else {
            len = end - begin;
            offset = buf.byteOffset + begin * BYTES_PER_ELEMENT$1;
          }
          return new this.constructor(buf.buffer, offset, len < 0 ? 0 : len);
        });

        /**
        * Returns a new typed array containing the elements in reversed order.
        *
        * @name toReversed
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex64Array} reversed array
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var out = arr.toReversed();
        * // returns <Complex64Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 3.0
        *
        * var im = imagf( z );
        * // returns 3.0
        *
        * z = out.get( 1 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 2.0
        *
        * im = imagf( z );
        * // returns 2.0
        *
        * z = out.get( 2 );
        * // returns <Complex64>
        *
        * re = realf( z );
        * // returns 1.0
        *
        * im = imagf( z );
        * // returns 1.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'toReversed', function toReversed() {
          var outbuf;
          var out;
          var len;
          var buf;
          var i;
          var j;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          len = this._length;
          out = new this.constructor(len);
          buf = this._buffer;
          outbuf = out._buffer; // eslint-disable-line no-underscore-dangle
          for (i = 0; i < len; i++) {
            j = len - i - 1;
            outbuf[2 * i] = buf[2 * j];
            outbuf[2 * i + 1] = buf[2 * j + 1];
          }
          return out;
        });

        /**
        * Serializes an array as a string.
        *
        * @name toString
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {string} string representation
        *
        * @example
        * var arr = new Complex64Array( 2 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        *
        * var str = arr.toString();
        * // returns '1 + 1i,2 + 2i'
        */
        setReadOnly$4(Complex64Array$3.prototype, 'toString', function toString() {
          var out;
          var buf;
          var i;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          out = [];
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            out.push(getComplex64(buf, i).toString());
          }
          return out.join(',');
        });

        /**
        * Returns a new typed array with the element at a provided index replaced with a provided value.
        *
        * @name with
        * @memberof Complex64Array.prototype
        * @type {Function}
        * @param {integer} index - element index
        * @param {ComplexLike} value - new value
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an integer
        * @throws {RangeError} index argument is out-of-bounds
        * @throws {TypeError} second argument must be a complex number
        * @returns {Complex64Array} new typed array
        *
        * @example
        * var realf = require( '@stdlib/complex-realf' );
        * var imagf = require( '@stdlib/complex-imagf' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        *
        * var arr = new Complex64Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var out = arr.with( 0, new Complex64( 4.0, 4.0 ) );
        * // returns <Complex64Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex64>
        *
        * var re = realf( z );
        * // returns 4.0
        *
        * var im = imagf( z );
        * // returns 4.0
        */
        setReadOnly$4(Complex64Array$3.prototype, 'with', function copyWith(index, value) {
          var buf;
          var out;
          var len;
          if (!isComplexArray$1(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isInteger$1(index)) {
            throw new TypeError(format$7('invalid argument. First argument must be an integer. Value: `%s`.', index));
          }
          len = this._length;
          if (index < 0) {
            index += len;
          }
          if (index < 0 || index >= len) {
            throw new RangeError(format$7('invalid argument. Index argument is out-of-bounds. Value: `%s`.', index));
          }
          if (!isComplexLike$4(value)) {
            throw new TypeError(format$7('invalid argument. Second argument must be a complex number. Value: `%s`.', value));
          }
          out = new this.constructor(this._buffer);
          buf = out._buffer; // eslint-disable-line no-underscore-dangle
          buf[2 * index] = realf(value);
          buf[2 * index + 1] = imagf(value);
          return out;
        });

        // EXPORTS //

        var main$r = Complex64Array$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * 64-bit complex number array.
        *
        * @module @stdlib/array-complex64
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var arr = new Complex64Array();
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 0
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var arr = new Complex64Array( 2 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var arr = new Complex64Array( [ 1.0, -1.0 ] );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var buf = new ArrayBuffer( 16 );
        * var arr = new Complex64Array( buf );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var buf = new ArrayBuffer( 16 );
        * var arr = new Complex64Array( buf, 8 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var Complex64Array = require( '@stdlib/array-complex64' );
        *
        * var buf = new ArrayBuffer( 32 );
        * var arr = new Complex64Array( buf, 8, 2 );
        * // returns <Complex64Array>
        *
        * var len = arr.length;
        * // returns 2
        */

        // MODULES //

        var main$q = main$r;

        // EXPORTS //

        var lib$d = main$q;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Returns the real component of a double-precision complex floating-point number.
        *
        * @param {Complex} z - complex number
        * @returns {number} real component
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var re = real( z );
        * // returns 5.0
        */
        function real$4(z) {
          return z.re;
        }

        // EXPORTS //

        var main$p = real$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the real component of a double-precision complex floating-point number.
        *
        * @module @stdlib/complex-real
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var real = require( '@stdlib/complex-real' );
        *
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var re = real( z );
        * // returns 5.0
        */

        // MODULES //

        var main$o = main$p;

        // EXPORTS //

        var lib$c = main$o;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Returns the imaginary component of a double-precision complex floating-point number.
        *
        * @param {Complex} z - complex number
        * @returns {number} imaginary component
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var im = imag( z );
        * // returns 3.0
        */
        function imag$4(z) {
          return z.im;
        }

        // EXPORTS //

        var main$n = imag$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the imaginary component of a double-precision complex floating-point number.
        *
        * @module @stdlib/complex-imag
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var z = new Complex128( 5.0, 3.0 );
        *
        * var im = imag( z );
        * // returns 3.0
        */

        // MODULES //

        var main$m = main$n;

        // EXPORTS //

        var lib$b = main$m;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isArrayLikeObject$2 = lib$t;
        var isComplexLike$3 = lib$n;
        var format$6 = lib$1L;
        var real$3 = lib$c;
        var imag$3 = lib$b;

        // MAIN //

        /**
        * Returns an array of iterated values.
        *
        * @private
        * @param {Object} it - iterator
        * @returns {(Array|TypeError)} array or an error
        */
        function fromIterator$1(it) {
          var out;
          var v;
          var z;
          out = [];
          while (true) {
            v = it.next();
            if (v.done) {
              break;
            }
            z = v.value;
            if (isArrayLikeObject$2(z) && z.length >= 2) {
              out.push(z[0], z[1]);
            } else if (isComplexLike$3(z)) {
              out.push(real$3(z), imag$3(z));
            } else {
              return new TypeError(format$6('invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z));
            }
          }
          return out;
        }

        // EXPORTS //

        var from_iterator = fromIterator$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isArrayLikeObject$1 = lib$t;
        var isComplexLike$2 = lib$n;
        var format$5 = lib$1L;
        var real$2 = lib$c;
        var imag$2 = lib$b;

        // MAIN //

        /**
        * Returns an array of iterated values.
        *
        * @private
        * @param {Object} it - iterator
        * @param {Function} clbk - callback to invoke for each iterated value
        * @param {*} thisArg - invocation context
        * @returns {(Array|TypeError)} array or an error
        */
        function fromIteratorMap$1(it, clbk, thisArg) {
          var out;
          var v;
          var z;
          var i;
          out = [];
          i = -1;
          while (true) {
            v = it.next();
            if (v.done) {
              break;
            }
            i += 1;
            z = clbk.call(thisArg, v.value, i);
            if (isArrayLikeObject$1(z) && z.length >= 2) {
              out.push(z[0], z[1]);
            } else if (isComplexLike$2(z)) {
              out.push(real$2(z), imag$2(z));
            } else {
              return new TypeError(format$5('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z));
            }
          }
          return out;
        }

        // EXPORTS //

        var from_iterator_map = fromIteratorMap$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isComplexLike$1 = lib$n;
        var real$1 = lib$c;
        var imag$1 = lib$b;

        // MAIN //

        /**
        * Returns a strided array of real and imaginary components.
        *
        * @private
        * @param {Float64Array} buf - output array
        * @param {Array} arr - array containing complex numbers
        * @returns {(Float64Array|null)} output array or null
        */
        function fromArray$1(buf, arr) {
          var len;
          var v;
          var i;
          var j;
          len = arr.length;
          j = 0;
          for (i = 0; i < len; i++) {
            v = arr[i];
            if (!isComplexLike$1(v)) {
              return null;
            }
            buf[j] = real$1(v);
            buf[j + 1] = imag$1(v);
            j += 2; // stride
          }
          return buf;
        }

        // EXPORTS //

        var from_array = fromArray$1;

        /* eslint-disable no-restricted-syntax, max-lines, no-invalid-this */

        // MODULES //

        var isNonNegativeInteger = lib$v.isPrimitive;
        var isArrayLikeObject = lib$t;
        var isCollection$1 = lib$1k;
        var isArrayBuffer = lib$s;
        var isObject$1 = lib$1A;
        var isArray$1 = lib$1B;
        var isString = lib$r;
        var isFunction$1 = lib$1r;
        var isComplexLike = lib$n;
        var isEven = lib$m;
        var isInteger = lib$1m;
        var isComplex64Array = lib$l;
        var isComplex128Array = lib$k;
        var hasIteratorSymbolSupport = lib$j;
        var ITERATOR_SYMBOL = lib$i;
        var setReadOnly$3 = lib$1J;
        var setReadOnlyAccessor$1 = lib$1I;
        var Float64Array$5 = lib$Z;
        var Complex128 = lib$q;
        var real = lib$c;
        var imag = lib$b;
        var floor$1 = lib$1n;
        var reinterpret64$1 = lib$f;
        var reinterpret128$1 = lib$e;
        var getter$1 = lib$13;
        var accessorGetter$1 = lib$11;
        var format$4 = lib$1L;
        var fromIterator = from_iterator;
        var fromIteratorMap = from_iterator_map;
        var fromArray = from_array;

        // VARIABLES //

        var BYTES_PER_ELEMENT = Float64Array$5.BYTES_PER_ELEMENT * 2;
        var HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();

        // FUNCTIONS //

        /**
        * Returns a boolean indicating if a value is a complex typed array.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a complex typed array
        */
        function isComplexArray(value) {
          return value instanceof Complex128Array$3 || typeof value === 'object' && value !== null && (value.constructor.name === 'Complex64Array' || value.constructor.name === 'Complex128Array') && typeof value._length === 'number' &&
          // eslint-disable-line no-underscore-dangle

          // NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...
          typeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle
          ;
        }

        /**
        * Returns a boolean indicating if a value is a complex typed array constructor.
        *
        * @private
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a complex typed array constructor
        */
        function isComplexArrayConstructor(value) {
          return value === Complex128Array$3 ||
          // NOTE: weaker test in order to avoid a circular dependency with Complex64Array...
          value.name === 'Complex64Array';
        }

        /**
        * Retrieves a complex number from a complex number array buffer.
        *
        * @private
        * @param {Float64Array} buf - array buffer
        * @param {NonNegativeInteger} idx - element index
        * @returns {Complex128} complex number
        */
        function getComplex128(buf, idx) {
          idx *= 2;
          return new Complex128(buf[idx], buf[idx + 1]);
        }

        // MAIN //

        /**
        * 128-bit complex number array constructor.
        *
        * @constructor
        * @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable
        * @param {NonNegativeInteger} [byteOffset=0] - byte offset
        * @param {NonNegativeInteger} [length] - view length
        * @throws {RangeError} ArrayBuffer byte length must be a multiple of `16`
        * @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two
        * @throws {TypeError} if provided only a single argument, must provide a valid argument
        * @throws {TypeError} byte offset must be a nonnegative integer
        * @throws {RangeError} byte offset must be a multiple of `16`
        * @throws {TypeError} view length must be a positive multiple of `16`
        * @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements
        * @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number
        * @returns {Complex128Array} complex number array
        *
        * @example
        * var arr = new Complex128Array();
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 0
        *
        * @example
        * var arr = new Complex128Array( 2 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var arr = new Complex128Array( [ 1.0, -1.0 ] );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var buf = new ArrayBuffer( 32 );
        * var arr = new Complex128Array( buf );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var buf = new ArrayBuffer( 32 );
        * var arr = new Complex128Array( buf, 16 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        *
        * var buf = new ArrayBuffer( 64 );
        * var arr = new Complex128Array( buf, 16, 2 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        */
        function Complex128Array$3() {
          var byteOffset;
          var nargs;
          var buf;
          var len;
          nargs = arguments.length;
          if (!(this instanceof Complex128Array$3)) {
            if (nargs === 0) {
              return new Complex128Array$3();
            }
            if (nargs === 1) {
              return new Complex128Array$3(arguments[0]);
            }
            if (nargs === 2) {
              return new Complex128Array$3(arguments[0], arguments[1]);
            }
            return new Complex128Array$3(arguments[0], arguments[1], arguments[2]);
          }
          // Create the underlying data buffer...
          if (nargs === 0) {
            buf = new Float64Array$5(0); // backward-compatibility
          } else if (nargs === 1) {
            if (isNonNegativeInteger(arguments[0])) {
              buf = new Float64Array$5(arguments[0] * 2);
            } else if (isCollection$1(arguments[0])) {
              buf = arguments[0];
              len = buf.length;

              // If provided a "generic" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to "normal" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...
              if (len && isArray$1(buf) && isComplexLike(buf[0])) {
                buf = fromArray(new Float64Array$5(len * 2), buf);
                if (buf === null) {
                  // We failed and we are now forced to allocate a new array :-(
                  if (!isEven(len)) {
                    throw new RangeError(format$4('invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', len));
                  }
                  // We failed, so fall back to directly setting values...
                  buf = new Float64Array$5(arguments[0]);
                }
              } else {
                if (isComplex64Array(buf)) {
                  buf = reinterpret64$1(buf, 0);
                } else if (isComplex128Array(buf)) {
                  buf = reinterpret128$1(buf, 0);
                } else if (!isEven(len)) {
                  throw new RangeError(format$4('invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.', len));
                }
                buf = new Float64Array$5(buf);
              }
            } else if (isArrayBuffer(arguments[0])) {
              buf = arguments[0];
              if (!isInteger(buf.byteLength / BYTES_PER_ELEMENT)) {
                throw new RangeError(format$4('invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.', BYTES_PER_ELEMENT, buf.byteLength));
              }
              buf = new Float64Array$5(buf);
            } else if (isObject$1(arguments[0])) {
              buf = arguments[0];
              if (HAS_ITERATOR_SYMBOL === false) {
                throw new TypeError(format$4('invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', buf));
              }
              if (!isFunction$1(buf[ITERATOR_SYMBOL])) {
                throw new TypeError(format$4('invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf));
              }
              buf = buf[ITERATOR_SYMBOL]();
              if (!isFunction$1(buf.next)) {
                throw new TypeError(format$4('invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf));
              }
              buf = fromIterator(buf);
              if (buf instanceof Error) {
                throw buf;
              }
              buf = new Float64Array$5(buf);
            } else {
              throw new TypeError(format$4('invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arguments[0]));
            }
          } else {
            buf = arguments[0];
            if (!isArrayBuffer(buf)) {
              throw new TypeError(format$4('invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf));
            }
            byteOffset = arguments[1];
            if (!isNonNegativeInteger(byteOffset)) {
              throw new TypeError(format$4('invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset));
            }
            if (!isInteger(byteOffset / BYTES_PER_ELEMENT)) {
              throw new RangeError(format$4('invalid argument. Byte offset must be a multiple of %u. Value: `%u`.', BYTES_PER_ELEMENT, byteOffset));
            }
            if (nargs === 2) {
              len = buf.byteLength - byteOffset;
              if (!isInteger(len / BYTES_PER_ELEMENT)) {
                throw new RangeError(format$4('invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.', BYTES_PER_ELEMENT, len));
              }
              buf = new Float64Array$5(buf, byteOffset);
            } else {
              len = arguments[2];
              if (!isNonNegativeInteger(len)) {
                throw new TypeError(format$4('invalid argument. Length must be a nonnegative integer. Value: `%s`.', len));
              }
              if (len * BYTES_PER_ELEMENT > buf.byteLength - byteOffset) {
                throw new RangeError(format$4('invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len * BYTES_PER_ELEMENT));
              }
              buf = new Float64Array$5(buf, byteOffset, len * 2);
            }
          }
          setReadOnly$3(this, '_buffer', buf);
          setReadOnly$3(this, '_length', buf.length / 2);
          return this;
        }

        /**
        * Size (in bytes) of each array element.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex128Array
        * @readonly
        * @type {PositiveInteger}
        * @default 16
        *
        * @example
        * var nbytes = Complex128Array.BYTES_PER_ELEMENT;
        * // returns 16
        */
        setReadOnly$3(Complex128Array$3, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT);

        /**
        * Constructor name.
        *
        * @name name
        * @memberof Complex128Array
        * @readonly
        * @type {string}
        * @default 'Complex128Array'
        *
        * @example
        * var name = Complex128Array.name;
        * // returns 'Complex128Array'
        */
        setReadOnly$3(Complex128Array$3, 'name', 'Complex128Array');

        /**
        * Creates a new 128-bit complex number array from an array-like object or an iterable.
        *
        * @name from
        * @memberof Complex128Array
        * @type {Function}
        * @param {(Collection|Object)} src - array-like object or iterable
        * @param {Function} [clbk] - callback to invoke for each source element
        * @param {*} [thisArg] - context
        * @throws {TypeError} `this` context must be a constructor
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an array-like object or an iterable
        * @throws {TypeError} second argument must be a function
        * @throws {RangeError} array-like objects must have a length which is a multiple of two
        * @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number
        * @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number
        * @returns {Complex128Array} 128-bit complex number array
        *
        * @example
        * var arr = Complex128Array.from( [ 1.0, -1.0 ] );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ] );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function clbk( v ) {
        *     return new Complex128( real(v)*2.0, imag(v)*2.0 );
        * }
        *
        * var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ], clbk );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 1
        */
        setReadOnly$3(Complex128Array$3, 'from', function from(src) {
          var thisArg;
          var nargs;
          var clbk;
          var out;
          var buf;
          var tmp;
          var get;
          var len;
          var flg;
          var v;
          var i;
          var j;
          if (!isFunction$1(this)) {
            throw new TypeError('invalid invocation. `this` context must be a constructor.');
          }
          if (!isComplexArrayConstructor(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          nargs = arguments.length;
          if (nargs > 1) {
            clbk = arguments[1];
            if (!isFunction$1(clbk)) {
              throw new TypeError(format$4('invalid argument. Second argument must be a function. Value: `%s`.', clbk));
            }
            if (nargs > 2) {
              thisArg = arguments[2];
            }
          }
          if (isComplexArray(src)) {
            len = src.length;
            if (clbk) {
              out = new this(len);
              buf = out._buffer; // eslint-disable-line no-underscore-dangle
              j = 0;
              for (i = 0; i < len; i++) {
                v = clbk.call(thisArg, src.get(i), i);
                if (isComplexLike(v)) {
                  buf[j] = real(v);
                  buf[j + 1] = imag(v);
                } else if (isArrayLikeObject(v) && v.length >= 2) {
                  buf[j] = v[0];
                  buf[j + 1] = v[1];
                } else {
                  throw new TypeError(format$4('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v));
                }
                j += 2; // stride
              }
              return out;
            }
            return new this(src);
          }
          if (isCollection$1(src)) {
            if (clbk) {
              // Note: array contents affect how we iterate over a provided data source. If only complex number objects, we can extract real and imaginary components. Otherwise, for non-complex number arrays (e.g., `Float64Array`, etc), we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.

              len = src.length;
              if (src.get && src.set) {
                get = accessorGetter$1('default');
              } else {
                get = getter$1('default');
              }
              // Detect whether we've been provided an array which returns complex number objects...
              for (i = 0; i < len; i++) {
                if (!isComplexLike(get(src, i))) {
                  flg = true;
                  break;
                }
              }
              // If an array does not contain only complex number objects, then we assume interleaved real and imaginary components...
              if (flg) {
                if (!isEven(len)) {
                  throw new RangeError(format$4('invalid argument. First argument must have a length which is a multiple of two. Length: `%u`.', len));
                }
                out = new this(len / 2);
                buf = out._buffer; // eslint-disable-line no-underscore-dangle
                for (i = 0; i < len; i++) {
                  buf[i] = clbk.call(thisArg, get(src, i), i);
                }
                return out;
              }
              // If an array contains only complex number objects, then we need to extract real and imaginary components...
              out = new this(len);
              buf = out._buffer; // eslint-disable-line no-underscore-dangle
              j = 0;
              for (i = 0; i < len; i++) {
                v = clbk.call(thisArg, get(src, i), i);
                if (isComplexLike(v)) {
                  buf[j] = real(v);
                  buf[j + 1] = imag(v);
                } else if (isArrayLikeObject(v) && v.length >= 2) {
                  buf[j] = v[0];
                  buf[j + 1] = v[1];
                } else {
                  throw new TypeError(format$4('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v));
                }
                j += 2; // stride
              }
              return out;
            }
            return new this(src);
          }
          if (isObject$1(src) && HAS_ITERATOR_SYMBOL && isFunction$1(src[ITERATOR_SYMBOL])) {
            // eslint-disable-line max-len
            buf = src[ITERATOR_SYMBOL]();
            if (!isFunction$1(buf.next)) {
              throw new TypeError(format$4('invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src));
            }
            if (clbk) {
              tmp = fromIteratorMap(buf, clbk, thisArg);
            } else {
              tmp = fromIterator(buf);
            }
            if (tmp instanceof Error) {
              throw tmp;
            }
            len = tmp.length / 2;
            out = new this(len);
            buf = out._buffer; // eslint-disable-line no-underscore-dangle
            for (i = 0; i < len; i++) {
              buf[i] = tmp[i];
            }
            return out;
          }
          throw new TypeError(format$4('invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src));
        });

        /**
        * Creates a new 128-bit complex number array from a variable number of arguments.
        *
        * @name of
        * @memberof Complex128Array
        * @type {Function}
        * @param {...*} element - array elements
        * @throws {TypeError} `this` context must be a constructor
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex128Array} 128-bit complex number array
        *
        * @example
        * var arr = Complex128Array.of( 1.0, 1.0, 1.0, 1.0 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        */
        setReadOnly$3(Complex128Array$3, 'of', function of() {
          var args;
          var i;
          if (!isFunction$1(this)) {
            throw new TypeError('invalid invocation. `this` context must be a constructor.');
          }
          if (!isComplexArrayConstructor(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          args = [];
          for (i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          return new this(args);
        });

        /**
        * Returns an array element with support for both nonnegative and negative integer indices.
        *
        * @name at
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {integer} idx - element index
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} must provide an integer
        * @returns {(Complex128|void)} array element
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 10 );
        *
        * var z = arr.at( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 0.0
        *
        * var im = imag( z );
        * // returns 0.0
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 9.0, -9.0 ], 9 );
        *
        * z = arr.at( 0 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 1.0
        *
        * im = imag( z );
        * // returns -1.0
        *
        * z = arr.at( -1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 9.0
        *
        * im = imag( z );
        * // returns -9.0
        *
        * z = arr.at( 100 );
        * // returns undefined
        *
        * z = arr.at( -100 );
        * // returns undefined
        */
        setReadOnly$3(Complex128Array$3.prototype, 'at', function at(idx) {
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isInteger(idx)) {
            throw new TypeError(format$4('invalid argument. Must provide an integer. Value: `%s`.', idx));
          }
          if (idx < 0) {
            idx += this._length;
          }
          if (idx < 0 || idx >= this._length) {
            return;
          }
          return getComplex128(this._buffer, idx);
        });

        /**
        * Pointer to the underlying data buffer.
        *
        * @name buffer
        * @memberof Complex128Array.prototype
        * @readonly
        * @type {ArrayBuffer}
        *
        * @example
        * var arr = new Complex128Array( 10 );
        *
        * var buf = arr.buffer;
        * // returns <ArrayBuffer>
        */
        setReadOnlyAccessor$1(Complex128Array$3.prototype, 'buffer', function get() {
          return this._buffer.buffer;
        });

        /**
        * Size (in bytes) of the array.
        *
        * @name byteLength
        * @memberof Complex128Array.prototype
        * @readonly
        * @type {NonNegativeInteger}
        *
        * @example
        * var arr = new Complex128Array( 10 );
        *
        * var byteLength = arr.byteLength;
        * // returns 160
        */
        setReadOnlyAccessor$1(Complex128Array$3.prototype, 'byteLength', function get() {
          return this._buffer.byteLength;
        });

        /**
        * Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.
        *
        * @name byteOffset
        * @memberof Complex128Array.prototype
        * @readonly
        * @type {NonNegativeInteger}
        *
        * @example
        * var arr = new Complex128Array( 10 );
        *
        * var byteOffset = arr.byteOffset;
        * // returns 0
        */
        setReadOnlyAccessor$1(Complex128Array$3.prototype, 'byteOffset', function get() {
          return this._buffer.byteOffset;
        });

        /**
        * Size (in bytes) of each array element.
        *
        * @name BYTES_PER_ELEMENT
        * @memberof Complex128Array.prototype
        * @readonly
        * @type {PositiveInteger}
        * @default 16
        *
        * @example
        * var arr = new Complex128Array( 10 );
        *
        * var nbytes = arr.BYTES_PER_ELEMENT;
        * // returns 16
        */
        setReadOnly$3(Complex128Array$3.prototype, 'BYTES_PER_ELEMENT', Complex128Array$3.BYTES_PER_ELEMENT);

        /**
        * Copies a sequence of elements within the array to the position starting at `target`.
        *
        * @name copyWithin
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {integer} target - index at which to start copying elements
        * @param {integer} start - source index at which to copy elements from
        * @param {integer} [end] - source index at which to stop copying elements from
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex128Array} modified array
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 4 );
        *
        * // Set the array elements:
        * arr.set( new Complex128( 1.0, 1.0 ), 0 );
        * arr.set( new Complex128( 2.0, 2.0 ), 1 );
        * arr.set( new Complex128( 3.0, 3.0 ), 2 );
        * arr.set( new Complex128( 4.0, 4.0 ), 3 );
        *
        * // Copy the first two elements to the last two elements:
        * arr.copyWithin( 2, 0, 2 );
        *
        * // Get the last array element:
        * var z = arr.get( 3 );
        *
        * var re = real( z );
        * // returns 2.0
        *
        * var im = imag( z );
        * // returns 2.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'copyWithin', function copyWithin(target, start) {
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          // FIXME: prefer a functional `copyWithin` implementation which addresses lack of universal browser support (e.g., IE11 and Safari) or ensure that typed arrays are polyfilled
          if (arguments.length === 2) {
            this._buffer.copyWithin(target * 2, start * 2);
          } else {
            this._buffer.copyWithin(target * 2, start * 2, arguments[2] * 2);
          }
          return this;
        });

        /**
        * Returns an iterator for iterating over array key-value pairs.
        *
        * @name entries
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Iterator} iterator
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var arr = [
        *     new Complex128( 1.0, 1.0 ),
        *     new Complex128( 2.0, 2.0 ),
        *     new Complex128( 3.0, 3.0 )
        * ];
        * arr = new Complex128Array( arr );
        *
        * // Create an iterator:
        * var it = arr.entries();
        *
        * // Iterate over the key-value pairs...
        * var v = it.next().value;
        * // returns [ 0, <Complex128> ]
        *
        * v = it.next().value;
        * // returns [ 1, <Complex128> ]
        *
        * v = it.next().value;
        * // returns [ 2, <Complex128> ]
        *
        * var bool = it.next().done;
        * // returns true
        */
        setReadOnly$3(Complex128Array$3.prototype, 'entries', function entries() {
          var buffer;
          var self;
          var iter;
          var len;
          var FLG;
          var i;
          var j;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          self = this;
          buffer = this._buffer;
          len = this._length;

          // Initialize the iteration indices:
          i = -1;
          j = -2;

          // Create an iterator protocol-compliant object:
          iter = {};
          setReadOnly$3(iter, 'next', next);
          setReadOnly$3(iter, 'return', end);
          if (ITERATOR_SYMBOL) {
            setReadOnly$3(iter, ITERATOR_SYMBOL, factory);
          }
          return iter;

          /**
          * Returns an iterator protocol-compliant object containing the next iterated value.
          *
          * @private
          * @returns {Object} iterator protocol-compliant object
          */
          function next() {
            var z;
            i += 1;
            if (FLG || i >= len) {
              return {
                'done': true
              };
            }
            j += 2;
            z = new Complex128(buffer[j], buffer[j + 1]);
            return {
              'value': [i, z],
              'done': false
            };
          }

          /**
          * Finishes an iterator.
          *
          * @private
          * @param {*} [value] - value to return
          * @returns {Object} iterator protocol-compliant object
          */
          function end(value) {
            FLG = true;
            if (arguments.length) {
              return {
                'value': value,
                'done': true
              };
            }
            return {
              'done': true
            };
          }

          /**
          * Returns a new iterator.
          *
          * @private
          * @returns {Iterator} iterator
          */
          function factory() {
            return self.entries();
          }
        });

        /**
        * Tests whether all elements in an array pass a test implemented by a predicate function.
        *
        * @name every
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {boolean} boolean indicating whether all elements pass a test
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var bool = arr.every( predicate );
        * // returns true
        */
        setReadOnly$3(Complex128Array$3.prototype, 'every', function every(predicate, thisArg) {
          var buf;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            if (!predicate.call(thisArg, getComplex128(buf, i), i, this)) {
              return false;
            }
          }
          return true;
        });

        /**
        * Returns a modified typed array filled with a fill value.
        *
        * @name fill
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {ComplexLike} value - fill value
        * @param {integer} [start=0] - starting index (inclusive)
        * @param {integer} [end] - ending index (exclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @throws {TypeError} third argument must be an integer
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.fill( new Complex128( 1.0, 1.0 ), 1 );
        *
        * var z = arr.get( 1 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 1.0
        *
        * var im = imag( z );
        * // returns 1.0
        *
        * z = arr.get( 1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 1.0
        *
        * im = imag( z );
        * // returns 1.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'fill', function fill(value, start, end) {
          var buf;
          var len;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike(value)) {
            throw new TypeError(format$4('invalid argument. First argument must be a complex number. Value: `%s`.', value));
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length > 1) {
            if (!isInteger(start)) {
              throw new TypeError(format$4('invalid argument. Second argument must be an integer. Value: `%s`.', start));
            }
            if (start < 0) {
              start += len;
              if (start < 0) {
                start = 0;
              }
            }
            if (arguments.length > 2) {
              if (!isInteger(end)) {
                throw new TypeError(format$4('invalid argument. Third argument must be an integer. Value: `%s`.', end));
              }
              if (end < 0) {
                end += len;
                if (end < 0) {
                  end = 0;
                }
              }
              if (end > len) {
                end = len;
              }
            } else {
              end = len;
            }
          } else {
            start = 0;
            end = len;
          }
          re = real(value);
          im = imag(value);
          for (i = start; i < end; i++) {
            idx = 2 * i;
            buf[idx] = re;
            buf[idx + 1] = im;
          }
          return this;
        });

        /**
        * Returns a new array containing the elements of an array which pass a test implemented by a predicate function.
        *
        * @name filter
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {Complex128Array} complex number array
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var out = arr.filter( predicate );
        * // returns <Complex128Array>
        *
        * var len = out.length;
        * // returns 1
        *
        * var z = out.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 2.0
        *
        * var im = imag( z );
        * // returns 2.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'filter', function filter(predicate, thisArg) {
          var buf;
          var out;
          var i;
          var z;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          out = [];
          for (i = 0; i < this._length; i++) {
            z = getComplex128(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              out.push(z);
            }
          }
          return new this.constructor(out);
        });

        /**
        * Returns the first element in an array for which a predicate function returns a truthy value.
        *
        * @name find
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {(Complex128|void)} array element or undefined
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var z = arr.find( predicate );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 1.0
        *
        * var im = imag( z );
        * // returns 1.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'find', function find(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            z = getComplex128(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return z;
            }
          }
        });

        /**
        * Returns the index of the first element in an array for which a predicate function returns a truthy value.
        *
        * @name findIndex
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {integer} index or -1
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var idx = arr.findIndex( predicate );
        * // returns 2
        */
        setReadOnly$3(Complex128Array$3.prototype, 'findIndex', function findIndex(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            z = getComplex128(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Returns the last element in an array for which a predicate function returns a truthy value.
        *
        * @name findLast
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {(Complex128|void)} array element or undefined
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var z = arr.findLast( predicate );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 3.0
        *
        * var im = imag( z );
        * // returns 3.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'findLast', function findLast(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = this._length - 1; i >= 0; i--) {
            z = getComplex128(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return z;
            }
          }
        });

        /**
        * Returns the index of the last element in an array for which a predicate function returns a truthy value.
        *
        * @name findLastIndex
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {integer} index or -1
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var idx = arr.findLastIndex( predicate );
        * // returns 1
        */
        setReadOnly$3(Complex128Array$3.prototype, 'findLastIndex', function findLastIndex(predicate, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = this._length - 1; i >= 0; i--) {
            z = getComplex128(buf, i);
            if (predicate.call(thisArg, z, i, this)) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Invokes a function once for each array element.
        *
        * @name forEach
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} fcn - function to invoke
        * @param {*} [thisArg] - function invocation context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * function log( v, i ) {
        *     console.log( '%s: %s', i, v.toString() );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * arr.forEach( log );
        */
        setReadOnly$3(Complex128Array$3.prototype, 'forEach', function forEach(fcn, thisArg) {
          var buf;
          var i;
          var z;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(fcn)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', fcn));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            z = getComplex128(buf, i);
            fcn.call(thisArg, z, i, this);
          }
        });

        /**
        * Returns an array element.
        *
        * @name get
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {NonNegativeInteger} idx - element index
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} must provide a nonnegative integer
        * @returns {(Complex128|void)} array element
        *
        * @example
        * var arr = new Complex128Array( 10 );
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var z = arr.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 0.0
        *
        * var im = imag( z );
        * // returns 0.0
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        *
        * z = arr.get( 0 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 1.0
        *
        * im = imag( z );
        * // returns -1.0
        *
        * z = arr.get( 100 );
        * // returns undefined
        */
        setReadOnly$3(Complex128Array$3.prototype, 'get', function get(idx) {
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isNonNegativeInteger(idx)) {
            throw new TypeError(format$4('invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx));
          }
          if (idx >= this._length) {
            return;
          }
          return getComplex128(this._buffer, idx);
        });

        /**
        * Number of array elements.
        *
        * @name length
        * @memberof Complex128Array.prototype
        * @readonly
        * @type {NonNegativeInteger}
        *
        * @example
        * var arr = new Complex128Array( 10 );
        *
        * var len = arr.length;
        * // returns 10
        */
        setReadOnlyAccessor$1(Complex128Array$3.prototype, 'length', function get() {
          return this._length;
        });

        /**
        * Returns a boolean indicating whether an array includes a provided value.
        *
        * @name includes
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {ComplexLike} searchElement - search element
        * @param {integer} [fromIndex=0] - starting index (inclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @returns {boolean} boolean indicating whether an array includes a provided value
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var arr = new Complex128Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var bool = arr.includes( new Complex128( 3.0, -3.0 ) );
        * // returns true
        *
        * bool = arr.includes( new Complex128( 3.0, -3.0 ), 3 );
        * // returns false
        *
        * bool = arr.includes( new Complex128( 4.0, -4.0 ), -3 );
        * // returns true
        */
        setReadOnly$3(Complex128Array$3.prototype, 'includes', function includes(searchElement, fromIndex) {
          var buf;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike(searchElement)) {
            throw new TypeError(format$4('invalid argument. First argument must be a complex number. Value: `%s`.', searchElement));
          }
          if (arguments.length > 1) {
            if (!isInteger(fromIndex)) {
              throw new TypeError(format$4('invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex));
            }
            if (fromIndex < 0) {
              fromIndex += this._length;
              if (fromIndex < 0) {
                fromIndex = 0;
              }
            }
          } else {
            fromIndex = 0;
          }
          re = real(searchElement);
          im = imag(searchElement);
          buf = this._buffer;
          for (i = fromIndex; i < this._length; i++) {
            idx = 2 * i;
            if (re === buf[idx] && im === buf[idx + 1]) {
              return true;
            }
          }
          return false;
        });

        /**
        * Returns the first index at which a given element can be found.
        *
        * @name indexOf
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {ComplexLike} searchElement - element to find
        * @param {integer} [fromIndex=0] - starting index (inclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @returns {integer} index or -1
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var arr = new Complex128Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var idx = arr.indexOf( new Complex128( 3.0, -3.0 ) );
        * // returns 2
        *
        * idx = arr.indexOf( new Complex128( 3.0, -3.0 ), 3 );
        * // returns -1
        *
        * idx = arr.indexOf( new Complex128( 4.0, -4.0 ), -3 );
        * // returns 3
        */
        setReadOnly$3(Complex128Array$3.prototype, 'indexOf', function indexOf(searchElement, fromIndex) {
          var buf;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike(searchElement)) {
            throw new TypeError(format$4('invalid argument. First argument must be a complex number. Value: `%s`.', searchElement));
          }
          if (arguments.length > 1) {
            if (!isInteger(fromIndex)) {
              throw new TypeError(format$4('invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex));
            }
            if (fromIndex < 0) {
              fromIndex += this._length;
              if (fromIndex < 0) {
                fromIndex = 0;
              }
            }
          } else {
            fromIndex = 0;
          }
          re = real(searchElement);
          im = imag(searchElement);
          buf = this._buffer;
          for (i = fromIndex; i < this._length; i++) {
            idx = 2 * i;
            if (re === buf[idx] && im === buf[idx + 1]) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Returns a new string by concatenating all array elements.
        *
        * @name join
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {string} [separator=','] - element separator
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a string
        * @returns {string} string representation
        *
        * @example
        * var arr = new Complex128Array( 2 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        *
        * var str = arr.join();
        * // returns '1 + 1i,2 + 2i'
        *
        * str = arr.join( '/' );
        * // returns '1 + 1i/2 + 2i'
        */
        setReadOnly$3(Complex128Array$3.prototype, 'join', function join(separator) {
          var out;
          var buf;
          var sep;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (arguments.length === 0) {
            sep = ',';
          } else if (isString(separator)) {
            sep = separator;
          } else {
            throw new TypeError(format$4('invalid argument. First argument must be a string. Value: `%s`.', separator));
          }
          out = [];
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            out.push(getComplex128(buf, i).toString());
          }
          return out.join(sep);
        });

        /**
        * Returns the last index at which a given element can be found.
        *
        * @name lastIndexOf
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {ComplexLike} searchElement - element to find
        * @param {integer} [fromIndex] - index at which to start searching backward (inclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a complex number
        * @throws {TypeError} second argument must be an integer
        * @returns {integer} index or -1
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var arr = new Complex128Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 3.0, -3.0 ], 4 );
        *
        * var idx = arr.lastIndexOf( new Complex128( 3.0, -3.0 ) );
        * // returns 4
        *
        * idx = arr.lastIndexOf( new Complex128( 3.0, -3.0 ), 3 );
        * // returns 2
        *
        * idx = arr.lastIndexOf( new Complex128( 5.0, -5.0 ), 3 );
        * // returns -1
        *
        * idx = arr.lastIndexOf( new Complex128( 2.0, -2.0 ), -3 );
        * // returns 1
        */
        setReadOnly$3(Complex128Array$3.prototype, 'lastIndexOf', function lastIndexOf(searchElement, fromIndex) {
          var buf;
          var idx;
          var re;
          var im;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isComplexLike(searchElement)) {
            throw new TypeError(format$4('invalid argument. First argument must be a complex number. Value: `%s`.', searchElement));
          }
          if (arguments.length > 1) {
            if (!isInteger(fromIndex)) {
              throw new TypeError(format$4('invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex));
            }
            if (fromIndex >= this._length) {
              fromIndex = this._length - 1;
            } else if (fromIndex < 0) {
              fromIndex += this._length;
            }
          } else {
            fromIndex = this._length - 1;
          }
          re = real(searchElement);
          im = imag(searchElement);
          buf = this._buffer;
          for (i = fromIndex; i >= 0; i--) {
            idx = 2 * i;
            if (re === buf[idx] && im === buf[idx + 1]) {
              return i;
            }
          }
          return -1;
        });

        /**
        * Returns a new array with each element being the result of a provided callback function.
        *
        * @name map
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} fcn - callback function
        * @param {*} [thisArg] - callback function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {Complex128Array} complex number array
        *
        * @example
        * var Complex128 = require( '@stdlib/complex-float64' );
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function scale( v, i ) {
        *     return new Complex128( 2.0*real( v ), 2.0*imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var out = arr.map( scale );
        * // returns <Complex128Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 2.0
        *
        * var im = imag( z );
        * // returns -2.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'map', function map(fcn, thisArg) {
          var outbuf;
          var buf;
          var out;
          var i;
          var v;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(fcn)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', fcn));
          }
          buf = this._buffer;
          out = new this.constructor(this._length);
          outbuf = out._buffer; // eslint-disable-line no-underscore-dangle
          for (i = 0; i < this._length; i++) {
            v = fcn.call(thisArg, getComplex128(buf, i), i, this);
            if (isComplexLike(v)) {
              outbuf[2 * i] = real(v);
              outbuf[2 * i + 1] = imag(v);
            } else if (isArrayLikeObject(v) && v.length === 2) {
              outbuf[2 * i] = v[0];
              outbuf[2 * i + 1] = v[1];
            } else {
              throw new TypeError(format$4('invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v));
            }
          }
          return out;
        });

        /**
        * Applies a provided callback function to each element of the array, in order, passing in the return value from the calculation on the preceding element and returning the accumulated result upon completion.
        *
        * @name reduce
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} reducer - callback function
        * @param {*} [initialValue] - initial value
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @throws {Error} if not provided an initial value, the array must have at least one element
        * @returns {*} accumulated result
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        * var cadd = require( '@stdlib/math-base-ops-cadd' );
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var z = arr.reduce( cadd );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 6.0
        *
        * var im = imag( z );
        * // returns 6.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'reduce', function reduce(reducer, initialValue) {
          var buf;
          var acc;
          var len;
          var v;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(reducer)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', reducer));
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length > 1) {
            acc = initialValue;
            i = 0;
          } else {
            if (len === 0) {
              throw new Error('invalid operation. If not provided an initial value, an array must contain at least one element.');
            }
            acc = getComplex128(buf, 0);
            i = 1;
          }
          for (; i < len; i++) {
            v = getComplex128(buf, i);
            acc = reducer(acc, v, i, this);
          }
          return acc;
        });

        /**
        * Reverses an array in-place.
        *
        * @name reverse
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex128Array} reversed array
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var out = arr.reverse();
        * // returns <Complex128Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 3.0
        *
        * var im = imag( z );
        * // returns 3.0
        *
        * z = out.get( 1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 2.0
        *
        * im = imag( z );
        * // returns 2.0
        *
        * z = out.get( 2 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 1.0
        *
        * im = imag( z );
        * // returns 1.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'reverse', function reverse() {
          var buf;
          var tmp;
          var len;
          var N;
          var i;
          var j;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          len = this._length;
          buf = this._buffer;
          N = floor$1(len / 2);
          for (i = 0; i < N; i++) {
            j = len - i - 1;
            tmp = buf[2 * i];
            buf[2 * i] = buf[2 * j];
            buf[2 * j] = tmp;
            tmp = buf[2 * i + 1];
            buf[2 * i + 1] = buf[2 * j + 1];
            buf[2 * j + 1] = tmp;
          }
          return this;
        });

        /**
        * Sets an array element.
        *
        * ## Notes
        *
        * -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:
        *
        *     ```text
        *     buf:                ---------------------
        *     src: ---------------------
        *     ```
        *
        *     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.
        *
        *     In the other overlapping scenario,
        *
        *     ```text
        *     buf: ---------------------
        *     src:                ---------------------
        *     ```
        *
        *     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values as intended.
        *
        * @name set
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {(Collection|Complex|ComplexArray)} value - value(s)
        * @param {NonNegativeInteger} [i=0] - element index at which to start writing values
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array
        * @throws {TypeError} index argument must be a nonnegative integer
        * @throws {RangeError} array-like objects must have a length which is a multiple of two
        * @throws {RangeError} index argument is out-of-bounds
        * @throws {RangeError} target array lacks sufficient storage to accommodate source values
        * @returns {void}
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 10 );
        *
        * var z = arr.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 0.0
        *
        * var im = imag( z );
        * // returns 0.0
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        *
        * z = arr.get( 0 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 1.0
        *
        * im = imag( z );
        * // returns -1.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'set', function set(value) {
          /* eslint-disable no-underscore-dangle */
          var sbuf;
          var idx;
          var buf;
          var tmp;
          var flg;
          var N;
          var v;
          var i;
          var j;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          buf = this._buffer;
          if (arguments.length > 1) {
            idx = arguments[1];
            if (!isNonNegativeInteger(idx)) {
              throw new TypeError(format$4('invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx));
            }
          } else {
            idx = 0;
          }
          if (isComplexLike(value)) {
            if (idx >= this._length) {
              throw new RangeError(format$4('invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx));
            }
            idx *= 2;
            buf[idx] = real(value);
            buf[idx + 1] = imag(value);
            return;
          }
          if (isComplexArray(value)) {
            N = value._length;
            if (idx + N > this._length) {
              throw new RangeError('invalid arguments. Target array lacks sufficient storage to accommodate source values.');
            }
            sbuf = value._buffer;

            // Check for overlapping memory...
            j = buf.byteOffset + idx * BYTES_PER_ELEMENT;
            if (sbuf.buffer === buf.buffer && sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j) {
              // We need to copy source values...
              tmp = new Float64Array$5(sbuf.length);
              for (i = 0; i < sbuf.length; i++) {
                tmp[i] = sbuf[i];
              }
              sbuf = tmp;
            }
            idx *= 2;
            j = 0;
            for (i = 0; i < N; i++) {
              buf[idx] = sbuf[j];
              buf[idx + 1] = sbuf[j + 1];
              idx += 2; // stride
              j += 2; // stride
            }
            return;
          }
          if (isCollection$1(value)) {
            // Detect whether we've been provided an array of complex numbers...
            N = value.length;
            for (i = 0; i < N; i++) {
              if (!isComplexLike(value[i])) {
                flg = true;
                break;
              }
            }
            // If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...
            if (flg) {
              if (!isEven(N)) {
                throw new RangeError(format$4('invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', N));
              }
              if (idx + N / 2 > this._length) {
                throw new RangeError('invalid arguments. Target array lacks sufficient storage to accommodate source values.');
              }
              sbuf = value;

              // Check for overlapping memory...
              j = buf.byteOffset + idx * BYTES_PER_ELEMENT;
              if (sbuf.buffer === buf.buffer && sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j) {
                // We need to copy source values...
                tmp = new Float64Array$5(N);
                for (i = 0; i < N; i++) {
                  tmp[i] = sbuf[i];
                }
                sbuf = tmp;
              }
              idx *= 2;
              N /= 2;
              j = 0;
              for (i = 0; i < N; i++) {
                buf[idx] = sbuf[j];
                buf[idx + 1] = sbuf[j + 1];
                idx += 2; // stride
                j += 2; // stride
              }
              return;
            }
            // If an array contains only complex numbers, then we need to extract real and imaginary components...
            if (idx + N > this._length) {
              throw new RangeError('invalid arguments. Target array lacks sufficient storage to accommodate source values.');
            }
            idx *= 2;
            for (i = 0; i < N; i++) {
              v = value[i];
              buf[idx] = real(v);
              buf[idx + 1] = imag(v);
              idx += 2; // stride
            }
            return;
          }
          throw new TypeError(format$4('invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.', value));

          /* eslint-enable no-underscore-dangle */
        });

        /**
        * Copies a portion of a typed array to a new typed array.
        *
        * @name slice
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {integer} [start=0] - starting index (inclusive)
        * @param {integer} [end] - ending index (exclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an integer
        * @throws {TypeError} second argument must be an integer
        * @returns {Complex128Array} complex number array
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var out = arr.slice();
        * // returns <Complex128Array>
        *
        * var len = out.length;
        * // returns 5
        *
        * var z = out.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 1.0
        *
        * var im = imag( z );
        * // returns -1.0
        *
        * z = out.get( len-1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 5.0
        *
        * im = imag( z );
        * // returns -5.0
        *
        * out = arr.slice( 1, -2 );
        * // returns <Complex128Array>
        *
        * len = out.length;
        * // returns 2
        *
        * z = out.get( 0 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 2.0
        *
        * im = imag( z );
        * // returns -2.0
        *
        * z = out.get( len-1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 3.0
        *
        * im = imag( z );
        * // returns -3.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'slice', function slice(start, end) {
          var outlen;
          var outbuf;
          var out;
          var idx;
          var buf;
          var len;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length === 0) {
            start = 0;
            end = len;
          } else {
            if (!isInteger(start)) {
              throw new TypeError(format$4('invalid argument. First argument must be an integer. Value: `%s`.', start));
            }
            if (start < 0) {
              start += len;
              if (start < 0) {
                start = 0;
              }
            }
            if (arguments.length === 1) {
              end = len;
            } else {
              if (!isInteger(end)) {
                throw new TypeError(format$4('invalid argument. Second argument must be an integer. Value: `%s`.', end));
              }
              if (end < 0) {
                end += len;
                if (end < 0) {
                  end = 0;
                }
              } else if (end > len) {
                end = len;
              }
            }
          }
          if (start < end) {
            outlen = end - start;
          } else {
            outlen = 0;
          }
          out = new this.constructor(outlen);
          outbuf = out._buffer; // eslint-disable-line no-underscore-dangle
          for (i = 0; i < outlen; i++) {
            idx = 2 * (i + start);
            outbuf[2 * i] = buf[idx];
            outbuf[2 * i + 1] = buf[idx + 1];
          }
          return out;
        });

        /**
        * Tests whether at least one element in an array passes a test implemented by a predicate function.
        *
        * @name some
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {Function} predicate - test function
        * @param {*} [thisArg] - predicate function execution context
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be a function
        * @returns {boolean} boolean indicating whether at least one element passes a test
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * function predicate( v ) {
        *     return ( real( v ) === imag( v ) );
        * }
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        *
        * var bool = arr.some( predicate );
        * // returns true
        */
        setReadOnly$3(Complex128Array$3.prototype, 'some', function some(predicate, thisArg) {
          var buf;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isFunction$1(predicate)) {
            throw new TypeError(format$4('invalid argument. First argument must be a function. Value: `%s`.', predicate));
          }
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            if (predicate.call(thisArg, getComplex128(buf, i), i, this)) {
              return true;
            }
          }
          return false;
        });

        /**
        * Creates a new typed array view over the same underlying `ArrayBuffer` and with the same underlying data type as the host array.
        *
        * @name subarray
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {integer} [begin=0] - starting index (inclusive)
        * @param {integer} [end] - ending index (exclusive)
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an integer
        * @throws {TypeError} second argument must be an integer
        * @returns {Complex64Array} subarray
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 5 );
        *
        * arr.set( [ 1.0, -1.0 ], 0 );
        * arr.set( [ 2.0, -2.0 ], 1 );
        * arr.set( [ 3.0, -3.0 ], 2 );
        * arr.set( [ 4.0, -4.0 ], 3 );
        * arr.set( [ 5.0, -5.0 ], 4 );
        *
        * var subarr = arr.subarray();
        * // returns <Complex128Array>
        *
        * var len = subarr.length;
        * // returns 5
        *
        * var z = subarr.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 1.0
        *
        * var im = imag( z );
        * // returns -1.0
        *
        * z = subarr.get( len-1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 5.0
        *
        * im = imag( z );
        * // returns -5.0
        *
        * subarr = arr.subarray( 1, -2 );
        * // returns <Complex128Array>
        *
        * len = subarr.length;
        * // returns 2
        *
        * z = subarr.get( 0 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 2.0
        *
        * im = imag( z );
        * // returns -2.0
        *
        * z = subarr.get( len-1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 3.0
        *
        * im = imag( z );
        * // returns -3.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'subarray', function subarray(begin, end) {
          var offset;
          var buf;
          var len;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          buf = this._buffer;
          len = this._length;
          if (arguments.length === 0) {
            begin = 0;
            end = len;
          } else {
            if (!isInteger(begin)) {
              throw new TypeError(format$4('invalid argument. First argument must be an integer. Value: `%s`.', begin));
            }
            if (begin < 0) {
              begin += len;
              if (begin < 0) {
                begin = 0;
              }
            }
            if (arguments.length === 1) {
              end = len;
            } else {
              if (!isInteger(end)) {
                throw new TypeError(format$4('invalid argument. Second argument must be an integer. Value: `%s`.', end));
              }
              if (end < 0) {
                end += len;
                if (end < 0) {
                  end = 0;
                }
              } else if (end > len) {
                end = len;
              }
            }
          }
          if (begin >= len) {
            len = 0;
            offset = buf.byteLength;
          } else if (begin >= end) {
            len = 0;
            offset = buf.byteOffset + begin * BYTES_PER_ELEMENT;
          } else {
            len = end - begin;
            offset = buf.byteOffset + begin * BYTES_PER_ELEMENT;
          }
          return new this.constructor(buf.buffer, offset, len < 0 ? 0 : len);
        });

        /**
        * Returns a new typed array containing the elements in reversed order.
        *
        * @name toReversed
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {Complex128Array} reversed array
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var out = arr.toReversed();
        * // returns <Complex128Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 3.0
        *
        * var im = imag( z );
        * // returns 3.0
        *
        * z = out.get( 1 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 2.0
        *
        * im = imag( z );
        * // returns 2.0
        *
        * z = out.get( 2 );
        * // returns <Complex128>
        *
        * re = real( z );
        * // returns 1.0
        *
        * im = imag( z );
        * // returns 1.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'toReversed', function toReversed() {
          var outbuf;
          var out;
          var len;
          var buf;
          var i;
          var j;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          len = this._length;
          out = new this.constructor(len);
          buf = this._buffer;
          outbuf = out._buffer; // eslint-disable-line no-underscore-dangle
          for (i = 0; i < len; i++) {
            j = len - i - 1;
            outbuf[2 * i] = buf[2 * j];
            outbuf[2 * i + 1] = buf[2 * j + 1];
          }
          return out;
        });

        /**
        * Serializes an array as a string.
        *
        * @name toString
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @throws {TypeError} `this` must be a complex number array
        * @returns {string} string representation
        *
        * @example
        * var arr = new Complex128Array( 2 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        *
        * var str = arr.toString();
        * // returns '1 + 1i,2 + 2i'
        */
        setReadOnly$3(Complex128Array$3.prototype, 'toString', function toString() {
          var out;
          var buf;
          var i;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          out = [];
          buf = this._buffer;
          for (i = 0; i < this._length; i++) {
            out.push(getComplex128(buf, i).toString());
          }
          return out.join(',');
        });

        /**
        * Returns a new typed array with the element at a provided index replaced with a provided value.
        *
        * @name with
        * @memberof Complex128Array.prototype
        * @type {Function}
        * @param {integer} index - element index
        * @param {ComplexLike} value - new value
        * @throws {TypeError} `this` must be a complex number array
        * @throws {TypeError} first argument must be an integer
        * @throws {RangeError} index argument is out-of-bounds
        * @throws {TypeError} second argument must be a complex number
        * @returns {Complex128Array} new typed array
        *
        * @example
        * var real = require( '@stdlib/complex-real' );
        * var imag = require( '@stdlib/complex-imag' );
        * var Complex128 = require( '@stdlib/complex-float64' );
        *
        * var arr = new Complex128Array( 3 );
        *
        * arr.set( [ 1.0, 1.0 ], 0 );
        * arr.set( [ 2.0, 2.0 ], 1 );
        * arr.set( [ 3.0, 3.0 ], 2 );
        *
        * var out = arr.with( 0, new Complex128( 4.0, 4.0 ) );
        * // returns <Complex128Array>
        *
        * var z = out.get( 0 );
        * // returns <Complex128>
        *
        * var re = real( z );
        * // returns 4.0
        *
        * var im = imag( z );
        * // returns 4.0
        */
        setReadOnly$3(Complex128Array$3.prototype, 'with', function copyWith(index, value) {
          var buf;
          var out;
          var len;
          if (!isComplexArray(this)) {
            throw new TypeError('invalid invocation. `this` is not a complex number array.');
          }
          if (!isInteger(index)) {
            throw new TypeError(format$4('invalid argument. First argument must be an integer. Value: `%s`.', index));
          }
          len = this._length;
          if (index < 0) {
            index += len;
          }
          if (index < 0 || index >= len) {
            throw new RangeError(format$4('invalid argument. Index argument is out-of-bounds. Value: `%s`.', index));
          }
          if (!isComplexLike(value)) {
            throw new TypeError(format$4('invalid argument. Second argument must be a complex number. Value: `%s`.', value));
          }
          out = new this.constructor(this._buffer);
          buf = out._buffer; // eslint-disable-line no-underscore-dangle
          buf[2 * index] = real(value);
          buf[2 * index + 1] = imag(value);
          return out;
        });

        // EXPORTS //

        var main$l = Complex128Array$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * 128-bit complex number array.
        *
        * @module @stdlib/array-complex128
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var arr = new Complex128Array();
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 0
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var arr = new Complex128Array( 2 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var arr = new Complex128Array( [ 1.0, -1.0 ] );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 1
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var buf = new ArrayBuffer( 32 );
        * var arr = new Complex128Array( buf );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var buf = new ArrayBuffer( 32 );
        * var arr = new Complex128Array( buf, 16 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        *
        * @example
        * var ArrayBuffer = require( '@stdlib/array-buffer' );
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var buf = new ArrayBuffer( 64 );
        * var arr = new Complex128Array( buf, 16, 2 );
        * // returns <Complex128Array>
        *
        * var len = arr.length;
        * // returns 2
        */

        // MODULES //

        var main$k = main$l;

        // EXPORTS //

        var lib$a = main$k;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Float64Array$4 = lib$Z;
        var Float32Array$3 = lib$W;
        var Uint32Array$4 = lib$19;
        var Int32Array$3 = lib$R;
        var Uint16Array$3 = lib$N;
        var Int16Array$3 = lib$I;
        var Uint8Array$3 = lib$E;
        var Uint8ClampedArray$3 = lib$B;
        var Int8Array$3 = lib$w;
        var Complex64Array$2 = lib$d;
        var Complex128Array$2 = lib$a;

        // MAIN //

        // Note: order should match `dtypes` order
        var CTORS$7 = [Float64Array$4, Float32Array$3, Int32Array$3, Uint32Array$4, Int16Array$3, Uint16Array$3, Int8Array$3, Uint8Array$3, Uint8ClampedArray$3, Complex64Array$2, Complex128Array$2];

        // EXPORTS //

        var ctors$3 = CTORS$7;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        // Note: order should match `ctors` order
        var DTYPES$1 = ['float64', 'float32', 'int32', 'uint32', 'int16', 'uint16', 'int8', 'uint8', 'uint8c', 'complex64', 'complex128'];

        // EXPORTS //

        var dtypes = DTYPES$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isBuffer = lib$1u;
        var isArray = lib$1B;
        var constructorName = lib$1t;
        var ctor2dtype = ctor2dtype$1;
        var CTORS$6 = ctors$3;
        var DTYPES = dtypes;

        // VARIABLES //

        var NTYPES = DTYPES.length;

        // MAIN //

        /**
        * Returns the data type of an array.
        *
        * @param {*} value - input value
        * @returns {(string|null)} data type
        *
        * @example
        * var dt = dtype( [ 1, 2, 3 ] );
        * // returns 'generic'
        *
        * var dt = dtype( 'beep' );
        * // returns null
        */
        function dtype$1(value) {
          var i;
          if (isArray(value)) {
            return 'generic';
          }
          if (isBuffer(value)) {
            return null;
          }
          for (i = 0; i < NTYPES; i++) {
            if (value instanceof CTORS$6[i]) {
              return DTYPES[i];
            }
          }
          // If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:
          return ctor2dtype[constructorName(value)] || null;
        }

        // EXPORTS //

        var main$j = dtype$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the data type of an array.
        *
        * @module @stdlib/array-dtype
        *
        * @example
        * var Float64Array = require( '@stdlib/array-float64' );
        * var dtype = require( '@stdlib/array-dtype' );
        *
        * var arr = new Float64Array( 10 );
        *
        * var dt = dtype( arr );
        * // returns 'float64'
        *
        * dt = dtype( {} );
        * // returns null
        *
        * dt = dtype( 'beep' );
        * // returns null
        */

        // MODULES //

        var main$i = main$j;

        // EXPORTS //

        var lib$9 = main$i;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isAccessorArray = lib$14;
        var getter = lib$13;
        var setter = lib$12;
        var accessorGetter = lib$11;
        var accessorSetter = lib$10;
        var dtype = lib$9;

        // MAIN //

        /**
        * Converts an array-like to an object likely to have the same "shape".
        *
        * ## Notes
        *
        * -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different "hidden" classes. If a function is provided many objects having different "shapes", some JavaScript VMs (e.g., V8) will consider the function "megamorphic" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the "shape" of the object holding array meta data to ensure that internal functions operating on arrays are provided consistent argument "shapes".
        *
        * -   The returned object has the following properties:
        *
        *     -   **data**: reference to the input array.
        *     -   **dtype**: array data type.
        *     -   **accessorProtocol**: `boolean` indicating whether the input array uses accessors for getting and setting elements.
        *     -   **accessors**: a two-element array whose first element is an accessor for retrieving an array element and whose second element is an accessor for setting an array element.
        *
        * @param {Collection} x - array-like object
        * @returns {Object} object containing array meta data
        *
        * @example
        * var obj = arraylike2object( [ 1, 2, 3, 4 ] );
        * // returns {...}
        */
        function arraylike2object$2(x) {
          var dt = dtype(x);
          if (isAccessorArray(x)) {
            return {
              'data': x,
              'dtype': dt,
              'accessorProtocol': true,
              'accessors': [accessorGetter(dt), accessorSetter(dt)]
            };
          }
          return {
            'data': x,
            'dtype': dt,
            'accessorProtocol': false,
            'accessors': [getter(dt), setter(dt)]
          };
        }

        // EXPORTS //

        var main$h = arraylike2object$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Convert an array-like object to an object likely to have the same "shape".
        *
        * @module @stdlib/array-base-arraylike2object
        *
        * @example
        * var arraylike2object = require( '@stdlib/array-base-arraylike2object' );
        *
        * var obj = arraylike2object( [ 1, 2, 3, 4 ] );
        * // returns {...}
        */

        // MODULES //

        var main$g = main$h;

        // EXPORTS //

        var lib$8 = main$g;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2022 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MAIN //

        /**
        * Copies values from `x` into `y`.
        *
        * @private
        * @param {PositiveInteger} N - number of indexed elements
        * @param {Object} x - input array object
        * @param {Collection} x.data - input array data
        * @param {Array<Function>} x.accessors - array element accessors
        * @param {integer} strideX - `x` stride length
        * @param {NonNegativeInteger} offsetX - starting `x` index
        * @param {Object} y - output array object
        * @param {Collection} y.data - output array data
        * @param {Array<Function>} y.accessors - array element accessors
        * @param {integer} strideY - `y` stride length
        * @param {NonNegativeInteger} offsetY - starting `y` index
        * @returns {Object} output array object
        *
        * @example
        * var Complex64Array = require( '@stdlib/array-complex64' );
        * var Complex64 = require( '@stdlib/complex-float32' );
        * var reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );
        *
        * function setter( data, idx, value ) {
        *     data.set( value, idx );
        * }
        *
        * function getter( data, idx ) {
        *     return data.get( idx );
        * }
        *
        * var x = {
        *     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),
        *     'accessors': [ getter, setter ]
        * };
        *
        * var y = {
        *     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),
        *     'accessors': [ getter, setter ]
        * };
        *
        * gcopy( x.data.length, x, 1, 0, y, 1, 0 );
        *
        * var view = reinterpret64( y.data, 0 );
        * // view => <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]
        */
        function gcopy$3(N, x, strideX, offsetX, y, strideY, offsetY) {
          var xbuf;
          var ybuf;
          var set;
          var get;
          var ix;
          var iy;
          var i;

          // Cache references to array data:
          xbuf = x.data;
          ybuf = y.data;

          // Cache a reference to the element accessors:
          get = x.accessors[0];
          set = y.accessors[1];
          ix = offsetX;
          iy = offsetY;
          for (i = 0; i < N; i++) {
            set(ybuf, iy, get(xbuf, ix));
            ix += strideX;
            iy += strideY;
          }
          return x;
        }

        // EXPORTS //

        var accessors$2 = gcopy$3;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var arraylike2object$1 = lib$8;
        var accessors$1 = accessors$2;

        // VARIABLES //

        var M$2 = 8;

        // MAIN //

        /**
        * Copies values from `x` into `y`.
        *
        * @param {PositiveInteger} N - number of indexed elements
        * @param {Collection} x - input array
        * @param {integer} strideX - `x` stride length
        * @param {Collection} y - output array
        * @param {integer} strideY - `y` stride length
        * @returns {Collection} output array
        *
        * @example
        * var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
        * var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
        *
        * gcopy( x.length, x, 1, y, 1 );
        * // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
        */
        function gcopy$2(N, x, strideX, y, strideY) {
          var ix;
          var iy;
          var ox;
          var oy;
          var m;
          var i;
          if (N <= 0) {
            return y;
          }
          ox = arraylike2object$1(x);
          oy = arraylike2object$1(y);
          if (ox.accessorProtocol || oy.accessorProtocol) {
            if (strideX < 0) {
              ix = (1 - N) * strideX;
            } else {
              ix = 0;
            }
            if (strideY < 0) {
              iy = (1 - N) * strideY;
            } else {
              iy = 0;
            }
            accessors$1(N, ox, strideX, ix, oy, strideY, iy);
            return oy.data;
          }
          // Use unrolled loops if both strides are equal to `1`...
          if (strideX === 1 && strideY === 1) {
            m = N % M$2;

            // If we have a remainder, run a clean-up loop...
            if (m > 0) {
              for (i = 0; i < m; i++) {
                y[i] = x[i];
              }
            }
            if (N < M$2) {
              return y;
            }
            for (i = m; i < N; i += M$2) {
              y[i] = x[i];
              y[i + 1] = x[i + 1];
              y[i + 2] = x[i + 2];
              y[i + 3] = x[i + 3];
              y[i + 4] = x[i + 4];
              y[i + 5] = x[i + 5];
              y[i + 6] = x[i + 6];
              y[i + 7] = x[i + 7];
            }
            return y;
          }
          if (strideX < 0) {
            ix = (1 - N) * strideX;
          } else {
            ix = 0;
          }
          if (strideY < 0) {
            iy = (1 - N) * strideY;
          } else {
            iy = 0;
          }
          for (i = 0; i < N; i++) {
            y[iy] = x[ix];
            ix += strideX;
            iy += strideY;
          }
          return y;
        }

        // EXPORTS //

        var main$f = gcopy$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var arraylike2object = lib$8;
        var accessors = accessors$2;

        // VARIABLES //

        var M$1 = 8;

        // MAIN //

        /**
        * Copies values from `x` into `y`.
        *
        * @param {PositiveInteger} N - number of indexed elements
        * @param {Collection} x - input array
        * @param {integer} strideX - `x` stride length
        * @param {NonNegativeInteger} offsetX - starting `x` index
        * @param {Collection} y - output array
        * @param {integer} strideY - `y` stride length
        * @param {NonNegativeInteger} offsetY - starting `y` index
        * @returns {Collection} output array
        *
        * @example
        * var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
        * var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
        *
        * gcopy( x.length, x, 1, 0, y, 1, 0 );
        * // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
        */
        function gcopy$1(N, x, strideX, offsetX, y, strideY, offsetY) {
          var ix;
          var iy;
          var ox;
          var oy;
          var m;
          var i;
          if (N <= 0) {
            return y;
          }
          ox = arraylike2object(x);
          oy = arraylike2object(y);
          if (ox.accessorProtocol || oy.accessorProtocol) {
            accessors(N, ox, strideX, offsetX, oy, strideY, offsetY);
            return oy.data;
          }
          ix = offsetX;
          iy = offsetY;

          // Use unrolled loops if both strides are equal to `1`...
          if (strideX === 1 && strideY === 1) {
            m = N % M$1;

            // If we have a remainder, run a clean-up loop...
            if (m > 0) {
              for (i = 0; i < m; i++) {
                y[iy] = x[ix];
                ix += strideX;
                iy += strideY;
              }
            }
            if (N < M$1) {
              return y;
            }
            for (i = m; i < N; i += M$1) {
              y[iy] = x[ix];
              y[iy + 1] = x[ix + 1];
              y[iy + 2] = x[ix + 2];
              y[iy + 3] = x[ix + 3];
              y[iy + 4] = x[ix + 4];
              y[iy + 5] = x[ix + 5];
              y[iy + 6] = x[ix + 6];
              y[iy + 7] = x[ix + 7];
              ix += M$1;
              iy += M$1;
            }
            return y;
          }
          for (i = 0; i < N; i++) {
            y[iy] = x[ix];
            ix += strideX;
            iy += strideY;
          }
          return y;
        }

        // EXPORTS //

        var ndarray$1 = gcopy$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * BLAS level 1 routine to copy values from `x` into `y`.
        *
        * @module @stdlib/blas-base-gcopy
        *
        * @example
        * var gcopy = require( '@stdlib/blas-base-gcopy' );
        *
        * var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
        * var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
        *
        * gcopy( x.length, x, 1, y, 1 );
        * // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
        *
        * @example
        * var gcopy = require( '@stdlib/blas-base-gcopy' );
        *
        * var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
        * var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
        *
        * gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );
        * // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
        */

        // MODULES //

        var setReadOnly$2 = lib$1J;
        var main$e = main$f;
        var ndarray = ndarray$1;

        // MAIN //

        setReadOnly$2(main$e, 'ndarray', ndarray);

        // EXPORTS //

        var lib$7 = main$e;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Dummy function.
        *
        * @private
        */
        function foo$1() {
          // No-op...
        }

        // EXPORTS //

        var foo_1 = foo$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var foo = foo_1;

        // MAIN //

        /**
        * Tests for native function `name` support.
        *
        * @returns {boolean} boolean indicating if an environment has function `name` support
        *
        * @example
        * var bool = hasFunctionNameSupport();
        * // returns <boolean>
        */
        function hasFunctionNameSupport$1() {
          return foo.name === 'foo';
        }

        // EXPORTS //

        var main$d = hasFunctionNameSupport$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test for native function `name` support.
        *
        * @module @stdlib/assert-has-function-name-support
        *
        * @example
        * var hasFunctionNameSupport = require( '@stdlib/assert-has-function-name-support' );
        *
        * var bool = hasFunctionNameSupport();
        * // returns <boolean>
        */

        // MODULES //

        var main$c = main$d;

        // EXPORTS //

        var lib$6 = main$c;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isFunction = lib$1r;
        var hasFunctionNameSupport = lib$6;
        var format$3 = lib$1L;
        var RE = lib$1x.REGEXP;

        // VARIABLES //

        var isFunctionNameSupported = hasFunctionNameSupport();

        // MAIN //

        /**
        * Returns the name of a function.
        *
        * @param {Function} fcn - input function
        * @throws {TypeError} must provide a function
        * @returns {string} function name
        *
        * @example
        * var v = functionName( Math.sqrt );
        * // returns 'sqrt'
        *
        * @example
        * var v = functionName( function foo(){} );
        * // returns 'foo'
        *
        * @example
        * var v = functionName( function(){} );
        * // returns '' || 'anonymous'
        *
        * @example
        * var v = functionName( String );
        * // returns 'String'
        */
        function functionName(fcn) {
          // TODO: add support for generator functions?
          if (isFunction(fcn) === false) {
            throw new TypeError(format$3('invalid argument. Must provide a function. Value: `%s`.', fcn));
          }
          if (isFunctionNameSupported) {
            return fcn.name;
          }
          return RE.exec(fcn.toString())[1];
        }

        // EXPORTS //

        var main$b = functionName;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return the name of a function.
        *
        * @module @stdlib/utils-function-name
        *
        * @example
        * var functionName = require( '@stdlib/utils-function-name' );
        *
        * var v = functionName( String );
        * // returns 'String'
        *
        * v = functionName( function foo(){} );
        * // returns 'foo'
        *
        * v = functionName( function(){} );
        * // returns '' || 'anonymous'
        */

        // MODULES //

        var main$a = main$b;

        // EXPORTS //

        var lib$5 = main$a;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Int8Array$2 = lib$w;
        var Uint8Array$2 = lib$E;
        var Uint8ClampedArray$2 = lib$B;
        var Int16Array$2 = lib$I;
        var Uint16Array$2 = lib$N;
        var Int32Array$2 = lib$R;
        var Uint32Array$3 = lib$19;
        var Float32Array$2 = lib$W;
        var Float64Array$3 = lib$Z;

        // MAIN //

        var CTORS$5 = [Float64Array$3, Float32Array$2, Int32Array$2, Uint32Array$3, Int16Array$2, Uint16Array$2, Int8Array$2, Uint8Array$2, Uint8ClampedArray$2];

        // EXPORTS //

        var ctors$2 = CTORS$5;
        var require$$6 = ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"];

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var ctorName$2 = lib$1t;
        var fcnName = lib$5;
        var getPrototypeOf$2 = lib$1p;
        var hasFloat64ArraySupport = lib$_;
        var Float64Array$2 = lib$Z;
        var CTORS$4 = ctors$2;
        var NAMES$1 = require$$6;

        // VARIABLES //

        // Abstract `TypedArray` class:
        var TypedArray = hasFloat64ArraySupport() ? getPrototypeOf$2(Float64Array$2) : Dummy; // eslint-disable-line max-len

        // Ensure abstract typed array class has expected name:
        TypedArray = fcnName(TypedArray) === 'TypedArray' ? TypedArray : Dummy;

        // FUNCTIONS //

        /**
        * Dummy constructor.
        *
        * @private
        */
        function Dummy() {} // eslint-disable-line no-empty-function

        // MAIN //

        /**
        * Tests if a value is a typed array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a typed array
        *
        * @example
        * var Int8Array = require( '@stdlib/array-int8' );
        *
        * var bool = isTypedArray( new Int8Array( 10 ) );
        * // returns true
        */
        function isTypedArray$1(value) {
          var v;
          var i;
          if (typeof value !== 'object' || value === null) {
            return false;
          }
          // Check for the abstract class...
          if (value instanceof TypedArray) {
            return true;
          }
          // Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...
          for (i = 0; i < CTORS$4.length; i++) {
            if (value instanceof CTORS$4[i]) {
              return true;
            }
          }
          // Walk the prototype tree until we find an object having a desired class...
          while (value) {
            v = ctorName$2(value);
            for (i = 0; i < NAMES$1.length; i++) {
              if (NAMES$1[i] === v) {
                return true;
              }
            }
            value = getPrototypeOf$2(value);
          }
          return false;
        }

        // EXPORTS //

        var main$9 = isTypedArray$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a typed array.
        *
        * @module @stdlib/assert-is-typed-array
        *
        * @example
        * var Int8Array = require( '@stdlib/array-int8' );
        * var isTypedArray = require( '@stdlib/assert-is-typed-array' );
        *
        * var bool = isTypedArray( new Int8Array( 10 ) );
        * // returns true
        */

        // MODULES //

        var main$8 = main$9;

        // EXPORTS //

        var lib$4 = main$8;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Complex64Array$1 = lib$d;
        var Complex128Array$1 = lib$a;

        // MAIN //

        var CTORS$3 = [Complex128Array$1, Complex64Array$1];

        // EXPORTS //

        var ctors$1 = CTORS$3;
        var require$$3 = ["Complex64Array", "Complex128Array"];

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var ctorName$1 = lib$1t;
        var getPrototypeOf$1 = lib$1p;
        var CTORS$2 = ctors$1;
        var NAMES = require$$3;

        // MAIN //

        /**
        * Tests if a value is a complex typed array.
        *
        * @param {*} value - value to test
        * @returns {boolean} boolean indicating if a value is a complex typed array
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        *
        * var bool = isComplexTypedArray( new Complex128Array( 10 ) );
        * // returns true
        */
        function isComplexTypedArray$1(value) {
          var v;
          var i;
          if (typeof value !== 'object' || value === null) {
            return false;
          }
          // Check for complex typed array objects from the same realm (same Node.js `vm` or same `Window` object)...
          for (i = 0; i < CTORS$2.length; i++) {
            if (value instanceof CTORS$2[i]) {
              return true;
            }
          }
          // Walk the prototype tree until we find an object having a desired class...
          while (value) {
            v = ctorName$1(value);
            for (i = 0; i < NAMES.length; i++) {
              if (NAMES[i] === v) {
                return true;
              }
            }
            value = getPrototypeOf$1(value);
          }
          return false;
        }

        // EXPORTS //

        var main$7 = isComplexTypedArray$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test if a value is a complex typed array.
        *
        * @module @stdlib/assert-is-complex-typed-array
        *
        * @example
        * var Complex128Array = require( '@stdlib/array-complex128' );
        * var isComplexTypedArray = require( '@stdlib/assert-is-complex-typed-array' );
        *
        * var bool = isComplexTypedArray( new Complex128Array( 10 ) );
        * // returns true
        */

        // MODULES //

        var main$6 = main$7;

        // EXPORTS //

        var lib$3 = main$6;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var format$2 = lib$1L;

        // MAIN //

        /**
        * Tests whether a value has in its prototype chain a specified constructor as a prototype property.
        *
        * @param {*} value - value to test
        * @param {Function} constructor - constructor to test against
        * @throws {TypeError} constructor must be callable
        * @returns {boolean} boolean indicating whether a value is an instance of a provided constructor
        *
        * @example
        * var bool = instanceOf( [], Array );
        * // returns true
        *
        * @example
        * var bool = instanceOf( {}, Object ); // exception
        * // returns true
        *
        * @example
        * var bool = instanceOf( 'beep', String );
        * // returns false
        *
        * @example
        * var bool = instanceOf( null, Object );
        * // returns false
        *
        * @example
        * var bool = instanceOf( 5, Object );
        * // returns false
        */
        function instanceOf$1(value, constructor) {
          // TODO: replace with `isCallable` check
          if (typeof constructor !== 'function') {
            throw new TypeError(format$2('invalid argument. Second argument must be callable. Value: `%s`.', constructor));
          }
          return value instanceof constructor;
        }

        // EXPORTS //

        var main$5 = instanceOf$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Test whether a value has in its prototype chain a specified constructor as a prototype property.
        *
        * @module @stdlib/assert-instance-of
        *
        * @example
        * var instanceOf = require( '@stdlib/assert-instance-of' );
        *
        * var bool = instanceOf( [], Array );
        * // returns true
        *
        * bool = instanceOf( {}, Object ); // exception
        * // returns true
        *
        * bool = instanceOf( 'beep', String );
        * // returns false
        *
        * bool = instanceOf( null, Object );
        * // returns false
        *
        * bool = instanceOf( 5, Object );
        * // returns false
        */

        // MODULES //

        var main$4 = main$5;

        // EXPORTS //

        var lib$2 = main$4;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var Int8Array$1 = lib$w;
        var Uint8Array$1 = lib$E;
        var Uint8ClampedArray$1 = lib$B;
        var Int16Array$1 = lib$I;
        var Uint16Array$1 = lib$N;
        var Int32Array$1 = lib$R;
        var Uint32Array$2 = lib$19;
        var Float32Array$1 = lib$W;
        var Float64Array$1 = lib$Z;
        var Complex64Array = lib$d;
        var Complex128Array = lib$a;

        // MAIN //

        var CTORS$1 = [[Float64Array$1, 'Float64Array'], [Float32Array$1, 'Float32Array'], [Int32Array$1, 'Int32Array'], [Uint32Array$2, 'Uint32Array'], [Int16Array$1, 'Int16Array'], [Uint16Array$1, 'Uint16Array'], [Int8Array$1, 'Int8Array'], [Uint8Array$1, 'Uint8Array'], [Uint8ClampedArray$1, 'Uint8ClampedArray'], [Complex64Array, 'Complex64Array'], [Complex128Array, 'Complex128Array']];

        // EXPORTS //

        var ctors = CTORS$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var instanceOf = lib$2;
        var ctorName = lib$1t;
        var getPrototypeOf = lib$1p;
        var CTORS = ctors;

        // MAIN //

        /**
        * Returns the typed array type.
        *
        * @private
        * @param {TypedArray} arr - typed array
        * @returns {(string|void)} typed array type
        *
        * @example
        * var Float64Array = require( '@stdlib/array-float64' );
        *
        * var arr = new Float64Array( 5 );
        * var str = typeName( arr );
        * // returns 'Float64Array'
        */
        function typeName$1(arr) {
          var v;
          var i;

          // Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...
          for (i = 0; i < CTORS.length; i++) {
            if (instanceOf(arr, CTORS[i][0])) {
              return CTORS[i][1];
            }
          }
          // Walk the prototype tree until we find an object having a desired native class...
          while (arr) {
            v = ctorName(arr);
            for (i = 0; i < CTORS.length; i++) {
              if (v === CTORS[i][1]) {
                return CTORS[i][1];
              }
            }
            arr = getPrototypeOf(arr);
          }
        }

        // EXPORTS //

        var type = typeName$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var isTypedArray = lib$4;
        var isComplexTypedArray = lib$3;
        var reinterpret64 = lib$f;
        var reinterpret128 = lib$e;
        var format$1 = lib$1L;
        var typeName = type;

        // MAIN //

        /**
        * Returns a JSON representation of a typed array.
        *
        * ## Notes
        *
        * -   We build a JSON object representing a typed array similar to how Node.js `Buffer` objects are represented. See [Buffer][1].
        *
        * [1]: https://nodejs.org/api/buffer.html#buffer_buf_tojson
        *
        * @param {TypedArray} arr - typed array to serialize
        * @throws {TypeError} first argument must be a typed array
        * @returns {Object} JSON representation
        *
        * @example
        * var Float64Array = require( '@stdlib/array-float64' );
        *
        * var arr = new Float64Array( [ 5.0, 3.0 ] );
        * var json = typedarray2json( arr );
        * // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
        */
        function typedarray2json$1(arr) {
          var data;
          var out;
          var i;
          if (isTypedArray(arr)) {
            data = arr;
          } else if (isComplexTypedArray(arr)) {
            if (arr.BYTES_PER_ELEMENT === 8) {
              data = reinterpret64(arr, 0);
            } else {
              // arr.BYTES_PER_ELEMENT === 16
              data = reinterpret128(arr, 0);
            }
          } else {
            throw new TypeError(format$1('invalid argument. Must provide a typed array. Value: `%s`.', arr));
          }
          out = {
            'type': typeName(arr),
            'data': []
          };
          for (i = 0; i < data.length; i++) {
            out.data.push(data[i]);
          }
          return out;
        }

        // EXPORTS //

        var main$3 = typedarray2json$1;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * Return a JSON representation of a typed array.
        *
        * @module @stdlib/array-to-json
        *
        * @example
        * var Float64Array = require( '@stdlib/array-float64' );
        * var typedarray2json = require( '@stdlib/array-to-json' );
        *
        * var arr = new Float64Array( [ 5.0, 3.0 ] );
        * var json = typedarray2json( arr );
        * // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
        */

        // MODULES //

        var main$2 = main$3;

        // EXPORTS //

        var lib$1 = main$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var UINT32_MAX$1 = lib$1b;
        var floor = lib$1n;

        // VARIABLES //

        var MAX = UINT32_MAX$1 - 1;

        // MAIN //

        /**
        * Returns a pseudorandom integer on the interval \\( [1, 2^{32}-1) \\).
        *
        * @private
        * @returns {PositiveInteger} pseudorandom integer
        *
        * @example
        * var v = randuint32();
        * // returns <number>
        */
        function randuint32$2() {
          var v = floor(1.0 + MAX * Math.random()); // eslint-disable-line stdlib/no-builtin-math
          return v >>> 0; // asm type annotation
        }

        // EXPORTS //

        var rand_uint32 = randuint32$2;

        /* eslint-disable max-lines, max-len */

        // MODULES //

        var setReadOnly$1 = lib$1J;
        var setReadOnlyAccessor = lib$1I;
        var setReadWriteAccessor = lib$1H;
        var hasOwnProp = lib$1G;
        var isObject = lib$1o;
        var isCollection = lib$1k;
        var isUint32Array = lib$1j;
        var isBoolean = lib$1y.isPrimitive;
        var isPositiveInteger = lib$1d.isPrimitive;
        var FLOAT64_MAX_SAFE_INTEGER = lib$1c;
        var UINT32_MAX = lib$1b;
        var Uint32Array$1 = lib$19;
        var max = lib$16;
        var umul = lib$15;
        var gcopy = lib$7;
        var typedarray2json = lib$1;
        var format = lib$1L;
        var randuint32$1 = rand_uint32;

        // VARIABLES //

        // Define the size of the state array (see refs):
        var N = 624;

        // Define a (magic) constant used for indexing into the state array:
        var M = 397;

        // Define the maximum seed: 11111111111111111111111111111111
        var MAX_SEED = UINT32_MAX >>> 0; // asm type annotation

        // For seed arrays, define an initial state (magic) constant: 19650218 => 00000001001010111101011010101010
        var SEED_ARRAY_INIT_STATE = 19650218 >>> 0; // asm type annotation

        // Define a mask for the most significant `w-r` bits, where `w` is the word size (32 bits) and `r` is the separation point of one word (see refs): 2147483648 => 0x80000000 => 10000000000000000000000000000000
        var UPPER_MASK = 0x80000000 >>> 0; // asm type annotation

        // Define a mask for the least significant `r` bits (see refs): 2147483647 => 0x7fffffff => 01111111111111111111111111111111
        var LOWER_MASK = 0x7fffffff >>> 0; // asm type annotation

        // Define a multiplier (see Knuth TAOCP Vol2. 3rd Ed. P.106): 1812433253 => 01101100000001111000100101100101
        var KNUTH_MULTIPLIER = 1812433253 >>> 0; // asm type annotation

        // Define a (magic) multiplier: 1664525 => 00000000000110010110011000001101
        var MAGIC_MULTIPLIER_1 = 1664525 >>> 0; // asm type annotation

        // Define a (magic) multiplier: 1566083941 => 01011101010110001000101101100101
        var MAGIC_MULTIPLIER_2 = 1566083941 >>> 0; // asm type annotation

        // Define a tempering coefficient: 2636928640 => 0x9d2c5680 => 10011101001011000101011010000000
        var TEMPERING_COEFFICIENT_1 = 0x9d2c5680 >>> 0; // asm type annotation

        // Define a tempering coefficient: 4022730752 => 0xefc60000 => 11101111110001100000000000000000
        var TEMPERING_COEFFICIENT_2 = 0xefc60000 >>> 0; // asm type annotation

        // Define a constant vector `a` (see refs): 2567483615 => 0x9908b0df => 10011001000010001011000011011111
        var MATRIX_A = 0x9908b0df >>> 0; // asm type annotation

        // MAG01[x] = x * MATRIX_A; for x = {0,1}
        var MAG01 = [0x0 >>> 0, MATRIX_A >>> 0]; // asm type annotation

        // Define a normalization constant when generating double-precision floating-point numbers: 2^53 => 9007199254740992
        var FLOAT64_NORMALIZATION_CONSTANT = 1.0 / (FLOAT64_MAX_SAFE_INTEGER + 1.0); // eslint-disable-line id-length

        // 2^26: 67108864
        var TWO_26 = 67108864 >>> 0; // asm type annotation

        // 2^32: 2147483648 => 0x80000000 => 10000000000000000000000000000000
        var TWO_32 = 0x80000000 >>> 0; // asm type annotation

        // 1 (as a 32-bit unsigned integer): 1 => 0x1 => 00000000000000000000000000000001
        var ONE = 0x1 >>> 0; // asm type annotation

        // Define the maximum normalized pseudorandom double-precision floating-point number: ( (((2^32-1)>>>5)*2^26)+( (2^32-1)>>>6) ) / 2^53
        var MAX_NORMALIZED = FLOAT64_MAX_SAFE_INTEGER * FLOAT64_NORMALIZATION_CONSTANT;

        // Define the state array schema version:
        var STATE_ARRAY_VERSION = 1; // NOTE: anytime the state array schema changes, this value should be incremented!!!

        // Define the number of sections in the state array:
        var NUM_STATE_SECTIONS = 3; // state, other, seed

        // Define the index offset of the "state" section in the state array:
        var STATE_SECTION_OFFSET = 2; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |

        // Define the index offset of the "other" section in the state array:
        var OTHER_SECTION_OFFSET = N + 3; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |

        // Define the index offset of the seed section in the state array:
        var SEED_SECTION_OFFSET = N + 5; // | version | num_sections | state_length | ...state | other_length | state_index | seed_length | ...seed |

        // Define the length of the "fixed" length portion of the state array:
        var STATE_FIXED_LENGTH = N + 6; // 1 (version) + 1 (num_sections) + 1 (state_length) + N (state) + 1 (other_length) + 1 (state_index) + 1 (seed_length)

        // FUNCTIONS //

        /**
        * Verifies state array integrity.
        *
        * @private
        * @param {Uint32Array} state - state array
        * @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
        * @returns {(Error|null)} an error or `null`
        */
        function verifyState(state, FLG) {
          var s1;
          if (FLG) {
            s1 = 'option';
          } else {
            s1 = 'argument';
          }
          // The state array must have a minimum length...
          if (state.length < STATE_FIXED_LENGTH + 1) {
            return new RangeError(format('invalid %s. `state` array has insufficient length.', s1));
          }
          // The first element of the state array must equal the supported state array schema version...
          if (state[0] !== STATE_ARRAY_VERSION) {
            return new RangeError(format('invalid %s. `state` array has an incompatible schema version. Expected: `%s`. Actual: `%s.`', s1, STATE_ARRAY_VERSION, state[0]));
          }
          // The second element of the state array must contain the number of sections...
          if (state[1] !== NUM_STATE_SECTIONS) {
            return new RangeError(format('invalid %s. `state` array has an incompatible number of sections. Expected: `%s`. Actual: `%s`.', s1, NUM_STATE_SECTIONS, state[1]));
          }
          // The length of the "state" section must equal `N`...
          if (state[STATE_SECTION_OFFSET] !== N) {
            return new RangeError(format('invalid %s. `state` array has an incompatible state length. Expected: `%u`. Actual: `%u`.', s1, N, state[STATE_SECTION_OFFSET]));
          }
          // The length of the "other" section must equal `1`...
          if (state[OTHER_SECTION_OFFSET] !== 1) {
            return new RangeError(format('invalid %s. `state` array has an incompatible section length. Expected: `%u`. Actual: `%u`.', s1, 1, state[OTHER_SECTION_OFFSET]));
          }
          // The length of the "seed" section much match the empirical length...
          if (state[SEED_SECTION_OFFSET] !== state.length - STATE_FIXED_LENGTH) {
            return new RangeError(format('invalid %s. `state` array length is incompatible with seed section length. Expected: `%u`. Actual: `%u`.', s1, state.length - STATE_FIXED_LENGTH, state[SEED_SECTION_OFFSET]));
          }
          return null;
        }

        /**
        * Returns an initial PRNG state.
        *
        * @private
        * @param {Uint32Array} state - state array
        * @param {PositiveInteger} N - state size
        * @param {uinteger32} s - seed
        * @returns {Uint32Array} state array
        */
        function createState(state, N, s) {
          var i;

          // Set the first element of the state array to the provided seed:
          state[0] = s >>> 0; // equivalent to `s & 0xffffffffUL` in original C implementation

          // Initialize the remaining state array elements:
          for (i = 1; i < N; i++) {
            /*
            * In the original C implementation (see `init_genrand()`),
            *
            * ```c
            * mt[i] = (KNUTH_MULTIPLIER * (mt[i-1] ^ (mt[i-1] >> 30)) + i)
            * ```
            *
            * In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
            */
            s = state[i - 1] >>> 0; // asm type annotation
            s = (s ^ s >>> 30) >>> 0; // asm type annotation
            state[i] = umul(s, KNUTH_MULTIPLIER) + i >>> 0; // asm type annotation
          }
          return state;
        }

        /**
        * Initializes a PRNG state array according to a seed array.
        *
        * @private
        * @param {Uint32Array} state - state array
        * @param {NonNegativeInteger} N - state array length
        * @param {Collection} seed - seed array
        * @param {NonNegativeInteger} M - seed array length
        * @returns {Uint32Array} state array
        */
        function initState(state, N, seed, M) {
          var s;
          var i;
          var j;
          var k;
          i = 1;
          j = 0;
          for (k = max(N, M); k > 0; k--) {
            /*
            * In the original C implementation (see `init_by_array()`),
            *
            * ```c
            * mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1664525UL)) + seed[j] + j;
            * ```
            *
            * In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
            */
            s = state[i - 1] >>> 0; // asm type annotation
            s = (s ^ s >>> 30) >>> 0; // asm type annotation
            s = umul(s, MAGIC_MULTIPLIER_1) >>> 0; // asm type annotation
            state[i] = (state[i] >>> 0 ^ s) + seed[j] + j >>> 0; /* non-linear */ // asm type annotation

            i += 1;
            j += 1;
            if (i >= N) {
              state[0] = state[N - 1];
              i = 1;
            }
            if (j >= M) {
              j = 0;
            }
          }
          for (k = N - 1; k > 0; k--) {
            /*
            * In the original C implementation (see `init_by_array()`),
            *
            * ```c
            * mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1566083941UL)) - i;
            * ```
            *
            * In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
            */
            s = state[i - 1] >>> 0; // asm type annotation
            s = (s ^ s >>> 30) >>> 0; // asm type annotation
            s = umul(s, MAGIC_MULTIPLIER_2) >>> 0; // asm type annotation
            state[i] = (state[i] >>> 0 ^ s) - i >>> 0; /* non-linear */ // asm type annotation

            i += 1;
            if (i >= N) {
              state[0] = state[N - 1];
              i = 1;
            }
          }
          // Ensure a non-zero initial state array:
          state[0] = TWO_32; // MSB (most significant bit) is 1

          return state;
        }

        /**
        * Updates a PRNG's internal state by generating the next `N` words.
        *
        * @private
        * @param {Uint32Array} state - state array
        * @returns {Uint32Array} state array
        */
        function twist(state) {
          var w;
          var i;
          var j;
          var k;
          k = N - M;
          for (i = 0; i < k; i++) {
            w = state[i] & UPPER_MASK | state[i + 1] & LOWER_MASK;
            state[i] = state[i + M] ^ w >>> 1 ^ MAG01[w & ONE];
          }
          j = N - 1;
          for (; i < j; i++) {
            w = state[i] & UPPER_MASK | state[i + 1] & LOWER_MASK;
            state[i] = state[i - k] ^ w >>> 1 ^ MAG01[w & ONE];
          }
          w = state[j] & UPPER_MASK | state[0] & LOWER_MASK;
          state[j] = state[M - 1] ^ w >>> 1 ^ MAG01[w & ONE];
          return state;
        }

        // MAIN //

        /**
        * Returns a 32-bit Mersenne Twister pseudorandom number generator.
        *
        * ## Notes
        *
        * -   In contrast to the original C implementation, array seeds of length `1` are considered integer seeds. This ensures that the seed `[ 1234 ]` generates the same output as the seed `1234`. In the original C implementation, the two seeds would yield different output, which is **not** obvious from a user perspective.
        *
        * @param {Options} [options] - options
        * @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
        * @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
        * @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
        * @throws {TypeError} options argument must be an object
        * @throws {TypeError} a seed must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integers less than or equal to the maximum unsigned 32-bit integer
        * @throws {RangeError} a numeric seed must be a positive integer less than or equal to the maximum unsigned 32-bit integer
        * @throws {TypeError} state must be a `Uint32Array`
        * @throws {Error} must provide a valid state
        * @throws {TypeError} `copy` option must be a boolean
        * @returns {PRNG} Mersenne Twister PRNG
        *
        * @example
        * var mt19937 = factory();
        *
        * var v = mt19937();
        * // returns <number>
        *
        * @example
        * // Return a seeded Mersenne Twister PRNG:
        * var mt19937 = factory({
        *     'seed': 1234
        * });
        *
        * var v = mt19937();
        * // returns 822569775
        */
        function factory$2(options) {
          var STATE;
          var state;
          var opts;
          var seed;
          var slen;
          var err;
          opts = {};
          if (arguments.length) {
            if (!isObject(options)) {
              throw new TypeError(format('invalid argument. Options argument must be an object. Value: `%s`.', options));
            }
            if (hasOwnProp(options, 'copy')) {
              opts.copy = options.copy;
              if (!isBoolean(options.copy)) {
                throw new TypeError(format('invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy));
              }
            }
            if (hasOwnProp(options, 'state')) {
              state = options.state;
              opts.state = true;
              if (!isUint32Array(state)) {
                throw new TypeError(format('invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', state));
              }
              err = verifyState(state, true);
              if (err) {
                throw err;
              }
              if (opts.copy === false) {
                STATE = state;
              } else {
                STATE = new Uint32Array$1(state.length);
                gcopy(state.length, state, 1, STATE, 1);
              }
              // Create a state "view":
              state = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);

              // Create a seed "view":
              seed = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, state[SEED_SECTION_OFFSET]);
            }
            // If provided a PRNG state, we ignore the `seed` option...
            if (seed === void 0) {
              if (hasOwnProp(options, 'seed')) {
                seed = options.seed;
                opts.seed = true;
                if (isPositiveInteger(seed)) {
                  if (seed > MAX_SEED) {
                    throw new RangeError(format('invalid option. `%s` option must be a positive integer less than or equal to the maximum unsigned 32-bit integer. Option: `%u`.', 'seed', seed));
                  }
                  seed >>>= 0; // asm type annotation
                } else if (isCollection(seed) === false || seed.length < 1) {
                  throw new TypeError(format('invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', seed));
                } else if (seed.length === 1) {
                  seed = seed[0];
                  if (!isPositiveInteger(seed)) {
                    throw new TypeError(format('invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', seed));
                  }
                  if (seed > MAX_SEED) {
                    throw new RangeError(format('invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%u`.', 'seed', seed));
                  }
                  seed >>>= 0; // asm type annotation
                } else {
                  slen = seed.length;
                  STATE = new Uint32Array$1(STATE_FIXED_LENGTH + slen);

                  // Initialize sections:
                  STATE[0] = STATE_ARRAY_VERSION;
                  STATE[1] = NUM_STATE_SECTIONS;
                  STATE[STATE_SECTION_OFFSET] = N;
                  STATE[OTHER_SECTION_OFFSET] = 1;
                  STATE[OTHER_SECTION_OFFSET + 1] = N; // state index
                  STATE[SEED_SECTION_OFFSET] = slen;

                  // Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:
                  gcopy.ndarray(slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET + 1);

                  // Create a state "view":
                  state = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);

                  // Create a seed "view":
                  seed = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, slen);

                  // Initialize the internal PRNG state:
                  state = createState(state, N, SEED_ARRAY_INIT_STATE);
                  state = initState(state, N, seed, slen);
                }
              } else {
                seed = randuint32$1() >>> 0; // asm type annotation
              }
            }
          } else {
            seed = randuint32$1() >>> 0; // asm type annotation
          }
          if (state === void 0) {
            STATE = new Uint32Array$1(STATE_FIXED_LENGTH + 1);

            // Initialize sections:
            STATE[0] = STATE_ARRAY_VERSION;
            STATE[1] = NUM_STATE_SECTIONS;
            STATE[STATE_SECTION_OFFSET] = N;
            STATE[OTHER_SECTION_OFFSET] = 1;
            STATE[OTHER_SECTION_OFFSET + 1] = N; // state index
            STATE[SEED_SECTION_OFFSET] = 1;
            STATE[SEED_SECTION_OFFSET + 1] = seed;

            // Create a state "view":
            state = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);

            // Create a seed "view":
            seed = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);

            // Initialize the internal PRNG state:
            state = createState(state, N, seed);
          }
          // Note: property order matters in order to maintain consistency of PRNG "shape" (hidden classes).
          setReadOnly$1(mt19937, 'NAME', 'mt19937');
          setReadOnlyAccessor(mt19937, 'seed', getSeed);
          setReadOnlyAccessor(mt19937, 'seedLength', getSeedLength);
          setReadWriteAccessor(mt19937, 'state', getState, setState);
          setReadOnlyAccessor(mt19937, 'stateLength', getStateLength);
          setReadOnlyAccessor(mt19937, 'byteLength', getStateSize);
          setReadOnly$1(mt19937, 'toJSON', toJSON);
          setReadOnly$1(mt19937, 'MIN', 0);
          setReadOnly$1(mt19937, 'MAX', UINT32_MAX);
          setReadOnly$1(mt19937, 'normalized', normalized);
          setReadOnly$1(normalized, 'NAME', mt19937.NAME);
          setReadOnlyAccessor(normalized, 'seed', getSeed);
          setReadOnlyAccessor(normalized, 'seedLength', getSeedLength);
          setReadWriteAccessor(normalized, 'state', getState, setState);
          setReadOnlyAccessor(normalized, 'stateLength', getStateLength);
          setReadOnlyAccessor(normalized, 'byteLength', getStateSize);
          setReadOnly$1(normalized, 'toJSON', toJSON);
          setReadOnly$1(normalized, 'MIN', 0.0);
          setReadOnly$1(normalized, 'MAX', MAX_NORMALIZED);
          return mt19937;

          /**
          * Returns the PRNG seed.
          *
          * @private
          * @returns {PRNGSeedMT19937} seed
          */
          function getSeed() {
            var len = STATE[SEED_SECTION_OFFSET];
            return gcopy(len, seed, 1, new Uint32Array$1(len), 1);
          }

          /**
          * Returns the PRNG seed length.
          *
          * @private
          * @returns {PositiveInteger} seed length
          */
          function getSeedLength() {
            return STATE[SEED_SECTION_OFFSET];
          }

          /**
          * Returns the PRNG state length.
          *
          * @private
          * @returns {PositiveInteger} state length
          */
          function getStateLength() {
            return STATE.length;
          }

          /**
          * Returns the PRNG state size (in bytes).
          *
          * @private
          * @returns {PositiveInteger} state size (in bytes)
          */
          function getStateSize() {
            return STATE.byteLength;
          }

          /**
          * Returns the current PRNG state.
          *
          * ## Notes
          *
          * -   The PRNG state array is comprised of a preamble followed by `3` sections:
          *
          *     0.  preamble (version + number of sections)
          *     1.  internal PRNG state
          *     2.  auxiliary state information
          *     3.  PRNG seed
          *
          * -   The first element of the PRNG state array preamble is the state array schema version.
          *
          * -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).
          *
          * -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
          *
          * @private
          * @returns {PRNGStateMT19937} current state
          */
          function getState() {
            var len = STATE.length;
            return gcopy(len, STATE, 1, new Uint32Array$1(len), 1);
          }

          /**
          * Sets the PRNG state.
          *
          * ## Notes
          *
          * -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
          * -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
          *
          * @private
          * @param {PRNGStateMT19937} s - generator state
          * @throws {TypeError} must provide a `Uint32Array`
          * @throws {Error} must provide a valid state
          */
          function setState(s) {
            var err;
            if (!isUint32Array(s)) {
              throw new TypeError(format('invalid argument. Must provide a Uint32Array. Value: `%s`.', s));
            }
            err = verifyState(s, false);
            if (err) {
              throw err;
            }
            if (opts.copy === false) {
              if (opts.state && s.length === STATE.length) {
                gcopy(s.length, s, 1, STATE, 1); // update current shared state
              } else {
                STATE = s; // point to new shared state
                opts.state = true; // setting this flag allows updating a shared state even if a state array was not provided at PRNG creation
              }
            } else {
              // Check if we can reuse allocated memory...
              if (s.length !== STATE.length) {
                STATE = new Uint32Array$1(s.length); // reallocate
              }
              gcopy(s.length, s, 1, STATE, 1);
            }
            // Create a new state "view":
            state = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);

            // Create a new seed "view":
            seed = new Uint32Array$1(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, STATE[SEED_SECTION_OFFSET]);
          }

          /**
          * Serializes the pseudorandom number generator as a JSON object.
          *
          * ## Notes
          *
          * -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
          *
          * @private
          * @returns {Object} JSON representation
          */
          function toJSON() {
            var out = {};
            out.type = 'PRNG';
            out.name = mt19937.NAME;
            out.state = typedarray2json(STATE);
            out.params = [];
            return out;
          }

          /**
          * Generates a pseudorandom integer on the interval \\( [0, 2^{32}) \\).
          *
          * @private
          * @returns {uinteger32} pseudorandom integer
          *
          * @example
          * var r = mt19937();
          * // returns <number>
          */
          function mt19937() {
            var r;
            var i;

            // Retrieve the current state index:
            i = STATE[OTHER_SECTION_OFFSET + 1];

            // Determine whether we need to update the PRNG state:
            if (i >= N) {
              state = twist(state);
              i = 0;
            }
            // Get the next word of "raw"/untempered state:
            r = state[i];

            // Update the state index:
            STATE[OTHER_SECTION_OFFSET + 1] = i + 1;

            // Tempering transform to compensate for the reduced dimensionality of equidistribution:
            r ^= r >>> 11;
            r ^= r << 7 & TEMPERING_COEFFICIENT_1;
            r ^= r << 15 & TEMPERING_COEFFICIENT_2;
            r ^= r >>> 18;
            return r >>> 0;
          }

          /**
          * Generates a pseudorandom number on the interval \\( [0, 1) \\).
          *
          * ## Notes
          *
          * -   The original C implementation credits Isaku Wada for this algorithm (2002/01/09).
          *
          * @private
          * @returns {number} pseudorandom number
          *
          * @example
          * var r = normalized();
          * // returns <number>
          */
          function normalized() {
            var x = mt19937() >>> 5;
            var y = mt19937() >>> 6;
            return (x * TWO_26 + y) * FLOAT64_NORMALIZATION_CONSTANT;
          }
        }

        // EXPORTS //

        var factory_1 = factory$2;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        // MODULES //

        var factory$1 = factory_1;
        var randuint32 = rand_uint32;

        // MAIN //

        /**
        * Generates a pseudorandom integer on the interval \\( [0, 2^{32}) \\).
        *
        * ## Method
        *
        * -   When generating normalized double-precision floating-point numbers, we first generate two pseudorandom integers \\( x \\) and \\( y \\) on the interval \\( [0, 2^{32}) \\) for a combined \\( 64 \\) random bits.
        *
        * -   We would like \\( 53 \\) random bits to generate a 53-bit precision integer and, thus, want to discard \\( 11 \\) of the generated bits.
        *
        * -   We do so by discarding \\( 5 \\) bits from \\( x \\) and \\( 6 \\) bits from \\( y \\).
        *
        * -   Accordingly, \\( x \\) contains \\( 27 \\) random bits, which are subsequently shifted left \\( 26 \\) bits (multiplied by \\( 2^{26} \\), and \\( y \\) contains \\( 26 \\) random bits to fill in the lower \\( 26 \\) bits. When summed, they combine to comprise \\( 53 \\) random bits of a double-precision floating-point integer.
        *
        * -   As an example, suppose, for the sake of argument, the 32-bit PRNG generates the maximum unsigned 32-bit integer \\( 2^{32}-1 \\) twice in a row. Then,
        *
        *     ```javascript
        *     x = 4294967295 >>> 5; // 00000111111111111111111111111111
        *     y = 4294967295 >>> 6; // 00000011111111111111111111111111
        *     ```
        *
        *     Multiplying \\( x \\) by \\( 2^{26} \\) returns \\( 9007199187632128 \\), which, in binary, is
        *
        *     ```binarystring
        *     0 10000110011 11111111111111111111 11111100000000000000000000000000
        *     ```
        *
        *     Adding \\( y \\) yields \\( 9007199254740991 \\) (the maximum "safe" double-precision floating-point integer value), which, in binary, is
        *
        *     ```binarystring
        *     0 10000110011 11111111111111111111 11111111111111111111111111111111
        *     ```
        *
        * -   Similarly, suppose the 32-bit PRNG generates the following values
        *
        *     ```javascript
        *     x = 1 >>> 5;  // 0 => 00000000000000000000000000000000
        *     y = 64 >>> 6; // 1 => 00000000000000000000000000000001
        *     ```
        *
        *     Multiplying \\( x \\) by \\( 2^{26} \\) returns \\( 0 \\), which, in binary, is
        *
        *     ```binarystring
        *     0 00000000000 00000000000000000000 00000000000000000000000000000000
        *     ```
        *
        *     Adding \\( y \\) yields \\( 1 \\), which, in binary, is
        *
        *     ```binarystring
        *     0 01111111111 00000000000000000000 00000000000000000000000000000000
        *     ```
        *
        * -   As different combinations of \\( x \\) and \\( y \\) are generated, different combinations of double-precision floating-point exponent and significand bits will be toggled, thus generating pseudorandom double-precision floating-point numbers.
        *
        * ## References
        *
        * -   Matsumoto, Makoto, and Takuji Nishimura. 1998. "Mersenne Twister: A 623-dimensionally Equidistributed Uniform Pseudo-random Number Generator." _ACM Transactions on Modeling and Computer Simulation_ 8 (1). New York, NY, USA: ACM: 3–30. doi:[10.1145/272991.272995][@matsumoto:1998a].
        * -   Harase, Shin. 2017. "Conversion of Mersenne Twister to double-precision floating-point numbers." _ArXiv_ abs/1708.06018 (September). <https://arxiv.org/abs/1708.06018>.
        *
        * [@matsumoto:1998a]: https://doi.org/10.1145/272991.272995
        *
        * @function mt19937
        * @type {PRNG}
        * @returns {PositiveInteger} pseudorandom integer
        *
        * @example
        * var v = mt19937();
        * // returns <number>
        */
        var mt19937 = factory$1({
          'seed': randuint32()
        });

        // EXPORTS //

        var main$1 = mt19937;

        /**
        * @license Apache-2.0
        *
        * Copyright (c) 2018 The Stdlib Authors.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *    http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        /**
        * A 32-bit Mersenne Twister pseudorandom number generator.
        *
        * @module @stdlib/random-base-mt19937
        *
        * @example
        * var mt19937 = require( '@stdlib/random-base-mt19937' );
        *
        * var v = mt19937();
        * // returns <number>
        *
        * @example
        * var factory = require( '@stdlib/random-base-mt19937' ).factory;
        *
        * var mt19937 = factory({
        *     'seed': 1234
        * });
        *
        * var v = mt19937();
        * // returns 822569775
        */

        // MODULES //

        var setReadOnly = lib$1J;
        var main = main$1;
        var factory = factory_1;

        // MAIN //

        setReadOnly(main, 'factory', factory);

        // EXPORTS //

        var lib = main;
        var __defProp$3 = Object.defineProperty;
        var __defNormalProp$3 = function __defNormalProp$3(obj, key, value) {
          return key in obj ? __defProp$3(obj, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          }) : obj[key] = value;
        };
        var __publicField$2 = function __publicField$2(obj, key, value) {
          return __defNormalProp$3(obj, key + "", value);
        };
        var StatTracker = /*#__PURE__*/function () {
          function StatTracker() {
            _classCallCheck(this, StatTracker);
            __publicField$2(this, "data", {});
          }
          /**
           * Clear all sample groups
           */
          return _createClass(StatTracker, [{
            key: "reset",
            value: function reset() {
              this.data = {};
            }
            /**
             * Add a value to a sample group
             *
             * @param sampleGroup
             * @param value
             */
          }, {
            key: "add",
            value: function add(sampleGroup, value) {
              if (!this.data[sampleGroup]) {
                this.data[sampleGroup] = [];
              }
              this.data[sampleGroup].push(value);
            }
            /**
             * Get the percentile value for a sample group
             *
             * @param sampleGroup
             * @param percentile
             * @returns
             */
          }, {
            key: "getPercentile",
            value: function getPercentile(sampleGroup, percentile) {
              var values = this.data[sampleGroup];
              if (!values) {
                return 0;
              }
              values.sort(function (a, b) {
                return a - b;
              });
              var index = Math.floor(percentile / 100 * values.length);
              return values[index];
            }
            /**
             * Get the standard deviation for a sample group
             *
             * @param sampleGroup
             * @returns
             */
          }, {
            key: "getStdDev",
            value: function getStdDev(sampleGroup) {
              var values = this.data[sampleGroup];
              if (!values) {
                return 0;
              }
              var mean = values.reduce(function (a, b) {
                return a + b;
              }, 0) / values.length;
              var variance = values.map(function (value) {
                return Math.pow(value - mean, 2);
              }).reduce(function (a, b) {
                return a + b;
              }) / values.length;
              return Math.sqrt(variance);
            }
            /**
             * Get the average value for a sample group
             *
             * @param sampleGroup
             * @returns
             */
          }, {
            key: "getAverage",
            value: function getAverage(sampleGroup) {
              var values = this.data[sampleGroup];
              if (!values) {
                return 0;
              }
              return values.reduce(function (a, b) {
                return a + b;
              }, 0) / values.length;
            }
            /**
             * Get the sample count for a sample group
             *
             * @param sampleGroup
             * @returns
             */
          }, {
            key: "getCount",
            value: function getCount(sampleGroup) {
              var values = this.data[sampleGroup];
              if (!values) {
                return 0;
              }
              return values.length;
            }
            /**
             * Get the names of all the sample groups
             *
             * @returns
             */
          }, {
            key: "getSampleGroups",
            value: function getSampleGroups() {
              return Object.keys(this.data);
            }
          }]);
        }();
        function installFonts(stage) {
          stage.fontManager.addFontFace(new WebTrFontFace({
            fontFamily: "NotoSans",
            descriptors: {},
            fontUrl: "./fonts/NotoSans-Regular.ttf",
            metrics: {
              ascender: 1069,
              descender: -293,
              lineGap: 0,
              unitsPerEm: 1e3
            }
          }));
          stage.fontManager.addFontFace(new WebTrFontFace({
            fontFamily: "Ubuntu",
            descriptors: {},
            fontUrl: "./fonts/Ubuntu-Regular.ttf",
            metrics: {
              ascender: 776,
              descender: -185,
              lineGap: 56,
              unitsPerEm: 1e3
            }
          }));
          stage.fontManager.addFontFace(new WebTrFontFace({
            fontFamily: "Ubuntu-No-Metrics",
            descriptors: {},
            fontUrl: "./fonts/Ubuntu-Regular.ttf"
          }));
          var ubuntuModifiedMetrics = {
            ascender: 850,
            descender: -250,
            lineGap: 60,
            unitsPerEm: 1e3
          };
          stage.fontManager.addFontFace(new WebTrFontFace({
            fontFamily: "Ubuntu-Modified-Metrics",
            descriptors: {},
            fontUrl: "./fonts/Ubuntu-Regular.ttf",
            metrics: ubuntuModifiedMetrics
          }));
          if (stage.renderer.mode === "webgl") {
            stage.fontManager.addFontFace(new SdfTrFontFace("ssdf", {
              fontFamily: "NotoSans",
              descriptors: {},
              atlasUrl: "./fonts/NotoSans-Regular.ssdf.png",
              atlasDataUrl: "./fonts/NotoSans-Regular.ssdf.json",
              stage: stage,
              metrics: {
                ascender: 1e3,
                descender: -200,
                lineGap: 0,
                unitsPerEm: 1e3
              }
            }));
            stage.fontManager.addFontFace(new SdfTrFontFace("msdf", {
              fontFamily: "Ubuntu",
              descriptors: {},
              atlasUrl: "./fonts/Ubuntu-Regular.msdf.png",
              atlasDataUrl: "./fonts/Ubuntu-Regular.msdf.json",
              stage: stage
              // Instead of suppling `metrics` this font will rely on the ones
              // encoded in the json file under `lightningMetrics`.
            }));
            stage.fontManager.addFontFace(new SdfTrFontFace("msdf", {
              fontFamily: "Ubuntu-Modified-Metrics",
              descriptors: {},
              atlasUrl: "./fonts/Ubuntu-Regular.msdf.png",
              atlasDataUrl: "./fonts/Ubuntu-Regular.msdf.json",
              stage: stage,
              metrics: ubuntuModifiedMetrics
            }));
            stage.fontManager.addFontFace(new SdfTrFontFace("ssdf", {
              fontFamily: "Ubuntu-ssdf",
              descriptors: {},
              atlasUrl: "./fonts/Ubuntu-Regular.ssdf.png",
              atlasDataUrl: "./fonts/Ubuntu-Regular.ssdf.json",
              stage: stage,
              metrics: {
                ascender: 776,
                descender: -185,
                lineGap: 56,
                unitsPerEm: 1e3
              }
            }));
          }
        }
        var __defProp$2 = Object.defineProperty;
        var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
        var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
        var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
        var __defNormalProp$2 = function __defNormalProp$2(obj, key, value) {
          return key in obj ? __defProp$2(obj, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          }) : obj[key] = value;
        };
        var __spreadValues$1 = function __spreadValues$1(a, b) {
          for (var prop in b || (b = {})) if (__hasOwnProp$1.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);
          if (__getOwnPropSymbols$1) {
            var _iterator10 = _createForOfIteratorHelper(__getOwnPropSymbols$1(b)),
              _step10;
            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var prop = _step10.value;
                if (__propIsEnum$1.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          }
          return a;
        };
        var __publicField$1 = function __publicField$1(obj, key, value) {
          return __defNormalProp$2(obj, key + "", value);
        };
        var Component = /*#__PURE__*/function () {
          function Component(renderer, nodeProps) {
            _classCallCheck(this, Component);
            this.renderer = renderer;
            __publicField$1(this, "node");
            this.node = renderer.createNode(__spreadValues$1({}, nodeProps));
          }
          return _createClass(Component, [{
            key: "x",
            get: function get() {
              return this.node.x;
            },
            set: function set(x) {
              this.node.x = x;
            }
          }, {
            key: "y",
            get: function get() {
              return this.node.y;
            },
            set: function set(y) {
              this.node.y = y;
            }
          }, {
            key: "width",
            get: function get() {
              return this.node.width;
            },
            set: function set(width) {
              this.node.width = width;
            }
          }, {
            key: "height",
            get: function get() {
              return this.node.height;
            },
            set: function set(height) {
              this.node.height = height;
            }
          }]);
        }();
        exports("C", Component);
        var __defProp$1 = Object.defineProperty;
        var __defNormalProp$1 = function __defNormalProp$1(obj, key, value) {
          return key in obj ? __defProp$1(obj, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          }) : obj[key] = value;
        };
        var __publicField = function __publicField(obj, key, value) {
          return __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
        };
        var MARGIN = 20;
        var BAR_WIDTH = 20;
        var BAR_HEIGHT = 300;
        var INFO_TEXT_SIZE = 20;
        var INFO_TEXT_LINEHEIGHT = INFO_TEXT_SIZE * 1.2;
        function bytesToMb(bytes) {
          return (bytes / 1024 / 1024).toFixed(2);
        }
        var MemMonitor = /*#__PURE__*/function (_Component) {
          function MemMonitor(renderer, props) {
            var _this65;
            _classCallCheck(this, MemMonitor);
            _this65 = _callSuper(this, MemMonitor, [renderer, props]);
            // private memTextNode: ITextNode;
            __publicField(_this65, "bar");
            __publicField(_this65, "renderableMemBar");
            __publicField(_this65, "memUsedBar");
            __publicField(_this65, "criticalText");
            __publicField(_this65, "criticalTick");
            __publicField(_this65, "targetText");
            __publicField(_this65, "targetTick");
            __publicField(_this65, "criticalInfoText");
            __publicField(_this65, "targetInfoText");
            __publicField(_this65, "memUsedText");
            __publicField(_this65, "renderableMemUsedText");
            __publicField(_this65, "cacheInfoText");
            __publicField(_this65, "intervalHandle", null);
            __publicField(_this65, "_interval", 0);
            _this65.interval = props.interval || 500;
            _this65.node.color = 4294967210;
            _this65.node.width = 400;
            _this65.node.height = BAR_HEIGHT + MARGIN * 2;
            _this65.bar = renderer.createNode({
              x: _this65.node.width - BAR_WIDTH - MARGIN,
              y: MARGIN,
              width: BAR_WIDTH,
              height: BAR_HEIGHT,
              parent: _this65.node,
              color: 0
            });
            _this65.memUsedBar = renderer.createNode({
              x: 0,
              y: 0,
              width: BAR_WIDTH,
              height: 0,
              parent: _this65.bar,
              color: 65535
            });
            _this65.renderableMemBar = renderer.createNode({
              x: 0,
              y: 0,
              width: BAR_WIDTH,
              height: 0,
              parent: _this65.bar,
              color: 4278255615
            });
            renderer.createNode({
              width: BAR_WIDTH,
              height: BAR_HEIGHT,
              rtt: true,
              shader: renderer.createShader("DynamicShader", {
                effects: [{
                  name: "e1",
                  type: "border",
                  props: {
                    color: 204,
                    width: 4
                  }
                }]
              }),
              parent: _this65.bar
            });
            _this65.criticalText = renderer.createTextNode({
              x: -15,
              y: 0,
              text: "Critical",
              fontFamily: "Ubuntu",
              parent: _this65.bar,
              fontSize: 20,
              color: 4278190335,
              mountX: 1,
              mountY: 0.5
            });
            _this65.criticalTick = renderer.createNode({
              x: BAR_WIDTH / 2,
              y: 0,
              width: BAR_WIDTH * 2,
              height: 2,
              parent: _this65.bar,
              color: 4278190335,
              mount: 0.5
            });
            _this65.targetText = renderer.createTextNode({
              x: -15,
              y: 0,
              text: "Target",
              fontFamily: "Ubuntu",
              parent: _this65.bar,
              fontSize: 20,
              color: 255,
              mountX: 1,
              mountY: 0.5
            });
            _this65.targetTick = renderer.createNode({
              x: BAR_WIDTH / 2,
              y: 0,
              width: BAR_WIDTH * 2,
              height: 2,
              parent: _this65.bar,
              color: 255,
              mount: 0.5
            });
            var numLines = 9;
            var infoTextY = _this65.node.height - MARGIN - INFO_TEXT_LINEHEIGHT * numLines;
            _this65.criticalInfoText = renderer.createTextNode({
              x: MARGIN,
              y: infoTextY,
              text: "",
              fontFamily: "Ubuntu",
              parent: _this65.node,
              fontSize: INFO_TEXT_SIZE,
              lineHeight: INFO_TEXT_LINEHEIGHT,
              color: 4278190335
            });
            _this65.targetInfoText = renderer.createTextNode({
              x: MARGIN,
              y: infoTextY + INFO_TEXT_LINEHEIGHT,
              text: "",
              fontFamily: "Ubuntu",
              parent: _this65.node,
              fontSize: INFO_TEXT_SIZE,
              lineHeight: INFO_TEXT_LINEHEIGHT,
              color: 255
            });
            _this65.memUsedText = renderer.createTextNode({
              x: MARGIN,
              y: infoTextY + INFO_TEXT_LINEHEIGHT * 2,
              text: "",
              fontFamily: "Ubuntu",
              parent: _this65.node,
              fontSize: INFO_TEXT_SIZE,
              lineHeight: INFO_TEXT_LINEHEIGHT,
              color: 65535
            });
            _this65.renderableMemUsedText = renderer.createTextNode({
              x: MARGIN,
              y: infoTextY + INFO_TEXT_LINEHEIGHT * 5,
              text: "",
              fontFamily: "Ubuntu",
              parent: _this65.node,
              fontSize: INFO_TEXT_SIZE,
              lineHeight: INFO_TEXT_LINEHEIGHT,
              color: 4278255615
            });
            _this65.cacheInfoText = renderer.createTextNode({
              x: MARGIN,
              y: infoTextY + INFO_TEXT_LINEHEIGHT * 8,
              text: "",
              fontFamily: "Ubuntu",
              parent: _this65.node,
              fontSize: INFO_TEXT_SIZE,
              lineHeight: INFO_TEXT_LINEHEIGHT,
              color: 255
            });
            var payload = _this65.renderer.stage.txMemManager.getMemoryInfo();
            var criticalThreshold = payload.criticalThreshold,
              targetThreshold = payload.targetThreshold;
            var targetFraction = targetThreshold / criticalThreshold;
            _this65.targetTick.y = BAR_HEIGHT - BAR_HEIGHT * targetFraction;
            _this65.targetText.y = _this65.targetTick.y;
            _this65.targetInfoText.text = "Target: ".concat(bytesToMb(targetThreshold), " mb (").concat((targetFraction * 100).toFixed(1), "%)");
            _this65.criticalInfoText.text = "Critical: ".concat(bytesToMb(criticalThreshold), " mb");
            _this65.update();
            return _this65;
          }
          _inherits(MemMonitor, _Component);
          return _createClass(MemMonitor, [{
            key: "update",
            value: function update() {
              var payload = this.renderer.stage.txMemManager.getMemoryInfo();
              var criticalThreshold = payload.criticalThreshold,
                memUsed = payload.memUsed,
                renderableMemUsed = payload.renderableMemUsed;
              var renderableMemoryFraction = renderableMemUsed / criticalThreshold;
              var memUsedFraction = memUsed / criticalThreshold;
              this.memUsedBar.height = BAR_HEIGHT * memUsedFraction;
              this.renderableMemBar.height = BAR_HEIGHT * renderableMemoryFraction;
              this.renderableMemBar.y = BAR_HEIGHT - this.renderableMemBar.height;
              this.memUsedBar.y = BAR_HEIGHT - this.memUsedBar.height;
              this.memUsedText.text = "\nTextures Loaded\n- Size: ".concat(bytesToMb(memUsed), " mb (").concat((memUsedFraction * 100).toFixed(1), "%)\n- Count: ").concat(payload.loadedTextures, "\n").trim();
              this.renderableMemUsedText.text = "\nRenderable Loaded\n- ".concat(bytesToMb(renderableMemUsed), " mb (").concat((renderableMemoryFraction * 100).toFixed(1), "%)\n- Count: ").concat(payload.renderableTexturesLoaded, "\n").trim();
              this.cacheInfoText.text = "Cache Size: ".concat(this.renderer.stage.txManager.keyCache.size);
            }
          }, {
            key: "interval",
            get: function get() {
              return this._interval;
            },
            set: function set(interval) {
              var _this66 = this;
              this._interval = interval;
              if (this.intervalHandle) {
                clearInterval(this.intervalHandle);
              }
              this.intervalHandle = setInterval(function () {
                _this66.update();
              }, this._interval);
            }
          }]);
        }(Component);
        var __defProp = Object.defineProperty;
        var __defProps = Object.defineProperties;
        var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
        var __getOwnPropSymbols = Object.getOwnPropertySymbols;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __propIsEnum = Object.prototype.propertyIsEnumerable;
        var __defNormalProp = function __defNormalProp(obj, key, value) {
          return key in obj ? __defProp(obj, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          }) : obj[key] = value;
        };
        var __spreadValues = function __spreadValues(a, b) {
          for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
          if (__getOwnPropSymbols) {
            var _iterator11 = _createForOfIteratorHelper(__getOwnPropSymbols(b)),
              _step11;
            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var prop = _step11.value;
                if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          }
          return a;
        };
        var __spreadProps = function __spreadProps(a, b) {
          return __defProps(a, __getOwnPropDescs(b));
        };
        var __async = function __async(__this, __arguments, generator) {
          return new Promise(function (resolve, reject) {
            var fulfilled = function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            };
            var rejected = function rejected(value) {
              try {
                step(generator.throw(value));
              } catch (e) {
                reject(e);
              }
            };
            var step = function step(x) {
              return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
            };
            step((generator = generator.apply(__this, __arguments)).next());
          });
        };
        var getTestPath = function getTestPath(testName) {
          return "./tests/".concat(testName, ".ts");
        };
        var testRegex = /\/tests\/(.*)\.ts$/;
        var getTestName = function getTestName(path) {
          var match = path.match(testRegex);
          if (!match) {
            throw new Error("Invalid test path: ".concat(path));
          }
          return match[1];
        };
        var testModules = /* #__PURE__ */Object.assign({
          "./tests/absolute-position.ts": function _tests_absolutePositionTs() {
            return __vitePreload(function () {
              return module.import('./absolute-position-legacy-BiV2CXrS.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/alpha-blending.ts": function _tests_alphaBlendingTs() {
            return __vitePreload(function () {
              return module.import('./alpha-blending-legacy-Rnj4xQjZ.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/alpha.ts": function _tests_alphaTs() {
            return __vitePreload(function () {
              return module.import('./alpha-legacy-CpjC961x.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/animation-events.ts": function _tests_animationEventsTs() {
            return __vitePreload(function () {
              return module.import('./animation-events-legacy-B5CXl-3H.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/animation.ts": function _tests_animationTs() {
            return __vitePreload(function () {
              return module.import('./animation-legacy-CJrEpO24.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/child-positioning.ts": function _tests_childPositioningTs() {
            return __vitePreload(function () {
              return module.import('./child-positioning-legacy-VHCre1N5.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/clipping-mutations.ts": function _tests_clippingMutationsTs() {
            return __vitePreload(function () {
              return module.import('./clipping-mutations-legacy-CeejGKcS.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/clipping.ts": function _tests_clippingTs() {
            return __vitePreload(function () {
              return module.import('./clipping-legacy-nQ3gQJb7.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/destroy.ts": function _tests_destroyTs() {
            return __vitePreload(function () {
              return module.import('./destroy-legacy-C6C9tAyK.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/ds-effect-radial-progress.ts": function _tests_dsEffectRadialProgressTs() {
            return __vitePreload(function () {
              return module.import('./ds-effect-radial-progress-legacy-BZ6nhFWz.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/dynamic-shader-circle-border-radius.ts": function _tests_dynamicShaderCircleBorderRadiusTs() {
            return __vitePreload(function () {
              return module.import('./dynamic-shader-circle-border-radius-legacy-Bthanjv2.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/dynamic-shader.ts": function _tests_dynamicShaderTs() {
            return __vitePreload(function () {
              return module.import('./dynamic-shader-legacy-D7hzcKca.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/gradient.ts": function _tests_gradientTs() {
            return __vitePreload(function () {
              return module.import('./gradient-legacy-C07BdGxS.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/hole-punch-effect.ts": function _tests_holePunchEffectTs() {
            return __vitePreload(function () {
              return module.import('./hole-punch-effect-legacy-pJDwGHE_.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/inspector.ts": function _tests_inspectorTs() {
            return __vitePreload(function () {
              return module.import('./inspector-legacy-BkZgswvv.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/mount-pivot.ts": function _tests_mountPivotTs() {
            return __vitePreload(function () {
              return module.import('./mount-pivot-legacy-Bps1bkng.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/no-rtt.ts": function _tests_noRttTs() {
            return __vitePreload(function () {
              return module.import('./no-rtt-legacy-BqMc8CnL.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/render-bounds.ts": function _tests_renderBoundsTs() {
            return __vitePreload(function () {
              return module.import('./render-bounds-legacy-Bj5bR6mm.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/resize-mode.ts": function _tests_resizeModeTs() {
            return __vitePreload(function () {
              return module.import('./resize-mode-legacy-X_XBpI_G.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/robot.ts": function _tests_robotTs() {
            return __vitePreload(function () {
              return module.import('./robot-legacy-BA8fCb80.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/rotation.ts": function _tests_rotationTs() {
            return __vitePreload(function () {
              return module.import('./rotation-legacy-Bs4M0H-K.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/rtt-dimension.ts": function _tests_rttDimensionTs() {
            return __vitePreload(function () {
              return module.import('./rtt-dimension-legacy-CUZcde_s.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/rtt-reflection.ts": function _tests_rttReflectionTs() {
            return __vitePreload(function () {
              return module.import('./rtt-reflection-legacy-CS1hn2-S.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/rtt.ts": function _tests_rttTs() {
            return __vitePreload(function () {
              return module.import('./rtt-legacy-D4pE-vQH.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/scaling-animations.ts": function _tests_scalingAnimationsTs() {
            return __vitePreload(function () {
              return module.import('./scaling-animations-legacy-B5tzDGTL.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/scaling.ts": function _tests_scalingTs() {
            return __vitePreload(function () {
              return module.import('./scaling-legacy-DKo_4lC0.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/shader-animation.ts": function _tests_shaderAnimationTs() {
            return __vitePreload(function () {
              return module.import('./shader-animation-legacy-DUFruRs8.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/stress-multi-level-clipping.ts": function _tests_stressMultiLevelClippingTs() {
            return __vitePreload(function () {
              return module.import('./stress-multi-level-clipping-legacy-DRtFSHzv.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/stress-multi-level.ts": function _tests_stressMultiLevelTs() {
            return __vitePreload(function () {
              return module.import('./stress-multi-level-legacy-iqcoCgRh.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/stress-multi-texture.ts": function _tests_stressMultiTextureTs() {
            return __vitePreload(function () {
              return module.import('./stress-multi-texture-legacy-DqiptoDS.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/stress-single-level-text.ts": function _tests_stressSingleLevelTextTs() {
            return __vitePreload(function () {
              return module.import('./stress-single-level-text-legacy-BbD4iL-S.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/stress-single-level.ts": function _tests_stressSingleLevelTs() {
            return __vitePreload(function () {
              return module.import('./stress-single-level-legacy-D8D6SFTP.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/test.ts": function _tests_testTs() {
            return __vitePreload(function () {
              return module.import('./test-legacy-BmALeZQn.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-align.ts": function _tests_textAlignTs() {
            return __vitePreload(function () {
              return module.import('./text-align-legacy-DMc39BZh.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-alpha.ts": function _tests_textAlphaTs() {
            return __vitePreload(function () {
              return module.import('./text-alpha-legacy-BaCmDur7.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-baseline.ts": function _tests_textBaselineTs() {
            return __vitePreload(function () {
              return module.import('./text-baseline-legacy-8sYrPu8H.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-canvas-font-no-metrics.ts": function _tests_textCanvasFontNoMetricsTs() {
            return __vitePreload(function () {
              return module.import('./text-canvas-font-no-metrics-legacy-hh4CnwKD.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-canvas.ts": function _tests_textCanvasTs() {
            return __vitePreload(function () {
              return module.import('./text-canvas-legacy-DmHNc46G.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-contain.ts": function _tests_textContainTs() {
            return __vitePreload(function () {
              return module.import('./text-contain-legacy-DTw_1t7I.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-dimensions.ts": function _tests_textDimensionsTs() {
            return __vitePreload(function () {
              return module.import('./text-dimensions-legacy-BRcF0nTB.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-events.ts": function _tests_textEventsTs() {
            return __vitePreload(function () {
              return module.import('./text-events-legacy-Dq_i67R6.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-layout-consistency-modified-metrics.ts": function _tests_textLayoutConsistencyModifiedMetricsTs() {
            return __vitePreload(function () {
              return module.import('./text-layout-consistency-modified-metrics-legacy-CVV-697L.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-layout-consistency.ts": function _tests_textLayoutConsistencyTs() {
            return __vitePreload(function () {
              return module.import('./text-layout-consistency-legacy-CJQjJOEA.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-line-height.ts": function _tests_textLineHeightTs() {
            return __vitePreload(function () {
              return module.import('./text-line-height-legacy-DSoeKc41.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-max-lines.ts": function _tests_textMaxLinesTs() {
            return __vitePreload(function () {
              return module.import('./text-max-lines-legacy-DjXrhAkh.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-offscreen-move.ts": function _tests_textOffscreenMoveTs() {
            return __vitePreload(function () {
              return module.import('./text-offscreen-move-legacy-Q71MVGO0.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-overflow-suffix.ts": function _tests_textOverflowSuffixTs() {
            return __vitePreload(function () {
              return module.import('./text-overflow-suffix-legacy-DGHpcoQb.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-rotation.ts": function _tests_textRotationTs() {
            return __vitePreload(function () {
              return module.import('./text-rotation-legacy-DivBT_N9.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-scaling.ts": function _tests_textScalingTs() {
            return __vitePreload(function () {
              return module.import('./text-scaling-legacy-CKmtEFt9.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-ssdf.ts": function _tests_textSsdfTs() {
            return __vitePreload(function () {
              return module.import('./text-ssdf-legacy-CnQ4IY22.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text-vertical-align.ts": function _tests_textVerticalAlignTs() {
            return __vitePreload(function () {
              return module.import('./text-vertical-align-legacy-CZhYimzz.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/text.ts": function _tests_textTs() {
            return __vitePreload(function () {
              return module.import('./text-legacy-KmRjdWcS.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/texture-autosize.ts": function _tests_textureAutosizeTs() {
            return __vitePreload(function () {
              return module.import('./texture-autosize-legacy-D-7Q2-Dm.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/texture-cleanup-critical.ts": function _tests_textureCleanupCriticalTs() {
            return __vitePreload(function () {
              return module.import('./texture-cleanup-critical-legacy-D3hvwDMS.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/texture-cleanup-idle.ts": function _tests_textureCleanupIdleTs() {
            return __vitePreload(function () {
              return module.import('./texture-cleanup-idle-legacy-guzXdJI_.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/texture-factory.ts": function _tests_textureFactoryTs() {
            return __vitePreload(function () {
              return module.import('./texture-factory-legacy-DXDnGGmk.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/texture-source.ts": function _tests_textureSourceTs() {
            return __vitePreload(function () {
              return module.import('./texture-source-legacy-DQR0UWEX.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/texture-svg.ts": function _tests_textureSvgTs() {
            return __vitePreload(function () {
              return module.import('./texture-svg-legacy-j8YWrSit.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/textures.ts": function _tests_texturesTs() {
            return __vitePreload(function () {
              return module.import('./textures-legacy-ClhyZEso.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/tx-compression.ts": function _tests_txCompressionTs() {
            return __vitePreload(function () {
              return module.import('./tx-compression-legacy-Z3C1xjKR.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/viewport-events-canvas.ts": function _tests_viewportEventsCanvasTs() {
            return __vitePreload(function () {
              return module.import('./viewport-events-canvas-legacy-DuVxuECt.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/viewport-events.ts": function _tests_viewportEventsTs() {
            return __vitePreload(function () {
              return module.import('./viewport-events-legacy-DHFrqG8m.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          },
          "./tests/zIndex.ts": function _tests_zIndexTs() {
            return __vitePreload(function () {
              return module.import('./zIndex-legacy-Hu4P8qpq.js');
            }, false ? __VITE_PRELOAD__ : void 0);
          }
        });
        var appWidth = 1920;
        var appHeight = 1080;
        var defaultResolution = 720;
        var defaultPhysicalPixelRatio = 1;
        (function () {
          return __async(void 0, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
            var urlParams, automation, test, showOverlay, showMemMonitor, logFps, enableContextSpy, perfMultiplier, resolution, enableInspector, physicalPixelRatio, logicalPixelRatio, renderMode;
            return _regeneratorRuntime().wrap(function _callee16$(_context17) {
              while (1) switch (_context17.prev = _context17.next) {
                case 0:
                  urlParams = new URLSearchParams(window.location.search);
                  automation = urlParams.get("automation") === "true";
                  test = urlParams.get("test") || (automation ? "*" : "test");
                  showOverlay = urlParams.get("overlay") !== "false";
                  showMemMonitor = urlParams.get("monitor") === "true";
                  logFps = urlParams.get("fps") === "true";
                  enableContextSpy = urlParams.get("contextSpy") === "true";
                  perfMultiplier = Number(urlParams.get("multiplier")) || 1;
                  resolution = Number(urlParams.get("resolution")) || 720;
                  enableInspector = urlParams.get("inspector") === "true";
                  physicalPixelRatio = Number(urlParams.get("ppr")) || defaultPhysicalPixelRatio;
                  logicalPixelRatio = resolution / appHeight;
                  renderMode = urlParams.get("renderMode");
                  if (renderMode !== "webgl" && renderMode !== "canvas") {
                    renderMode = "webgl";
                  }
                  if (automation) {
                    _context17.next = 18;
                    break;
                  }
                  _context17.next = 17;
                  return runTest(test, renderMode, urlParams, showOverlay, showMemMonitor, logicalPixelRatio, physicalPixelRatio, logFps, enableContextSpy, perfMultiplier, enableInspector);
                case 17:
                  return _context17.abrupt("return");
                case 18:
                  assertTruthy(automation);
                  _context17.next = 21;
                  return runAutomation(renderMode, test, logFps);
                case 21:
                case "end":
                  return _context17.stop();
              }
            }, _callee16);
          }));
        })().catch(function (err) {
          console.error(err);
        });
        function runTest(test, renderMode, urlParams, showOverlay, showMemMonitor, logicalPixelRatio, physicalPixelRatio, logFps, enableContextSpy, perfMultiplier, enableInspector) {
          return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
            var _this67 = this;
            var testModule, module, customSettings, _yield$initRenderer, renderer, appElement, testRoot, overlayText, memMonitor, exampleSettings;
            return _regeneratorRuntime().wrap(function _callee18$(_context19) {
              while (1) switch (_context19.prev = _context19.next) {
                case 0:
                  testModule = testModules[getTestPath(test)];
                  if (testModule) {
                    _context19.next = 3;
                    break;
                  }
                  throw new Error("Test \"".concat(test, "\" not found"));
                case 3:
                  _context19.next = 5;
                  return testModule();
                case 5:
                  module = _context19.sent;
                  customSettings = typeof module.customSettings === "function" ? module.customSettings(urlParams) : {};
                  _context19.next = 9;
                  return initRenderer(renderMode, logFps, enableContextSpy, logicalPixelRatio, physicalPixelRatio, enableInspector, customSettings);
                case 9:
                  _yield$initRenderer = _context19.sent;
                  renderer = _yield$initRenderer.renderer;
                  appElement = _yield$initRenderer.appElement;
                  testRoot = renderer.root;
                  if (showOverlay) {
                    overlayText = renderer.createTextNode({
                      color: 4278190335,
                      text: "Test: ".concat(test),
                      zIndex: 99999,
                      parent: renderer.root,
                      fontSize: 50
                    });
                    overlayText.once("loaded", function (target, _ref28) {
                      var dimensions = _ref28.dimensions;
                      overlayText.x = renderer.settings.appWidth - dimensions.width - 20;
                      overlayText.y = renderer.settings.appHeight - dimensions.height - 20;
                    });
                  }
                  memMonitor = null;
                  if (showMemMonitor) {
                    memMonitor = new MemMonitor(renderer, {
                      mount: 1,
                      x: renderer.settings.appWidth - 20,
                      y: renderer.settings.appHeight - 100,
                      parent: renderer.root,
                      zIndex: 99999
                    });
                  }
                  if (showOverlay || showMemMonitor) {
                    testRoot = renderer.createNode({
                      parent: renderer.root,
                      x: renderer.root.x,
                      y: renderer.root.y,
                      width: renderer.settings.appWidth,
                      height: renderer.settings.appHeight - 100,
                      color: 0
                    });
                  }
                  exampleSettings = {
                    testName: test,
                    renderer: renderer,
                    appElement: appElement,
                    testRoot: testRoot,
                    automation: false,
                    perfMultiplier: perfMultiplier,
                    snapshot: function snapshot() {
                      return __async(_this67, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
                        return _regeneratorRuntime().wrap(function _callee17$(_context18) {
                          while (1) switch (_context18.prev = _context18.next) {
                            case 0:
                            case "end":
                              return _context18.stop();
                          }
                        }, _callee17);
                      }));
                    },
                    memMonitor: memMonitor
                  };
                  _context19.next = 20;
                  return module.default(exampleSettings);
                case 20:
                case "end":
                  return _context19.stop();
              }
            }, _callee18);
          }));
        }
        function initRenderer(renderMode, logFps, enableContextSpy, logicalPixelRatio, physicalPixelRatio, enableInspector, customSettings) {
          return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
            var inspector, renderer, samples, fpsSampleCount, fpsSampleSkipCount, fpsSampleIndex, fpsSamplesLeft, appElement;
            return _regeneratorRuntime().wrap(function _callee19$(_context20) {
              while (1) switch (_context20.prev = _context20.next) {
                case 0:
                  if (enableInspector) inspector = Inspector;
                  renderer = new RendererMain(__spreadValues({
                    appWidth: appWidth,
                    appHeight: appHeight,
                    boundsMargin: [100, 100, 100, 100],
                    deviceLogicalPixelRatio: logicalPixelRatio,
                    devicePhysicalPixelRatio: physicalPixelRatio,
                    clearColor: 0,
                    fpsUpdateInterval: logFps ? 1e3 : 0,
                    enableContextSpy: enableContextSpy,
                    inspector: inspector,
                    renderEngine: renderMode === "webgl" ? WebGlCoreRenderer : CanvasCoreRenderer,
                    fontEngines: [SdfTextRenderer, CanvasTextRenderer]
                  }, customSettings), "app");
                  installFonts(renderer.stage);
                  samples = new StatTracker();
                  fpsSampleCount = 100;
                  fpsSampleSkipCount = 10;
                  fpsSampleIndex = 0;
                  fpsSamplesLeft = fpsSampleCount;
                  renderer.on("fpsUpdate", function (target, fpsData) {
                    var captureSample = fpsSampleIndex >= fpsSampleSkipCount;
                    if (captureSample) {
                      samples.add("fps", fpsData.fps);
                      if (fpsData.contextSpyData) {
                        var totalCalls = 0;
                        for (var key in fpsData.contextSpyData) {
                          var numCalls = fpsData.contextSpyData[key];
                          totalCalls += numCalls;
                          samples.add(key, numCalls);
                        }
                        samples.add("totalCalls", totalCalls);
                      }
                      fpsSamplesLeft--;
                      if (fpsSamplesLeft === 0) {
                        var averageFps = samples.getAverage("fps");
                        var p01Fps = samples.getPercentile("fps", 1);
                        var p05Fps = samples.getPercentile("fps", 5);
                        var p25Fps = samples.getPercentile("fps", 25);
                        var medianFps = samples.getPercentile("fps", 50);
                        var stdDevFps = samples.getStdDev("fps");
                        console.log("---------------------------------");
                        console.log("Average FPS: ".concat(averageFps));
                        console.log("Median FPS: ".concat(medianFps));
                        console.log("P01 FPS: ".concat(p01Fps));
                        console.log("P05 FPS: ".concat(p05Fps));
                        console.log("P25 FPS: ".concat(p25Fps));
                        console.log("Std Dev FPS: ".concat(stdDevFps));
                        console.log("Num samples: ".concat(samples.getCount("fps")));
                        console.log("---------------------------------");
                        if (fpsData.contextSpyData) {
                          var contextKeys = samples.getSampleGroups().filter(function (key) {
                            return key !== "fps" && key !== "totalCalls";
                          });
                          var _iterator12 = _createForOfIteratorHelper(contextKeys),
                            _step12;
                          try {
                            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                              var _key21 = _step12.value;
                              var median = samples.getPercentile(_key21, 50);
                              console.log("median(".concat(_key21, ") / median(fps): ").concat(Math.round(median / medianFps)));
                            }
                          } catch (err) {
                            _iterator12.e(err);
                          } finally {
                            _iterator12.f();
                          }
                          var medianTotalCalls = samples.getPercentile("totalCalls", 50);
                          console.log("median(totalCalls) / median(fps): ".concat(Math.round(medianTotalCalls / medianFps)));
                          console.log("---------------------------------");
                        }
                        samples.reset();
                        fpsSamplesLeft = fpsSampleCount;
                      }
                    }
                    console.log("FPS: ".concat(fpsData.fps, " (samples left: ").concat(fpsSamplesLeft, ")"));
                    fpsSampleIndex++;
                  });
                  appElement = document.querySelector("#app");
                  assertTruthy(appElement instanceof HTMLDivElement);
                  return _context20.abrupt("return", {
                    renderer: renderer,
                    appElement: appElement
                  });
                case 12:
                case "end":
                  return _context20.stop();
              }
            }, _callee19);
          }));
        }
        function wildcardMatch(string, wildcardString) {
          var escapeRegex = function escapeRegex(s) {
            return s.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
          };
          return new RegExp("^".concat(wildcardString.split("*").map(escapeRegex).join(".*"), "$")).test(string);
        }
        function runAutomation(renderMode, filter, logFps) {
          return __async(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
            var _this68 = this;
            var logicalPixelRatio, _yield$initRenderer2, renderer, appElement, _loop4, testPath, doneTests;
            return _regeneratorRuntime().wrap(function _callee21$(_context23) {
              while (1) switch (_context23.prev = _context23.next) {
                case 0:
                  logicalPixelRatio = defaultResolution / appHeight;
                  _context23.next = 3;
                  return initRenderer(renderMode, logFps, false, logicalPixelRatio, defaultPhysicalPixelRatio, false
                  // enableInspector
                  );
                case 3:
                  _yield$initRenderer2 = _context23.sent;
                  renderer = _yield$initRenderer2.renderer;
                  appElement = _yield$initRenderer2.appElement;
                  _loop4 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop4() {
                    var testModule, testName, _yield$testModule, automation, customSettings, rand, testRoot, exampleSettings;
                    return _regeneratorRuntime().wrap(function _loop4$(_context22) {
                      while (1) switch (_context22.prev = _context22.next) {
                        case 0:
                          testModule = testModules[testPath];
                          testName = getTestName(testPath);
                          if (!(filter && !wildcardMatch(testName, filter))) {
                            _context22.next = 4;
                            break;
                          }
                          return _context22.abrupt("return", 1);
                        case 4:
                          assertTruthy(testModule);
                          _context22.next = 7;
                          return testModule();
                        case 7:
                          _yield$testModule = _context22.sent;
                          automation = _yield$testModule.automation;
                          customSettings = _yield$testModule.customSettings;
                          console.log("Attempting to run automation for ".concat(testName, "..."));
                          if (!automation) {
                            _context22.next = 26;
                            break;
                          }
                          console.log("Running automation for ".concat(testName, "..."));
                          rand = lib.factory({
                            seed: 1234
                          });
                          Math.random = function () {
                            return rand() / rand.MAX;
                          };
                          if (!customSettings) {
                            _context22.next = 19;
                            break;
                          }
                          console.error("customSettings not supported for automation");
                          _context22.next = 26;
                          break;
                        case 19:
                          assertTruthy(renderer.root);
                          testRoot = renderer.createNode({
                            parent: renderer.root,
                            x: renderer.root.x,
                            y: renderer.root.y,
                            width: renderer.root.width,
                            height: renderer.root.height,
                            color: 0
                          });
                          exampleSettings = {
                            testName: testName,
                            renderer: renderer,
                            testRoot: testRoot,
                            appElement: appElement,
                            automation: true,
                            perfMultiplier: 1,
                            snapshot: function snapshot(options) {
                              return __async(_this68, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
                                var snapshot, clipRect, adjustedOptions;
                                return _regeneratorRuntime().wrap(function _callee20$(_context21) {
                                  while (1) switch (_context21.prev = _context21.next) {
                                    case 0:
                                      snapshot = window.snapshot;
                                      clipRect = (options == null ? void 0 : options.clip) || {
                                        x: testRoot.x,
                                        y: testRoot.y,
                                        width: testRoot.width,
                                        height: testRoot.height
                                      };
                                      adjustedOptions = __spreadProps(__spreadValues({}, options), {
                                        clip: {
                                          x: Math.round(clipRect.x * logicalPixelRatio),
                                          y: Math.round(clipRect.y * logicalPixelRatio),
                                          width: Math.round(clipRect.width * logicalPixelRatio),
                                          height: Math.round(clipRect.height * logicalPixelRatio)
                                        }
                                      });
                                      _context21.next = 5;
                                      return delay(200);
                                    case 5:
                                      if (!snapshot) {
                                        _context21.next = 11;
                                        break;
                                      }
                                      console.log("Calling snapshot(".concat(testName, ")"));
                                      _context21.next = 9;
                                      return snapshot(testName, adjustedOptions);
                                    case 9:
                                      _context21.next = 12;
                                      break;
                                    case 11:
                                      console.error("snapshot() not defined (not running in playwright?)");
                                    case 12:
                                    case "end":
                                      return _context21.stop();
                                  }
                                }, _callee20);
                              }));
                            },
                            memMonitor: null
                          };
                          _context22.next = 24;
                          return automation(exampleSettings);
                        case 24:
                          testRoot.parent = null;
                          testRoot.destroy();
                        case 26:
                        case "end":
                          return _context22.stop();
                      }
                    }, _loop4);
                  });
                  _context23.t0 = _regeneratorRuntime().keys(testModules);
                case 8:
                  if ((_context23.t1 = _context23.t0()).done) {
                    _context23.next = 15;
                    break;
                  }
                  testPath = _context23.t1.value;
                  return _context23.delegateYield(_loop4(), "t2", 11);
                case 11:
                  if (!_context23.t2) {
                    _context23.next = 13;
                    break;
                  }
                  return _context23.abrupt("continue", 8);
                case 13:
                  _context23.next = 8;
                  break;
                case 15:
                  doneTests = window.doneTests;
                  if (!doneTests) {
                    _context23.next = 22;
                    break;
                  }
                  console.error("Calling doneTests()");
                  _context23.next = 20;
                  return doneTests();
                case 20:
                  _context23.next = 23;
                  break;
                case 22:
                  console.error("doneTests() not defined (not running in playwright?)");
                case 23:
                case "end":
                  return _context23.stop();
              }
            }, _callee21);
          }));
        }
        function delay(ms) {
          return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
          });
        }
      }
    };
  });
})();
//# sourceMappingURL=index-legacy-qyIsAgiU.js.map
