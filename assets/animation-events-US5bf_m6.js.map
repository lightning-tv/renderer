{"version":3,"file":"animation-events-US5bf_m6.js","sources":["../../tests/animation-events.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport robotImg from '../assets/robot/robot.png';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot single page\n  await test(settings);\n}\n\n/**\n * This test verifies that the animation events are firing as expected.\n *\n * This test runs three seperate animations of a robot.\n *\n * Animation 1:\n * - Starts at 0, 0\n * - Moves to 100, 100\n * - Duration: 500ms\n * - Delay: 500ms\n * - Tests that the 'animating' event is fired after the delay\n * - Tests that the waitUntilStopped() promise resolves when the animation finishes\n *\n * Animation 2:\n * - Starts at 100, 100\n * - Moves to 0, 0\n * - Duration: 500ms\n * - No Delay\n * - Tests that the 'animating' event is fired (even if no delay)\n * - Tests that the 'stopped' event is fired when the animation finishes\n *\n * Animation 3:\n * - Starts at 0, 0\n * - Moves to 100, 100\n * - Duration: 500ms\n * - No Delay\n * - Tests that the 'stopped' event is fired when stop() is called before the\n *   animation finishes\n * - Robot resets to 0, 0 when stop() is called\n *\n * @param param0\n */\nexport default async function test({\n  renderer,\n  testRoot,\n  snapshot,\n}: ExampleSettings) {\n  testRoot.width = 250;\n  testRoot.height = 250;\n  testRoot.color = 0xffffffff;\n\n  const robot = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: 140,\n    height: 140,\n    zIndex: 5,\n    src: robotImg,\n    parent: testRoot,\n  });\n\n  const status = renderer.createTextNode({\n    mount: 1,\n    x: testRoot.width,\n    y: testRoot.height,\n    fontSize: 40,\n    fontFamily: 'Ubuntu',\n    parent: testRoot,\n    color: 0x000000ff,\n  });\n\n  //////////////////////////\n  // Animation 1\n  //////////////////////////\n  status.text = 'a1: init';\n  await snapshot({ name: 'a1' });\n  const animation1 = robot.animate(\n    {\n      x: 100,\n      y: 100,\n    },\n    {\n      delay: 500,\n      duration: 500,\n    },\n  );\n  animation1.once('animating', () => {\n    robot.color = 0x00ff00ff; // green\n    // Hide the robot until after the snapshot is taken\n    // Hack for the VRT, since the position of the robot at this point will not\n    // be consistent between runs of the VRT.\n    robot.alpha = 0;\n    status.text = 'a1: animating';\n    snapshot({ name: 'a1' })\n      .then(() => {\n        robot.alpha = 1;\n      })\n      .catch(console.error);\n  });\n  // This will resolve right await because the animation starts out stopped.\n  await animation1.waitUntilStopped();\n  animation1.start();\n  await animation1.waitUntilStopped();\n  status.text = 'a1: stopped';\n  robot.color = 0xff0000ff; // red\n  await snapshot({ name: 'a1' });\n\n  //////////////////////////\n  // Animation 2\n  //////////////////////////\n  status.text = 'a2: init';\n  robot.color = 0xffffffff; // white\n  await snapshot({ name: 'a2' });\n  const animation2 = robot.animate(\n    {\n      x: 0,\n      y: 0,\n    },\n    {\n      duration: 500,\n    },\n  );\n  animation2.once('animating', () => {\n    robot.color = 0x00ff00ff; // green\n    // Hide the robot until after the snapshot is taken...\n    // Hack for the VRT, since the position of the robot at this point will not\n    // be consistent between runs of the VRT.\n    robot.alpha = 0;\n    status.text = 'a2: animating';\n    snapshot({ name: 'a2' })\n      .then(() => {\n        robot.alpha = 1;\n      })\n      .catch(console.error);\n  });\n\n  const stoppedEventPromiseA2 = new Promise<void>((resolve) => {\n    animation2.once('stopped', () => {\n      status.text = 'a2: stopped';\n      robot.color = 0xff0000ff; // red\n      snapshot({ name: 'a2' })\n        .then(() => {\n          robot.alpha = 1;\n          resolve();\n        })\n        .catch(console.error);\n    });\n  });\n  animation2.start();\n  await stoppedEventPromiseA2;\n\n  //////////////////////////\n  // Animation 3\n  //////////////////////////\n  status.text = 'a3: init';\n  robot.color = 0xffffffff; // white\n  await snapshot({ name: 'a3' });\n  const animation3 = robot.animate(\n    {\n      x: 100,\n      y: 100,\n    },\n    {\n      duration: 500,\n    },\n  );\n\n  const stoppedEventPromiseA3 = new Promise<void>((resolve) => {\n    animation3.once('stopped', () => {\n      status.text = 'a3: stopped';\n      robot.color = 0xff0000ff; // red\n      snapshot({ name: 'a3' })\n        .then(() => {\n          robot.alpha = 1;\n          resolve();\n        })\n        .catch(console.error);\n    });\n  });\n  animation3.start();\n  await delay(100);\n  // Force stop the animation\n  animation3.stop();\n  // Wait for the stopped event to be fired\n  await stoppedEventPromiseA3;\n}\n\nfunction delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"names":[],"mappings":"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"}