{"version":3,"file":"resize-mode-Cp1X-5v3.js","sources":["../../assets/testscreen.png","../../assets/testscreen_rotated.png","../../tests/resize-mode.ts"],"sourcesContent":["export default \"__VITE_ASSET__By3e07lc__\"","export default \"__VITE_ASSET__CbghLS40__\"","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport testscreenImg from '../assets/testscreen.png';\nimport testscreenRImg from '../assets/testscreen_rotated.png';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport type { INodeProps } from '@lightningjs/renderer';\nimport { paginateTestRows } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { deg2Rad } from '../../dist/src/utils.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nconst SQUARE_SIZE = 600;\nconst PADDING = 20;\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    title: 'Resizemode Tests',\n  });\n\n  await paginateTestRows(pageContainer, [\n    {\n      title:\n        'Texture Width > Height - resizeMode cover maximum width of node and clipY - 0, 0.5, 1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 3; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE,\n            height: SQUARE_SIZE - 300,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipY: [0, 0.5, 1][i],\n                clipX: [0, 0.5, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING;\n        }\n\n        rowNode.height = SQUARE_SIZE - 300;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width > Height - resizeMode cover maximum height of node and clipX - 0, 0.5, 1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 3; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE,\n            height: SQUARE_SIZE - 200,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipY: [0, 0.5, 1][i],\n                clipX: [0, 0.5, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING;\n        }\n\n        rowNode.height = SQUARE_SIZE - 200;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode cover maximum width of node and clipY - 0, 0.5, 1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 3; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE,\n            height: SQUARE_SIZE - 300,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenRImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipY: [0, 0.5, 1][i],\n                clipX: [0, 0.5, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING;\n        }\n\n        rowNode.height = SQUARE_SIZE - 300;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode cover maximum height of node and clipX - 0,0.25,0.5,0.75,1',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        for (let i = 0; i < 5; i++) {\n          renderer.createNode({\n            x: curX,\n            width: SQUARE_SIZE - 400,\n            height: SQUARE_SIZE - 100,\n            texture: renderer.createTexture('ImageTexture', {\n              src: testscreenRImg,\n            }),\n            textureOptions: {\n              resizeMode: {\n                type: 'cover',\n                clipX: [0, 0.25, 0.5, 0.75, 1][i],\n                clipY: [0, 0.25, 0.5, 0.75, 1][i],\n              },\n            },\n            parent: rowNode,\n          });\n          curX += SQUARE_SIZE + PADDING - 330;\n        }\n\n        rowNode.height = SQUARE_SIZE - 200;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width > Height - resizeMode contain maximum height of node',\n      content: async (rowNode) => {\n        let curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE - 300,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        curX += containerProps.width + PADDING;\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width > Height - resizeMode contain maximum width of node',\n      content: async (rowNode) => {\n        const curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE - 200,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode contain maximum width of node',\n      content: async (rowNode) => {\n        let curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE - 400,\n          height: SQUARE_SIZE - 200,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenRImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        curX += containerProps.width + PADDING;\n\n        const container2 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          mount: 0.5,\n          x: containerProps.width / 2,\n          y: containerProps.height / 2,\n          pivotX: 0.5,\n          rotation: deg2Rad(45),\n          parent: container2,\n        });\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n    {\n      title:\n        'Texture Width < Height - resizeMode contain maximum height of node',\n      content: async (rowNode) => {\n        let curX = 0;\n        const containerProps = {\n          width: SQUARE_SIZE - 150,\n          height: SQUARE_SIZE - 200,\n          parent: rowNode,\n          color: 0x333333ff,\n          clipping: true,\n        } satisfies Partial<INodeProps>;\n\n        const textureNodeProps = {\n          width: containerProps.width,\n          height: containerProps.height,\n          clipping: true,\n          texture: renderer.createTexture('ImageTexture', {\n            src: testscreenRImg,\n          }),\n          textureOptions: {\n            resizeMode: {\n              type: 'contain',\n            },\n          },\n        } satisfies Partial<INodeProps>;\n\n        const container1 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          parent: container1,\n        });\n\n        curX += containerProps.width + PADDING;\n\n        const container2 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        renderer.createNode({\n          ...textureNodeProps,\n          mount: 0.5,\n          x: containerProps.width / 2,\n          y: containerProps.height / 2,\n          pivotX: 0.5,\n          rotation: deg2Rad(45),\n          parent: container2,\n        });\n\n        rowNode.height = containerProps.height;\n        return rowNode.height;\n      },\n    },\n  ]);\n\n  return pageContainer;\n}\n"],"names":[],"mappings":"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"}