{"version":3,"file":"paginateTestRows-BTHNpL4T.js","sources":["../../common/paginateTestRows.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INode } from '@lightningjs/renderer';\nimport { assertTruthy } from '@lightningjs/renderer/utils';\nimport { PageContainer } from './PageContainer.js';\n\nconst HEADER_FONT_SIZE = 30;\nconst PADDING = 20;\n\nexport type RowConstructor = (pageNode: INode) => Promise<INode>;\nexport type RowContentConstructor = (rowNode: INode) => Promise<number>;\n\nexport interface TestRowDesc {\n  title: string;\n  content: RowContentConstructor;\n}\n\nexport type TestRow = TestRowDesc | null;\n\nfunction createPageConstructor(curPageRowConstructors: RowConstructor[]) {\n  return async function (\n    rowConstructors: RowConstructor[],\n    pageNode: INode,\n  ): Promise<void> {\n    let curY = 0;\n    for (const rowConstructor of rowConstructors) {\n      const rowNode = await rowConstructor(pageNode);\n      rowNode.y = curY;\n      curY += rowNode.height;\n    }\n  }.bind(null, curPageRowConstructors);\n}\n\n/**\n * Paginate a list of test rows\n *\n * @remarks\n * `null` values in the testRows array will be treated as manual page breaks\n *\n * @param pageContainer\n * @param testRows\n */\nexport async function paginateTestRows(\n  pageContainer: PageContainer,\n  testRows: (TestRow | null)[],\n) {\n  const renderer = pageContainer.renderer;\n  assertTruthy(renderer.root);\n  let pageCurY = 0;\n  let curPageRowConstructors: RowConstructor[] = [];\n  let curRowIndex = 0;\n  for (const testRow of testRows) {\n    const isLastRow = curRowIndex === testRows.length - 1;\n    let newRowConstructor: RowConstructor | null =\n      testRow &&\n      (async (pageNode: INode) => {\n        assertTruthy(testRow);\n        const rowContainer = renderer.createNode({\n          x: 0,\n          y: pageCurY,\n          width: pageContainer.contentWidth,\n          height: 0,\n          color: 0x00000000,\n          parent: pageNode,\n        });\n        const rowHeaderNode = renderer.createTextNode({\n          fontFamily: 'Ubuntu',\n          fontSize: HEADER_FONT_SIZE,\n          y: PADDING,\n          parent: rowContainer,\n        });\n        const rowNode = renderer.createNode({\n          y: HEADER_FONT_SIZE + PADDING * 2,\n          width: pageContainer.contentWidth,\n          height: 0,\n          color: 0x00000000,\n          parent: rowContainer,\n        });\n        const rowHeight = await testRow.content(rowNode);\n        rowNode.height = rowHeight;\n        rowHeaderNode.text = testRow.title;\n        rowContainer.height = HEADER_FONT_SIZE + PADDING * 2 + rowNode.height;\n        return rowContainer;\n      });\n\n    let itFits = false;\n    let tmpRowContainer: INode | undefined;\n    // debugger;\n    if (newRowConstructor) {\n      // Construct the row just to get its height\n      tmpRowContainer = await newRowConstructor(renderer.root);\n      // curPageRowConstructors.push(newRowConstructor);\n      // If it fits, add it to the current page\n      itFits = pageCurY + tmpRowContainer.height <= pageContainer.contentHeight;\n      if (itFits) {\n        curPageRowConstructors.push(newRowConstructor);\n        pageCurY += tmpRowContainer.height;\n        newRowConstructor = null;\n      }\n    }\n\n    // If it doesn't fit OR it's the last row, add the current page to the page container and start a new page\n    if (!itFits || isLastRow) {\n      const pageConstructor = createPageConstructor(curPageRowConstructors);\n      pageContainer.pushPage(pageConstructor);\n\n      pageCurY = tmpRowContainer?.height || 0;\n      curPageRowConstructors = [];\n      if (newRowConstructor) {\n        curPageRowConstructors.push(newRowConstructor);\n      }\n\n      if (isLastRow && !itFits && curPageRowConstructors.length > 0) {\n        const pageConstructor = createPageConstructor(curPageRowConstructors);\n        pageContainer.pushPage(pageConstructor);\n      }\n    }\n    if (tmpRowContainer) {\n      tmpRowContainer.parent = null;\n      tmpRowContainer.destroy();\n    }\n\n    curRowIndex++;\n  }\n  pageContainer.finalizePages();\n}\n"],"names":["pageConstructor"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAuBA,MAAM,mBAAmB;AACzB,MAAM,UAAU;AAYhB,SAAS,sBAAsB,wBAA0C;AAChE,UAAA,SACL,iBACA,UACe;AAAA,WAAA,QAAA,MAAA,MAAA,aAAA;AACf,UAAI,OAAO;AACX,iBAAW,kBAAkB,iBAAiB;AACtC,cAAA,UAAU,MAAM,eAAe,QAAQ;AAC7C,gBAAQ,IAAI;AACZ,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IAAA,CACF;AAAA,EAAA,GAAE,KAAK,MAAM,sBAAsB;AACrC;AAWsB,SAAA,iBACpB,eACA,UACA;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AACA,UAAM,WAAW,cAAc;AAC/B,iBAAa,SAAS,IAAI;AAC1B,QAAI,WAAW;AACf,QAAI,yBAA2C,CAAA;AAC/C,QAAI,cAAc;AAClB,eAAW,WAAW,UAAU;AACxB,YAAA,YAAY,gBAAgB,SAAS,SAAS;AAChD,UAAA,oBACF,YACC,CAAO,aAAoB,QAAA,MAAA,MAAA,aAAA;AAC1B,qBAAa,OAAO;AACd,cAAA,eAAe,SAAS,WAAW;AAAA,UACvC,GAAG;AAAA,UACH,GAAG;AAAA,UACH,OAAO,cAAc;AAAA,UACrB,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,QAAQ;AAAA,QAAA,CACT;AACK,cAAA,gBAAgB,SAAS,eAAe;AAAA,UAC5C,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,GAAG;AAAA,UACH,QAAQ;AAAA,QAAA,CACT;AACK,cAAA,UAAU,SAAS,WAAW;AAAA,UAClC,GAAG,mBAAmB,UAAU;AAAA,UAChC,OAAO,cAAc;AAAA,UACrB,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,QAAQ;AAAA,QAAA,CACT;AACD,cAAM,YAAY,MAAM,QAAQ,QAAQ,OAAO;AAC/C,gBAAQ,SAAS;AACjB,sBAAc,OAAO,QAAQ;AAC7B,qBAAa,SAAS,mBAAmB,UAAU,IAAI,QAAQ;AACxD,eAAA;AAAA,MACT,CAAA;AAEF,UAAI,SAAS;AACT,UAAA;AAEJ,UAAI,mBAAmB;AAEH,0BAAA,MAAM,kBAAkB,SAAS,IAAI;AAG9C,iBAAA,WAAW,gBAAgB,UAAU,cAAc;AAC5D,YAAI,QAAQ;AACV,iCAAuB,KAAK,iBAAiB;AAC7C,sBAAY,gBAAgB;AACR,8BAAA;AAAA,QACtB;AAAA,MACF;AAGI,UAAA,CAAC,UAAU,WAAW;AAClB,cAAA,kBAAkB,sBAAsB,sBAAsB;AACpE,sBAAc,SAAS,eAAe;AAEtC,oBAAW,mDAAiB,WAAU;AACtC,iCAAyB,CAAA;AACzB,YAAI,mBAAmB;AACrB,iCAAuB,KAAK,iBAAiB;AAAA,QAC/C;AAEA,YAAI,aAAa,CAAC,UAAU,uBAAuB,SAAS,GAAG;AACvDA,gBAAAA,mBAAkB,sBAAsB,sBAAsB;AACpE,wBAAc,SAASA,gBAAe;AAAA,QACxC;AAAA,MACF;AACA,UAAI,iBAAiB;AACnB,wBAAgB,SAAS;AACzB,wBAAgB,QAAQ;AAAA,MAC1B;AAEA;AAAA,IACF;AACA,kBAAc,cAAc;AAAA,EAAA,CAC9B;AAAA;"}