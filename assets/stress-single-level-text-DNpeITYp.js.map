{"version":3,"file":"stress-single-level-text-DNpeITYp.js","sources":["../../tests/stress-single-level-text.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type INode } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nconst randomIntBetween = (from: number, to: number) =>\n  Math.floor(Math.random() * (to - from + 1) + from);\n\nexport default async function ({\n  renderer,\n  testRoot,\n  perfMultiplier,\n}: ExampleSettings) {\n  // create 100 nodes\n  const numOuterNodes = 100 * perfMultiplier;\n  const nodes: INode[] = [];\n\n  const startMin = -1000;\n  const startMax = 3000;\n  const endMin = -1000;\n  const endMax = 3000;\n\n  const bg = renderer.createNode({\n    width: 1920,\n    height: 1080,\n    color: 0xff1e293b,\n    parent: testRoot,\n  });\n\n  for (let i = 0; i < numOuterNodes; i++) {\n    const node = renderer.createTextNode({\n      x: randomIntBetween(startMin, startMax),\n      y: randomIntBetween(startMin, startMax),\n      fontFamily: 'Ubuntu',\n      textRendererOverride: 'sdf',\n      text: 'Lightning 3.0',\n      // contain: 'both',\n      // width: 237,\n      // height: 45,\n      color: 0xffffffff,\n      fontSize: 40,\n      parent: bg,\n    });\n\n    nodes.push(node);\n  }\n\n  console.log(`Created ${numOuterNodes} nodes with the same text`);\n\n  // create 100 animations\n  const animate = () => {\n    nodes.forEach((node) => {\n      node\n        .animate(\n          {\n            x: randomIntBetween(endMin, endMax),\n            y: randomIntBetween(endMin, endMax),\n          },\n          {\n            duration: 3000,\n            loop: true,\n          },\n        )\n        .start();\n    });\n  };\n\n  animate();\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAsBA,MAAM,mBAAmB,CAAC,MAAc,OACtC,KAAK,MAAM,KAAK,OAAA,KAAY,KAAK,OAAO,KAAK,IAAI;AAEnD,SAAA,sBAA+B,IAIX;AAJW,SAAA,QAAA,MAAA,WAAA,WAAA;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GACkB;AAElB,UAAM,gBAAgB,MAAM;AAC5B,UAAM,QAAiB,CAAA;AAEvB,UAAM,WAAW;AACjB,UAAM,WAAW;AACjB,UAAM,SAAS;AACf,UAAM,SAAS;AAET,UAAA,KAAK,SAAS,WAAW;AAAA,MAC7B,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AAED,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AAChC,YAAA,OAAO,SAAS,eAAe;AAAA,QACnC,GAAG,iBAAiB,UAAU,QAAQ;AAAA,QACtC,GAAG,iBAAiB,UAAU,QAAQ;AAAA,QACtC,YAAY;AAAA,QACZ,sBAAsB;AAAA,QACtB,MAAM;AAAA;AAAA;AAAA;AAAA,QAIN,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,MAAA,CACT;AAED,YAAM,KAAK,IAAI;AAAA,IACjB;AAEQ,YAAA,IAAI,WAAW,sBAAa,4BAA2B;AAG/D,UAAM,UAAU,MAAM;AACd,YAAA,QAAQ,CAAC,SAAS;AAEnB,aAAA;AAAA,UACC;AAAA,YACE,GAAG,iBAAiB,QAAQ,MAAM;AAAA,YAClC,GAAG,iBAAiB,QAAQ,MAAM;AAAA,UACpC;AAAA,UACA;AAAA,YACE,UAAU;AAAA,YACV,MAAM;AAAA,UACR;AAAA,UAED,MAAM;AAAA,MAAA,CACV;AAAA,IAAA;AAGK;EAAA,CACV;AAAA;"}