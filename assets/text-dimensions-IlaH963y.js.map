{"version":3,"file":"text-dimensions-IlaH963y.js","sources":["../../tests/text-dimensions.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { waitForLoadedDimensions } from '../common/utils.js';\n\nexport async function automation(settings: ExampleSettings) {\n  const next = await test(settings);\n  await settings.snapshot();\n  while (await next()) {\n    await settings.snapshot();\n  }\n}\n\n/**\n * Tests that the dimensions of a text node are correctly calculated and reported\n * when using SDF and Canvas text renderers and that switching between on\n * a single node them works.\n *\n * Use the 'right arrow' key to advance to the next test.\n *\n * @param settings\n * @returns\n */\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n\n  // Set a smaller snapshot area\n  testRoot.width = 200;\n  testRoot.height = 200;\n  testRoot.color = 0xffffffff;\n\n  const textBg = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    color: 0x00ff00ff,\n    parent: testRoot,\n  });\n\n  const text1 = renderer.createTextNode({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    color: 0x000000ff,\n    fontFamily: 'Ubuntu',\n    textRendererOverride: 'sdf',\n    fontSize: 50,\n    text: '',\n    parent: testRoot,\n  });\n\n  const indexInfo = renderer.createTextNode({\n    x: testRoot.width,\n    y: testRoot.height,\n    mount: 1,\n    width: 0,\n    height: 0,\n    color: 0x000000ff,\n    fontFamily: 'Ubuntu',\n    fontSize: 20,\n    text: '1',\n    parent: testRoot,\n  });\n\n  let i = 0;\n  const mutations = [\n    () => {\n      text1.text = 'SDF';\n      text1.textRendererOverride = 'sdf';\n    },\n    () => {\n      text1.text = 'SDF\\ngyqpj';\n    },\n    () => {\n      text1.text = 'Canvas';\n      text1.textRendererOverride = 'canvas';\n    },\n    () => {\n      text1.text = 'Canvas\\ngyqpj';\n    },\n    () => {\n      // Test one more time with SDF to make sure Canvas\n      text1.text = 'SDF 2nd';\n      text1.textRendererOverride = 'sdf';\n    },\n  ];\n  /**\n   * Run the next mutation in the list\n   *\n   * @param idx\n   * @returns `false` if loop is set to false and we've already gone through all mutations. Otherwise `true`.\n   */\n  async function next(loop = false, idx = i + 1): Promise<boolean> {\n    if (idx > mutations.length - 1) {\n      if (!loop) {\n        return false;\n      }\n      idx = 0;\n    }\n    i = idx;\n    const waitPromise = waitForLoadedDimensions(text1);\n    mutations[i]?.();\n    indexInfo.text = (i + 1).toString();\n    const dimensions = await waitPromise;\n    textBg.width = dimensions.width;\n    textBg.height = dimensions.height;\n    return true;\n  }\n  await next(false, 0);\n\n  window.addEventListener('keydown', (event) => {\n    // When right arrow is pressed, call next\n    if (event.key === 'ArrowRight') {\n      next(true).catch(console.error);\n    }\n  });\n\n  return next;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,SAAsB,WAAW,UAA2B;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AACpD,UAAA,OAAO,MAAM,KAAK,QAAQ;AAChC,UAAM,SAAS;AACR,WAAA,MAAM,QAAQ;AACnB,YAAM,SAAS;IACjB;AAAA,EAAA,CACF;AAAA;AAYA,SAA8B,KAAK,UAA2B;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AACtD,UAAA,EAAE,UAAU,SAAa,IAAA;AAG/B,aAAS,QAAQ;AACjB,aAAS,SAAS;AAClB,aAAS,QAAQ;AAEX,UAAA,SAAS,SAAS,WAAW;AAAA,MACjC,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AAEK,UAAA,QAAQ,SAAS,eAAe;AAAA,MACpC,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,sBAAsB;AAAA,MACtB,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,IAAA,CACT;AAEK,UAAA,YAAY,SAAS,eAAe;AAAA,MACxC,GAAG,SAAS;AAAA,MACZ,GAAG,SAAS;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,IAAA,CACT;AAED,QAAI,IAAI;AACR,UAAM,YAAY;AAAA,MAChB,MAAM;AACJ,cAAM,OAAO;AACb,cAAM,uBAAuB;AAAA,MAC/B;AAAA,MACA,MAAM;AACJ,cAAM,OAAO;AAAA,MACf;AAAA,MACA,MAAM;AACJ,cAAM,OAAO;AACb,cAAM,uBAAuB;AAAA,MAC/B;AAAA,MACA,MAAM;AACJ,cAAM,OAAO;AAAA,MACf;AAAA,MACA,MAAM;AAEJ,cAAM,OAAO;AACb,cAAM,uBAAuB;AAAA,MAC/B;AAAA,IAAA;AAQF,aAAe,OAAkD;AAAA,aAAA,QAAA,MAAA,WAAA,WAA7C,OAAO,OAAO,MAAM,IAAI,GAAqB;AA/GnE,YAAA;AAgHQ,YAAA,MAAM,UAAU,SAAS,GAAG;AAC9B,cAAI,CAAC,MAAM;AACF,mBAAA;AAAA,UACT;AACM,gBAAA;AAAA,QACR;AACI,YAAA;AACE,cAAA,cAAc,wBAAwB,KAAK;AACjD,SAAA,KAAA,UAAU,CAAV,MAAA,OAAA,SAAA,GAAA,KAAA,SAAA;AACU,kBAAA,QAAQ,IAAI,GAAG,SAAS;AAClC,cAAM,aAAa,MAAM;AACzB,eAAO,QAAQ,WAAW;AAC1B,eAAO,SAAS,WAAW;AACpB,eAAA;AAAA,MAAA,CACT;AAAA,IAAA;AACM,UAAA,KAAK,OAAO,CAAC;AAEZ,WAAA,iBAAiB,WAAW,CAAC,UAAU;AAExC,UAAA,MAAM,QAAQ,cAAc;AAC9B,aAAK,IAAI,EAAE,MAAM,QAAQ,KAAK;AAAA,MAChC;AAAA,IAAA,CACD;AAEM,WAAA;AAAA,EAAA,CACT;AAAA;"}