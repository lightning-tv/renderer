{"version":3,"file":"texture-factory-legacy-DXDnGGmk.js","sources":["../../tests/texture-factory.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot single page\n  await test(settings);\n  await settings.snapshot();\n}\n\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const randomColor = () => {\n    const randomInt = Math.floor(Math.random() * Math.pow(2, 32));\n    const hexString = randomInt.toString(16).padStart(8, '0');\n\n    return `#${hexString}`;\n  };\n  const rnd = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const FONT_SIZE = 45;\n\n  renderer.createTextNode({\n    text: `Texture Factory Test`,\n    fontSize: FONT_SIZE,\n    offsetY: -5,\n    parent: testRoot,\n  });\n\n  function execTest(\n    y: number,\n    title: string,\n    setKey: boolean,\n  ): Promise<boolean> {\n    const textNode = renderer.createTextNode({\n      text: title,\n      fontSize: FONT_SIZE,\n      y: y,\n      parent: testRoot,\n    });\n\n    let factoryRuns = 0;\n\n    const factory = () => {\n      factoryRuns++;\n      const canvas = document.createElement('canvas');\n      canvas.width = 300;\n      canvas.height = 200;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) throw new Error('Unable to create canvas 2d context');\n      for (let i = 0; i < 10; i++) {\n        ctx.fillStyle = randomColor();\n        ctx.fillRect(rnd(0, 280), rnd(0, 180), rnd(20, 200), rnd(20, 100));\n      }\n      return ctx.getImageData(0, 0, 300, 200);\n    };\n\n    renderer.createNode({\n      color: 0xffffffff,\n      x: 20,\n      y: y + 80,\n      width: 300,\n      height: 200,\n      parent: testRoot,\n      texture: renderer.createTexture('ImageTexture', {\n        src: factory,\n        key: setKey ? `test-key-${y}` : undefined,\n      }),\n    });\n\n    renderer.createNode({\n      color: 0xffffffff,\n      x: 340,\n      y: y + 80,\n      width: 300,\n      height: 200,\n      parent: testRoot,\n      texture: renderer.createTexture('ImageTexture', {\n        src: factory,\n        key: setKey ? `test-key-${y}` : undefined,\n      }),\n    });\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let result = '';\n        if ((setKey && factoryRuns === 1) || (!setKey && factoryRuns === 2)) {\n          textNode.color = 0x00ff00ff;\n          result = 'Pass';\n        } else {\n          textNode.color = 0xff0000ff;\n          result = `Fail (${factoryRuns})`;\n        }\n        textNode.text += `: ${result}`;\n        if (result === 'Pass') resolve(true);\n        else reject({ setKey, factoryRuns });\n      }, 50);\n    });\n  }\n\n  await execTest(80, '1 - No key', false);\n  await execTest(400, '2 - With key', true);\n}\n"],"names":["automation","settings","__async","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","test","snapshot","stop","_0","arguments","_ref","renderer","testRoot","_callee2","randomColor","rnd","FONT_SIZE","execTest","_callee2$","_context2","_execTest","y","title","setKey","textNode","createTextNode","text","fontSize","parent","factoryRuns","factory","canvas","document","createElement","width","height","ctx","getContext","Error","i","fillStyle","fillRect","getImageData","createNode","color","x","texture","createTexture","src","key","concat","Promise","resolve","reject","setTimeout","result","randomInt","Math","floor","random","pow","hexString","toString","padStart","min","max","offsetY"],"mappings":"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"}