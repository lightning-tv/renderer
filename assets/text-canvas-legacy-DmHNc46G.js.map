{"version":3,"file":"text-canvas-legacy-DmHNc46G.js","sources":["../../tests/text-canvas.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nconst Colors = {\n  Black: 0x000000ff,\n  Red: 0xff0000ff,\n  Green: 0x00ff00ff,\n  Blue: 0x0000ffff,\n  Magenta: 0xff00ffff,\n  Gray: 0x7f7f7fff,\n  White: 0xffffffff,\n};\n\nconst randomIntBetween = (from: number, to: number) =>\n  Math.floor(Math.random() * (to - from + 1) + from);\n\n/**\n * Tests that Single-Channel Signed Distance Field (SSDF) fonts are rendered\n * correctly.\n *\n * Text that is thinner than the certified snapshot may indicate that the\n * SSDF font atlas texture was premultiplied before being uploaded to the GPU.\n *\n * @param settings\n * @returns\n */\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n\n  // Set a smaller snapshot area\n  // testRoot.width = 200;\n  // testRoot.height = 200;\n  // testRoot.color = 0xffffffff;\n\n  const nodes: any[] = [];\n\n  const renderNode = (t: string) => {\n    const node = renderer.createTextNode({\n      x: Math.random() * 1900,\n      y: Math.random() * 1080,\n      text: 'CANVAS ' + t,\n      fontFamily: 'sans-serif',\n      parent: testRoot,\n      fontSize: 80,\n    });\n\n    nodes.push(node);\n\n    // pick random color from Colors\n    node.color =\n      Object.values(Colors)[\n        randomIntBetween(0, Object.keys(Colors).length - 1)\n      ] || 0xff0000ff;\n  };\n\n  const spawn = (amount = 1) => {\n    for (let i = 0; i < amount; i++) {\n      renderNode(i.toString());\n    }\n  };\n\n  const despawn = (amount = 100) => {\n    for (let i = 0; i < amount; i++) {\n      const node = nodes.pop();\n      node.destroy();\n    }\n  };\n\n  const move = () => {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      node.x = randomIntBetween(0, 1600);\n      node.y = randomIntBetween(0, 880);\n    }\n  };\n\n  const newColor = () => {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      node.color =\n        Object.values(Colors)[\n          randomIntBetween(0, Object.keys(Colors).length - 1)\n        ] || 0x000000ff;\n    }\n  };\n\n  let animating = false;\n  const animate = () => {\n    animating = !animating;\n\n    const animateNode = (node: any) => {\n      nodes.forEach((node) => {\n        node\n          .animate(\n            {\n              x: randomIntBetween(20, 1740),\n              y: randomIntBetween(20, 900),\n              rotation: Math.random() * Math.PI,\n            },\n            {\n              duration: 3000,\n              easing: 'ease-out',\n            },\n          )\n          .start();\n      });\n    };\n\n    const animateRun = () => {\n      if (animating) {\n        for (let i = 0; i < nodes.length; i++) {\n          animateNode(nodes[i]);\n        }\n        setTimeout(animateRun, 3050);\n      }\n    };\n\n    animateRun();\n  };\n\n  window.addEventListener('keydown', (event) => {\n    if (event.key === 'ArrowUp') {\n      spawn();\n    } else if (event.key === 'ArrowDown') {\n      despawn();\n    } else if (event.key === 'ArrowLeft') {\n      move();\n    } else if (event.key === 'ArrowRight') {\n      move();\n    } else if (event.key === '1') {\n      newColor();\n    } else if (event.key === ' ') {\n      animate();\n    }\n  });\n\n  spawn();\n}\n"],"names":["Colors","Black","Red","Green","Blue","Magenta","Gray","White","randomIntBetween","from","to","Math","floor","random","test","settings","__async","_regeneratorRuntime","mark","_callee","renderer","testRoot","nodes","renderNode","spawn","despawn","move","newColor","animating","animate","wrap","_callee$","_context","prev","next","t","node","createTextNode","x","y","text","fontFamily","parent","fontSize","push","color","Object","values","keys","length","amount","arguments","undefined","i","toString","pop","destroy","animateNode","forEach","rotation","PI","duration","easing","start","animateRun","setTimeout","window","addEventListener","event","key","stop"],"mappings":"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"}