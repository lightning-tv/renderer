{"version":3,"file":"text-max-lines-DrqZC3KX.js","sources":["../../tests/text-max-lines.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ITextNodeProps, RendererMain } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows, type TestRow } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\nimport { getLoremIpsum } from '../common/LoremIpsum.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    title: 'Text Max Lines',\n  });\n\n  await paginateTestRows(pageContainer, [\n    ...generateMaxLinesTest(renderer, 'sdf'),\n    null,\n    ...generateMaxLinesTest(renderer, 'canvas'),\n  ]);\n\n  return pageContainer;\n}\n\nconst BASE_NODE_PROPS = {\n  x: 100,\n  y: 100,\n  width: 200,\n  color: 0x000000ff,\n  fontFamily: 'Ubuntu',\n  textRendererOverride: 'sdf',\n  fontSize: 20,\n  lineHeight: 28,\n  contain: 'width',\n} satisfies Partial<ITextNodeProps>;\n\nfunction generateMaxLinesTest(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n): TestRow[] {\n  return [\n    {\n      title: `Wrapped + Explicit Lines ('maxLines', ${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...BASE_NODE_PROPS,\n          text: 'Line1 Line1_Line1_Line1\\nLine2 Line2____Line2\\nLine 3\\nLine 4',\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n\n        const position = {\n          x: 0,\n          y: 0,\n        };\n\n        baselineNode.x = position.x;\n        baselineNode.y = position.y;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'maxLines: 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 1,\n          }),\n          '2 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 2,\n          }),\n          '3 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 3,\n          }),\n          '4 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 4,\n          }),\n          '5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 5,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Lorem Ipsum ('maxLines', ${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...BASE_NODE_PROPS,\n          text: getLoremIpsum(100),\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n\n        const position = {\n          x: 0,\n          y: 0,\n        };\n\n        baselineNode.x = position.x;\n        baselineNode.y = position.y;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'maxLines: 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 1,\n          }),\n          '2 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 2,\n          }),\n          '3 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 3,\n          }),\n          '4 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 4,\n          }),\n          '5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            maxLines: 5,\n          }),\n        ]);\n      },\n    },\n  ] satisfies TestRow[];\n}\n"],"names":[],"mappings":"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"}