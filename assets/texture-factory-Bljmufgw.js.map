{"version":3,"file":"texture-factory-Bljmufgw.js","sources":["../../tests/texture-factory.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot single page\n  await test(settings);\n  await settings.snapshot();\n}\n\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const randomColor = () => {\n    const randomInt = Math.floor(Math.random() * Math.pow(2, 32));\n    const hexString = randomInt.toString(16).padStart(8, '0');\n\n    return `#${hexString}`;\n  };\n  const rnd = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const FONT_SIZE = 45;\n\n  renderer.createTextNode({\n    text: `Texture Factory Test`,\n    fontSize: FONT_SIZE,\n    offsetY: -5,\n    parent: testRoot,\n  });\n\n  function execTest(\n    y: number,\n    title: string,\n    setKey: boolean,\n  ): Promise<boolean> {\n    const textNode = renderer.createTextNode({\n      text: title,\n      fontSize: FONT_SIZE,\n      y: y,\n      parent: testRoot,\n    });\n\n    let factoryRuns = 0;\n\n    const factory = () => {\n      factoryRuns++;\n      const canvas = document.createElement('canvas');\n      canvas.width = 300;\n      canvas.height = 200;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) throw new Error('Unable to create canvas 2d context');\n      for (let i = 0; i < 10; i++) {\n        ctx.fillStyle = randomColor();\n        ctx.fillRect(rnd(0, 280), rnd(0, 180), rnd(20, 200), rnd(20, 100));\n      }\n      return ctx.getImageData(0, 0, 300, 200);\n    };\n\n    renderer.createNode({\n      color: 0xffffffff,\n      x: 20,\n      y: y + 80,\n      width: 300,\n      height: 200,\n      parent: testRoot,\n      texture: renderer.createTexture('ImageTexture', {\n        src: factory,\n        key: setKey ? `test-key-${y}` : undefined,\n      }),\n    });\n\n    renderer.createNode({\n      color: 0xffffffff,\n      x: 340,\n      y: y + 80,\n      width: 300,\n      height: 200,\n      parent: testRoot,\n      texture: renderer.createTexture('ImageTexture', {\n        src: factory,\n        key: setKey ? `test-key-${y}` : undefined,\n      }),\n    });\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let result = '';\n        if ((setKey && factoryRuns === 1) || (!setKey && factoryRuns === 2)) {\n          textNode.color = 0x00ff00ff;\n          result = 'Pass';\n        } else {\n          textNode.color = 0xff0000ff;\n          result = `Fail (${factoryRuns})`;\n        }\n        textNode.text += `: ${result}`;\n        if (result === 'Pass') resolve(true);\n        else reject({ setKey, factoryRuns });\n      }, 50);\n    });\n  }\n\n  await execTest(80, '1 - No key', false);\n  await execTest(400, '2 - With key', true);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAqBA,SAAsB,WAAW,UAA2B;AAAA,SAAA,QAAA,MAAA,MAAA,aAAA;AAE1D,UAAM,KAAK,QAAQ;AACnB,UAAM,SAAS;EAAS,CAC1B;AAAA;AAEA,SAA8B,KAAK,IAAyC;AAAzC,SAAA,QAAA,MAAA,WAAA,WAAA,EAAE,UAAU,YAA6B;AAC1E,UAAM,cAAc,MAAM;AAClB,YAAA,YAAY,KAAK,MAAM,KAAK,WAAW,KAAK,IAAI,GAAG,EAAE,CAAC;AAC5D,YAAM,YAAY,UAAU,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAExD,aAAO,IAAI;AAAA,IAAS;AAEhB,UAAA,MAAM,CAAC,KAAa,QAAgB;AACjC,aAAA,KAAK,MAAM,KAAK,OAAA,KAAY,MAAM,MAAM,KAAK,GAAG;AAAA,IAAA;AAGzD,UAAM,YAAY;AAElB,aAAS,eAAe;AAAA,MACtB,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,MACT,QAAQ;AAAA,IAAA,CACT;AAEQ,aAAA,SACP,GACA,OACA,QACkB;AACZ,YAAA,WAAW,SAAS,eAAe;AAAA,QACvC,MAAM;AAAA,QACN,UAAU;AAAA,QACV;AAAA,QACA,QAAQ;AAAA,MAAA,CACT;AAED,UAAI,cAAc;AAElB,YAAM,UAAU,MAAM;AACpB;AACM,cAAA,SAAS,SAAS,cAAc,QAAQ;AAC9C,eAAO,QAAQ;AACf,eAAO,SAAS;AACV,cAAA,MAAM,OAAO,WAAW,IAAI;AAClC,YAAI,CAAC,IAAW,OAAA,IAAI,MAAM,oCAAoC;AAC9D,iBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,cAAI,YAAY;AAChB,cAAI,SAAS,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC;AAAA,QACnE;AACA,eAAO,IAAI,aAAa,GAAG,GAAG,KAAK,GAAG;AAAA,MAAA;AAGxC,eAAS,WAAW;AAAA,QAClB,OAAO;AAAA,QACP,GAAG;AAAA,QACH,GAAG,IAAI;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,SAAS,cAAc,gBAAgB;AAAA,UAC9C,KAAK;AAAA,UACL,KAAK,SAAS,YAAY,YAAM;AAAA,QAAA,CACjC;AAAA,MAAA,CACF;AAED,eAAS,WAAW;AAAA,QAClB,OAAO;AAAA,QACP,GAAG;AAAA,QACH,GAAG,IAAI;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,SAAS,cAAc,gBAAgB;AAAA,UAC9C,KAAK;AAAA,UACL,KAAK,SAAS,YAAY,YAAM;AAAA,QAAA,CACjC;AAAA,MAAA,CACF;AAED,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,mBAAW,MAAM;AACf,cAAI,SAAS;AACb,cAAK,UAAU,gBAAgB,KAAO,CAAC,UAAU,gBAAgB,GAAI;AACnE,qBAAS,QAAQ;AACR,qBAAA;AAAA,UAAA,OACJ;AACL,qBAAS,QAAQ;AACjB,qBAAS,SAAS,oBAAW;AAAA,UAC/B;AACS,mBAAA,QAAQ,KAAK;AAClB,cAAA,WAAW,OAAQ,SAAQ,IAAI;AAAA,cACvB,QAAA,EAAE,QAAQ,YAAA,CAAa;AAAA,WAClC,EAAE;AAAA,MAAA,CACN;AAAA,IACH;AAEM,UAAA,SAAS,IAAI,cAAc,KAAK;AAChC,UAAA,SAAS,KAAK,gBAAgB,IAAI;AAAA,EAAA,CAC1C;AAAA;"}