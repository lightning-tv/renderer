{"version":3,"file":"texture-svg-Dbyv6Byp.js","sources":["../../assets/rocko.svg","../../assets/lightning.svg","../../assets/elevator.svg","../../assets/rocko2.svg","../../tests/texture-svg.ts"],"sourcesContent":["export default \"__VITE_ASSET__GU$b1TMj__\"","export default \"__VITE_ASSET__DUUguiq5__\"","export default \"__VITE_ASSET__LgJxcj8T__\"","export default \"__VITE_ASSET__DNYB3nPF__\"","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type INode,\n  type Dimensions,\n  type NodeLoadedEventHandler,\n  type NodeFailedEventHandler,\n  Texture,\n} from '@lightningjs/renderer';\nimport rockoSvg from '../assets/rocko.svg';\nimport lightning from '../assets/lightning.svg';\nimport elevatorSvg from '../assets/elevator.svg';\nimport rockoSvg2 from '../assets/rocko2.svg';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport async function automation(settings: ExampleSettings) {\n  await test(settings);\n  await settings.snapshot();\n}\n\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const FONT_SIZE = 45;\n  const BEGIN_Y = FONT_SIZE;\n\n  const header = renderer.createTextNode({\n    fontFamily: 'Ubuntu',\n    text: `SVG Test`,\n    fontSize: FONT_SIZE,\n    parent: testRoot,\n  });\n\n  const curX = 0;\n  let curY = BEGIN_Y;\n  let curTest = 1;\n\n  const rocko = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: rockoSvg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(rocko, 181, 218);\n\n  const elevator = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: elevatorSvg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(elevator, 200, 268);\n\n  const lightningNode = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: lightning,\n    height: 25,\n    width: 125,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(lightningNode, 125, 25);\n\n  const partialSvg = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: rockoSvg2,\n    srcX: 100,\n    srcY: 0,\n    srcHeight: 218,\n    srcWidth: 81,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(partialSvg, 81, 218);\n\n  // Test: Check that we capture a texture load failure\n  const failure = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: 'does-not-exist.svg',\n    parent: testRoot,\n  });\n\n  await execFailureTest(failure);\n\n  function waitForTxLoaded(imgNode: INode) {\n    return new Promise<Dimensions>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('TIMEOUT'));\n      }, 1000);\n      imgNode.once('loaded', ((target, payload) => {\n        resolve(payload.dimensions);\n      }) satisfies NodeLoadedEventHandler);\n    });\n  }\n\n  function waitForTxFailed(imgNode: INode) {\n    return new Promise<boolean>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('TIMEOUT'));\n      }, 1000);\n      imgNode.once('failed', (() => {\n        resolve(true);\n      }) satisfies NodeFailedEventHandler);\n    });\n  }\n\n  async function execLoadingTest(\n    imgNode: INode,\n    expectedWidth: number,\n    expectedHeight: number,\n  ) {\n    const textNode = renderer.createTextNode({\n      fontFamily: 'Ubuntu',\n      x: curX,\n      text: '',\n      fontSize: FONT_SIZE,\n      parent: testRoot,\n    });\n\n    let exception: string | false = false;\n    let dimensions: Dimensions = { width: 0, height: 0 };\n    try {\n      dimensions = await waitForTxLoaded(imgNode);\n    } catch (e: unknown) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      exception = (e as any)?.message ?? 'Unknown';\n    }\n\n    imgNode.width = dimensions.width;\n    imgNode.height = dimensions.height;\n\n    textNode.y = imgNode.y + imgNode.height;\n    let result = 'Fail';\n    let expectedPostfix = '';\n    if (\n      !exception &&\n      imgNode.width === expectedWidth &&\n      imgNode.height === expectedHeight\n    ) {\n      textNode.color = 0x00ff00ff;\n      result = 'Pass';\n    } else {\n      textNode.color = 0xff0000ff;\n      if (exception) {\n        expectedPostfix = ` (exception: ${exception})`;\n      } else {\n        expectedPostfix = ` (expected ${expectedWidth}x${expectedHeight})`;\n      }\n    }\n    textNode.text = `${curTest}. Loaded Event Test: ${result} (${imgNode.width}x${imgNode.height})${expectedPostfix}`;\n    curY = textNode.y + FONT_SIZE;\n    curTest++;\n  }\n\n  async function execFailureTest(imgNode: INode) {\n    const textNode = renderer.createTextNode({\n      fontFamily: 'Ubuntu',\n      x: curX,\n      text: '',\n      fontSize: FONT_SIZE,\n      parent: testRoot,\n    });\n\n    let failureTestPass = false;\n    let exception: string | false = false;\n    try {\n      failureTestPass = await waitForTxFailed(imgNode);\n    } catch (e: unknown) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      exception = (e as any)?.message ?? 'Unknown';\n    }\n\n    textNode.y = imgNode.y + imgNode.height;\n    let result = '';\n    if (!exception && failureTestPass) {\n      textNode.color = 0x00ff00ff;\n      result = 'Pass';\n    } else {\n      textNode.color = 0xff0000ff;\n      result = 'Fail';\n      if (exception) {\n        result += ` (exception: ${exception})`;\n      }\n    }\n    textNode.text = `${curTest}. Failure Event Test: ${result}`;\n    curY = textNode.y + FONT_SIZE;\n    curTest++;\n  }\n}\n"],"names":[],"mappings":"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"}