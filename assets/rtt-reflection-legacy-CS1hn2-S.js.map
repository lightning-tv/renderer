{"version":3,"file":"rtt-reflection-legacy-CS1hn2-S.js","sources":["../../tests/rtt-reflection.ts"],"sourcesContent":["import type { ExampleSettings } from '../common/ExampleSettings.js';\n\nconst randomColor = () => {\n  const randomInt = Math.floor(Math.random() * Math.pow(2, 32));\n  const hexString = randomInt.toString(16).padStart(8, '0');\n  return parseInt(hexString, 16);\n};\n\nexport default async function ({ renderer, testRoot }: ExampleSettings) {\n  const node = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: 1920,\n    height: 1080,\n    color: 0x000000ff,\n    parent: testRoot,\n  });\n\n  const rootRenderToTextureNode = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: 1920,\n    height: 540,\n    parent: node,\n    rtt: true,\n    zIndex: 5,\n    color: 0xffffffff,\n  });\n\n  const reflectionNode = renderer.createNode({\n    x: 0,\n    y: 540,\n    width: 1920,\n    height: 540,\n    colorTop: 0xc0ffee00,\n    colorBottom: 0x97abffff,\n    parent: node,\n    scaleY: -1,\n    alpha: 0.8,\n    // Copy source texture from rootRenderToTextureNode\n    texture: rootRenderToTextureNode.texture,\n  });\n\n  new Array(105).fill(0).forEach((_, i) => {\n    const a = renderer.createNode({\n      parent: rootRenderToTextureNode,\n      x: (i % 15) * 120 + 50,\n      y: Math.floor(i / 15) * 140 + 1920,\n      width: 120,\n      height: 120,\n      scale: 0.5,\n      src: `https://picsum.photos/id/${i + 30}/120/120`,\n    });\n\n    const animation = a.animate(\n      {\n        rotation: Math.random() * Math.PI * 2,\n        scale: 1.5,\n        y: Math.floor(i / 15) * 140 + 250,\n      },\n      {\n        duration: Math.random() * 4000 + 3000,\n        loop: true,\n        stopMethod: 'reverse',\n        easing: 'ease-in-out',\n      },\n    );\n    animation.start();\n  });\n\n  const rttLabel = renderer.createTextNode({\n    parent: rootRenderToTextureNode,\n    x: 80,\n    y: 540,\n    fontFamily: 'Ubuntu',\n    fontSize: 40,\n    text: 'RTT reflection demo',\n  });\n\n  const animation = rttLabel.animate(\n    {\n      y: 420,\n    },\n    {\n      duration: 6000,\n      delay: 400,\n      loop: true,\n      stopMethod: 'reverse',\n      easing: 'ease-in-out',\n    },\n  );\n  animation.start();\n\n  setInterval(() => {\n    const a = reflectionNode.animate(\n      {\n        colorTop: randomColor(),\n        colorBottom: randomColor(),\n      },\n      {\n        duration: 4000,\n        easing: 'ease-in-out',\n      },\n    );\n    a.start();\n  }, 4400);\n}\n"],"names":["randomColor","randomInt","Math","floor","random","pow","hexString","toString","padStart","parseInt","rttReflection","_0","__async","arguments","_ref","renderer","testRoot","_regeneratorRuntime","mark","_callee","node","rootRenderToTextureNode","reflectionNode","rttLabel","animation","wrap","_callee$","_context","prev","next","createNode","x","y","width","height","color","parent","rtt","zIndex","colorTop","colorBottom","scaleY","alpha","texture","Array","fill","forEach","_","i","a","scale","src","concat","animate","rotation","PI","duration","loop","stopMethod","easing","start","createTextNode","fontFamily","fontSize","text","delay","setInterval","stop"],"mappings":"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"}