{"version":3,"file":"stress-multi-level-bounds-9Yca5fMd.js","sources":["../../tests/stress-multi-level-bounds.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type INode } from '@lightningjs/renderer';\nimport logo from '../assets/lightning.png';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nconst randomIntBetween = (from: number, to: number) =>\n  Math.floor(Math.random() * (to - from + 1) + from);\n\nexport default async function ({\n  renderer,\n  testRoot,\n  perfMultiplier,\n}: ExampleSettings) {\n  // create nodes\n  const numOuterNodes = 100 * perfMultiplier;\n  const nodes: INode[] = [];\n  let totalNodes = 0;\n\n  const bg = renderer.createNode({\n    width: 1920,\n    height: 1080,\n    color: 0xff1e293b,\n    parent: testRoot,\n  });\n\n  for (let i = 0; i < numOuterNodes; i++) {\n    const container = renderer.createNode({\n      x: Math.random() * (1920 * 2), //going to render out of bounds as well\n      y: Math.random() * (1080 * 2),\n      parent: bg,\n    });\n    const node = renderer.createNode({\n      width: 505,\n      height: 101,\n      src: logo,\n      parent: container,\n    });\n\n    nodes.push(container);\n    totalNodes += 2;\n  }\n\n  console.log(\n    `Created ${numOuterNodes} outer nodes with another node nested inside. Total nodes: ${totalNodes}`,\n  );\n\n  // create 100 animations\n  const animate = () => {\n    nodes.forEach((node) => {\n      node\n        .animate(\n          {\n            x: randomIntBetween(20, 1740 * 2), //going to render out of bounds as well\n            y: randomIntBetween(20, 900 * 2),\n          },\n          {\n            duration: 3000,\n            easing: 'ease-out',\n            loop: false,\n          },\n        )\n        .start();\n    });\n  };\n\n  setInterval(animate, 3000);\n}\n"],"names":["logo"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAuBA,MAAM,mBAAmB,CAAC,MAAc,OACtC,KAAK,MAAM,KAAK,OAAA,KAAY,KAAK,OAAO,KAAK,IAAI;AAEnD,SAAA,uBAA+B,IAIX;AAJW,SAAA,QAAA,MAAA,WAAA,WAAA;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GACkB;AAElB,UAAM,gBAAgB,MAAM;AAC5B,UAAM,QAAiB,CAAA;AACvB,QAAI,aAAa;AAEX,UAAA,KAAK,SAAS,WAAW;AAAA,MAC7B,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AAED,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AAChC,YAAA,YAAY,SAAS,WAAW;AAAA,QACpC,GAAG,KAAK,YAAY,OAAO;AAAA;AAAA,QAC3B,GAAG,KAAK,YAAY,OAAO;AAAA,QAC3B,QAAQ;AAAA,MAAA,CACT;AACY,eAAS,WAAW;AAAA,QAC/B,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,KAAKA;AAAAA,QACL,QAAQ;AAAA,MAAA,CACT;AAED,YAAM,KAAK,SAAS;AACN,oBAAA;AAAA,IAChB;AAEQ,YAAA;AAAA,MACN,WAAW,sBAAa,+DAA8D;AAAA,IAAU;AAIlG,UAAM,UAAU,MAAM;AACd,YAAA,QAAQ,CAAC,SAAS;AAEnB,aAAA;AAAA,UACC;AAAA,YACE,GAAG,iBAAiB,IAAI,OAAO,CAAC;AAAA;AAAA,YAChC,GAAG,iBAAiB,IAAI,MAAM,CAAC;AAAA,UACjC;AAAA,UACA;AAAA,YACE,UAAU;AAAA,YACV,QAAQ;AAAA,YACR,MAAM;AAAA,UACR;AAAA,UAED,MAAM;AAAA,MAAA,CACV;AAAA,IAAA;AAGH,gBAAY,SAAS,GAAI;AAAA,EAAA,CAC3B;AAAA;"}