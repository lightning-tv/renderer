{"version":3,"file":"textures-BXzhtZxm.js","sources":["../../tests/textures.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type INode,\n  type Dimensions,\n  type NodeLoadedEventHandler,\n  type NodeFailedEventHandler,\n} from '@lightningjs/renderer';\nimport rockoImg from '../assets/rocko.png';\nimport elevatorImg from '../assets/elevator.png';\nimport spritemap from '../assets/spritemap.png';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport async function automation(settings: ExampleSettings) {\n  await test(settings);\n  await settings.snapshot();\n}\n\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const FONT_SIZE = 45;\n  const BEGIN_Y = FONT_SIZE;\n\n  const header = renderer.createTextNode({\n    fontFamily: 'Ubuntu',\n    text: `Texture Test`,\n    fontSize: FONT_SIZE,\n    parent: testRoot,\n  });\n\n  let curX = 0;\n  let curY = BEGIN_Y;\n  let curTest = 1;\n\n  const rocko = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: rockoImg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(rocko, 181, 218);\n\n  // Test: Make sure events are still sent for textures that have been previously\n  // loaded\n\n  const rocko2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: rockoImg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(rocko2, 181, 218);\n\n  const elevator = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: elevatorImg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(elevator, 200, 268);\n\n  // Test: Check that we capture a texture load failure\n  const failure = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: 'does-not-exist.png',\n    parent: testRoot,\n  });\n\n  await execFailureTest(failure);\n\n  // Test: Check that we capture a texture load failure\n  const failure2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: 'does-not-exist.png',\n    parent: testRoot,\n  });\n\n  await execFailureTest(failure2);\n\n  // Test: NoiseTexture\n\n  curX = renderer.settings.appWidth / 2;\n  curY = BEGIN_Y;\n\n  const noiseTexture = renderer.createTexture('NoiseTexture', {\n    width: 100,\n    height: 100,\n  });\n\n  const noise = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: noiseTexture,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(noise, 100, 100);\n\n  // Test: NoiseTexture 2\n  const noise2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: noiseTexture,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(noise2, 100, 100);\n\n  // Test: SubTexture Load\n  const spriteMapTexture = renderer.createTexture('ImageTexture', {\n    src: spritemap,\n  });\n\n  const frames = Array.from(Array(32).keys()).map((i) => {\n    const x = (i % 8) * 100;\n    const y = Math.floor(i / 8) * 150;\n    return renderer.createTexture('SubTexture', {\n      texture: spriteMapTexture,\n      x,\n      y,\n      width: 100,\n      height: 150,\n    });\n  });\n\n  const subTextureNode = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: frames[0],\n    parent: testRoot,\n  });\n\n  await execLoadingTest(subTextureNode, 100, 150);\n\n  // Test: SubTexture Load 2\n  const subTextureNode2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: frames[0],\n    parent: testRoot,\n  });\n\n  await execLoadingTest(subTextureNode2, 100, 150);\n\n  // Test: SubTetxure Failure\n  const failureTexture = renderer.createTexture('ImageTexture', {\n    src: 'does-not-exist.png',\n  });\n\n  const failureFrames = Array.from(Array(32).keys()).map((i) => {\n    const x = (i % 8) * 120;\n    const y = Math.floor(i / 8) * 120;\n    return renderer.createTexture('SubTexture', {\n      texture: failureTexture,\n      x,\n      y,\n      width: 120,\n      height: 120,\n    });\n  });\n\n  const subTxFailure = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: failureFrames[0],\n    parent: testRoot,\n  });\n\n  await execFailureTest(subTxFailure);\n\n  // Test: SubTexture Failure 2\n\n  const subTxFailure2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: failureFrames[0],\n    parent: testRoot,\n  });\n\n  await execFailureTest(subTxFailure2);\n\n  function waitForTxLoaded(imgNode: INode) {\n    return new Promise<Dimensions>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('TIMEOUT'));\n      }, 1000);\n      imgNode.once('loaded', ((target, payload) => {\n        resolve(payload.dimensions);\n      }) satisfies NodeLoadedEventHandler);\n    });\n  }\n\n  function waitForTxFailed(imgNode: INode) {\n    return new Promise<boolean>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('TIMEOUT'));\n      }, 1000);\n      imgNode.once('failed', (() => {\n        resolve(true);\n      }) satisfies NodeFailedEventHandler);\n    });\n  }\n\n  async function execLoadingTest(\n    imgNode: INode,\n    expectedWidth: number,\n    expectedHeight: number,\n  ) {\n    const textNode = renderer.createTextNode({\n      fontFamily: 'Ubuntu',\n      x: curX,\n      text: '',\n      fontSize: FONT_SIZE,\n      parent: testRoot,\n    });\n\n    let exception: string | false = false;\n    let dimensions: Dimensions = { width: 0, height: 0 };\n    try {\n      dimensions = await waitForTxLoaded(imgNode);\n    } catch (e: unknown) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      exception = (e as any)?.message ?? 'Unknown';\n    }\n\n    imgNode.width = dimensions.width;\n    imgNode.height = dimensions.height;\n\n    textNode.y = imgNode.y + imgNode.height;\n    let result = 'Fail';\n    let expectedPostfix = '';\n    if (\n      !exception &&\n      imgNode.width === expectedWidth &&\n      imgNode.height === expectedHeight\n    ) {\n      textNode.color = 0x00ff00ff;\n      result = 'Pass';\n    } else {\n      textNode.color = 0xff0000ff;\n      if (exception) {\n        expectedPostfix = ` (exception: ${exception})`;\n      } else {\n        expectedPostfix = ` (expected ${expectedWidth}x${expectedHeight})`;\n      }\n    }\n    textNode.text = `${curTest}. Loaded Event Test: ${result} (${imgNode.width}x${imgNode.height})${expectedPostfix}`;\n    curY = textNode.y + FONT_SIZE;\n    curTest++;\n  }\n\n  async function execFailureTest(imgNode: INode) {\n    const textNode = renderer.createTextNode({\n      fontFamily: 'Ubuntu',\n      x: curX,\n      text: '',\n      fontSize: FONT_SIZE,\n      parent: testRoot,\n    });\n\n    let failureTestPass = false;\n    let exception: string | false = false;\n    try {\n      failureTestPass = await waitForTxFailed(imgNode);\n    } catch (e: unknown) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      exception = (e as any)?.message ?? 'Unknown';\n    }\n\n    textNode.y = imgNode.y + imgNode.height;\n    let result = '';\n    if (!exception && failureTestPass) {\n      textNode.color = 0x00ff00ff;\n      result = 'Pass';\n    } else {\n      textNode.color = 0xff0000ff;\n      result = 'Fail';\n      if (exception) {\n        result += ` (exception: ${exception})`;\n      }\n    }\n    textNode.text = `${curTest}. Failure Event Test: ${result}`;\n    curY = textNode.y + FONT_SIZE;\n    curTest++;\n  }\n}\n"],"names":[],"mappings":"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"}