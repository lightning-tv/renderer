{"version":3,"file":"scaling-legacy-DKo_4lC0.js","sources":["../../tests/scaling.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { INodeProps } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\nimport robotImg from '../assets/robot/robot.png';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    title: 'Scaling',\n  });\n\n  await paginateTestRows(pageContainer, [\n    {\n      title: 'Base Node (`scale`, mount = 0)',\n      content: async (rowNode) => {\n        // The three Base Node test rows should render identically despite\n        // different mount values, as the x/y coordinates are shifted appropriately\n        // to cancel out the difference in mount.\n        const nodeProps = {\n          // mount: 0, (should be default)\n          x: 50,\n          y: 50,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scale: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scale: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scale: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scale`, mount = 0.5)',\n      content: async (rowNode) => {\n        const nodeProps = {\n          mount: 0.5,\n          x: 100,\n          y: 100,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scale: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scale: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scale: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scale`, mount = 1)',\n      content: async (rowNode) => {\n        const nodeProps = {\n          mount: 1,\n          x: 150,\n          y: 150,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scale: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scale: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scale: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scaleX`, mount = 0)',\n      content: async (rowNode) => {\n        // The three Base Node test rows should render identically despite\n        // different mount values, as the x/y coordinates are shifted appropriately\n        // to cancel out the difference in mount.\n        const nodeProps = {\n          // mount: 0, (should be default)\n          x: 50,\n          y: 50,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scaleX: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scaleX: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scaleX: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scaleX`, mount = 0.5)',\n      content: async (rowNode) => {\n        const nodeProps = {\n          mount: 0.5,\n          x: 100,\n          y: 100,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scaleX: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scaleX: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scaleX: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scaleX`, mount = 1)',\n      content: async (rowNode) => {\n        const nodeProps = {\n          mount: 1,\n          x: 150,\n          y: 150,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scaleX: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scaleX: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scaleX: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scaleY`, mount = 0)',\n      content: async (rowNode) => {\n        // The three Base Node test rows should render identically despite\n        // different mount values, as the x/y coordinates are shifted appropriately\n        // to cancel out the difference in mount.\n        const nodeProps = {\n          // mount: 0, (should be default)\n          x: 50,\n          y: 50,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scaleY: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scaleY: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scaleY: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scaleY`, mount = 0.5)',\n      content: async (rowNode) => {\n        const nodeProps = {\n          mount: 0.5,\n          x: 100,\n          y: 100,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scaleY: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scaleY: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scaleY: 2,\n          }),\n        ]);\n      },\n    },\n    {\n      title: 'Base Node (`scaleY`, mount = 1)',\n      content: async (rowNode) => {\n        const nodeProps = {\n          mount: 1,\n          x: 150,\n          y: 150,\n          width: 100,\n          height: 100,\n          src: robotImg,\n        } satisfies Partial<INodeProps>;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          renderer.createNode({\n            ...nodeProps,\n          }),\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createNode({\n            ...nodeProps,\n            scaleY: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 0,\n            scaleY: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createNode({\n            ...nodeProps,\n            pivot: 1,\n            scaleY: 2,\n          }),\n        ]);\n      },\n    },\n  ]);\n\n  return pageContainer;\n}\n"],"names":["automation","settings","__async","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","test","sent","snapshotPages","stop","_callee11","_this","renderer","pageContainer","_callee11$","_context11","PageContainer","width","appWidth","height","appHeight","title","paginateTestRows","content","rowNode","_callee2","nodeProps","_callee2$","_context2","x","y","src","robotImg","constructTestRow","createNode","__spreadValues","__spreadProps","scale","pivot","abrupt","_callee3","_callee3$","_context3","mount","_callee4","_callee4$","_context4","_callee5","_callee5$","_context5","scaleX","_callee6","_callee6$","_context6","_callee7","_callee7$","_context7","_callee8","_callee8$","_context8","scaleY","_callee9","_callee9$","_context9","_callee10","_callee10$","_context10"],"mappings":"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"}