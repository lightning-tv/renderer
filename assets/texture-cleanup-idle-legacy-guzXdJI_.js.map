{"version":3,"file":"texture-cleanup-idle-legacy-guzXdJI_.js","sources":["../../tests/texture-cleanup-idle.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INode, RendererMainSettings } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport function customSettings(): Partial<RendererMainSettings> {\n  return {\n    textureMemory: {\n      cleanupInterval: 5000,\n      debugLogging: true,\n    },\n  };\n}\n\nconst COLORS = [\n  0xff0000ff, // Red\n  0x00ff00ff, // Green\n  0x0000ffff, // Blue\n  0xffff00ff, // Yellow\n  0xff00ffff, // Magenta\n  0x00ffffff, // Cyan\n  0xffffffff, // White\n];\n\n/**\n * Function that chooses a random color from the `COLORS` array\n */\nfunction randomColor() {\n  return COLORS[Math.floor(Math.random() * COLORS.length)];\n}\n\nfunction delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport default async function ({ renderer, testRoot }: ExampleSettings) {\n  renderer.createTextNode({\n    x: 0,\n    y: 0,\n    text: 'Idle Texture Memory Cleanup Test',\n    parent: testRoot,\n    fontFamily: 'Ubuntu',\n    fontSize: 60,\n    zIndex: 1,\n  });\n\n  renderer.createTextNode({\n    x: 0,\n    y: 100,\n    width: renderer.settings.appWidth,\n    contain: 'width',\n    text: `This test will create and display a grid of random NoiseTexture nodes and move them off of the bounds margin every second.\n\nThe Texture Memory Manager should perform Idle Texture Cleanup roughly every 5 seconds.\n\nSee docs/ManualRegressionTests.md for more information.\n    `,\n    parent: testRoot,\n    fontFamily: 'Ubuntu',\n    fontSize: 40,\n    zIndex: 1,\n  });\n\n  const screenWidth = renderer.settings.appWidth;\n  const screenHeight = renderer.settings.appHeight;\n  const gridWidth = 4;\n  const gridHeight = 2;\n  const nodeWidth = screenWidth / gridWidth;\n  const nodeHeight = screenHeight / gridHeight;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const curNodes: INode[] = [];\n    // Create a 4x2 grid of nodes\n    for (let i = 0; i < gridWidth; i++) {\n      for (let j = 0; j < gridHeight; j++) {\n        const node = renderer.createNode({\n          x: i * nodeWidth,\n          y: j * nodeHeight,\n          width: nodeWidth,\n          height: nodeHeight,\n          parent: testRoot,\n          color: randomColor(),\n          texture: renderer.createTexture('NoiseTexture', {\n            width: nodeWidth,\n            height: nodeHeight,\n            cacheId: Math.floor(Math.random() * 100000),\n          }),\n          textureOptions: {\n            preload: true,\n          },\n        });\n        curNodes.push(node);\n      }\n    }\n    await delay(1000);\n    // Move all nodes offscreen beyond the bounds margin\n    for (const node of curNodes) {\n      node.x = -screenWidth * 2;\n      node.y = -screenHeight * 2;\n      node.on('freed', (thisNode: INode) => {\n        thisNode.destroy();\n      });\n    }\n  }\n}\n"],"names":["customSettings","textureMemory","cleanupInterval","debugLogging","COLORS","randomColor","Math","floor","random","length","delay","ms","Promise","resolve","setTimeout","textureCleanupIdle","_0","__async","arguments","_ref","renderer","testRoot","_regeneratorRuntime","mark","_callee","screenWidth","screenHeight","gridWidth","gridHeight","nodeWidth","nodeHeight","curNodes","i","j","node","_i","_curNodes","_node","wrap","_callee$","_context","prev","next","createTextNode","x","y","text","parent","fontFamily","fontSize","zIndex","width","settings","appWidth","contain","appHeight","createNode","height","color","texture","createTexture","cacheId","textureOptions","preload","push","on","thisNode","destroy","stop"],"mappings":"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"}