{"version":3,"file":"paginateTestRows-legacy-DpUfmeYm.js","sources":["../../common/paginateTestRows.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INode } from '@lightningjs/renderer';\nimport { assertTruthy } from '@lightningjs/renderer/utils';\nimport { PageContainer } from './PageContainer.js';\n\nconst HEADER_FONT_SIZE = 30;\nconst PADDING = 20;\n\nexport type RowConstructor = (pageNode: INode) => Promise<INode>;\nexport type RowContentConstructor = (rowNode: INode) => Promise<number>;\n\nexport interface TestRowDesc {\n  title: string;\n  content: RowContentConstructor;\n}\n\nexport type TestRow = TestRowDesc | null;\n\nfunction createPageConstructor(curPageRowConstructors: RowConstructor[]) {\n  return async function (\n    rowConstructors: RowConstructor[],\n    pageNode: INode,\n  ): Promise<void> {\n    let curY = 0;\n    for (const rowConstructor of rowConstructors) {\n      const rowNode = await rowConstructor(pageNode);\n      rowNode.y = curY;\n      curY += rowNode.height;\n    }\n  }.bind(null, curPageRowConstructors);\n}\n\n/**\n * Paginate a list of test rows\n *\n * @remarks\n * `null` values in the testRows array will be treated as manual page breaks\n *\n * @param pageContainer\n * @param testRows\n */\nexport async function paginateTestRows(\n  pageContainer: PageContainer,\n  testRows: (TestRow | null)[],\n) {\n  const renderer = pageContainer.renderer;\n  assertTruthy(renderer.root);\n  let pageCurY = 0;\n  let curPageRowConstructors: RowConstructor[] = [];\n  let curRowIndex = 0;\n  for (const testRow of testRows) {\n    const isLastRow = curRowIndex === testRows.length - 1;\n    let newRowConstructor: RowConstructor | null =\n      testRow &&\n      (async (pageNode: INode) => {\n        assertTruthy(testRow);\n        const rowContainer = renderer.createNode({\n          x: 0,\n          y: pageCurY,\n          width: pageContainer.contentWidth,\n          height: 0,\n          color: 0x00000000,\n          parent: pageNode,\n        });\n        const rowHeaderNode = renderer.createTextNode({\n          fontFamily: 'Ubuntu',\n          fontSize: HEADER_FONT_SIZE,\n          y: PADDING,\n          parent: rowContainer,\n        });\n        const rowNode = renderer.createNode({\n          y: HEADER_FONT_SIZE + PADDING * 2,\n          width: pageContainer.contentWidth,\n          height: 0,\n          color: 0x00000000,\n          parent: rowContainer,\n        });\n        const rowHeight = await testRow.content(rowNode);\n        rowNode.height = rowHeight;\n        rowHeaderNode.text = testRow.title;\n        rowContainer.height = HEADER_FONT_SIZE + PADDING * 2 + rowNode.height;\n        return rowContainer;\n      });\n\n    let itFits = false;\n    let tmpRowContainer: INode | undefined;\n    // debugger;\n    if (newRowConstructor) {\n      // Construct the row just to get its height\n      tmpRowContainer = await newRowConstructor(renderer.root);\n      // curPageRowConstructors.push(newRowConstructor);\n      // If it fits, add it to the current page\n      itFits = pageCurY + tmpRowContainer.height <= pageContainer.contentHeight;\n      if (itFits) {\n        curPageRowConstructors.push(newRowConstructor);\n        pageCurY += tmpRowContainer.height;\n        newRowConstructor = null;\n      }\n    }\n\n    // If it doesn't fit OR it's the last row, add the current page to the page container and start a new page\n    if (!itFits || isLastRow) {\n      const pageConstructor = createPageConstructor(curPageRowConstructors);\n      pageContainer.pushPage(pageConstructor);\n\n      pageCurY = tmpRowContainer?.height || 0;\n      curPageRowConstructors = [];\n      if (newRowConstructor) {\n        curPageRowConstructors.push(newRowConstructor);\n      }\n\n      if (isLastRow && !itFits && curPageRowConstructors.length > 0) {\n        const pageConstructor = createPageConstructor(curPageRowConstructors);\n        pageContainer.pushPage(pageConstructor);\n      }\n    }\n    if (tmpRowContainer) {\n      tmpRowContainer.parent = null;\n      tmpRowContainer.destroy();\n    }\n\n    curRowIndex++;\n  }\n  pageContainer.finalizePages();\n}\n"],"names":["HEADER_FONT_SIZE","PADDING","createPageConstructor","curPageRowConstructors","rowConstructors","pageNode","__async","_regeneratorRuntime","mark","_callee","curY","_iterator","_step","rowConstructor","rowNode","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","sent","y","height","t0","e","f","finish","stop","bind","paginateTestRows","pageContainer","testRows","_callee3","_this","renderer","pageCurY","curRowIndex","_iterator2","_step2","_loop","_callee3$","_context4","assertTruthy","root","testRow","isLastRow","newRowConstructor","itFits","tmpRowContainer","pageConstructor","pageConstructor2","_loop$","_context3","length","_callee2","rowContainer","rowHeaderNode","rowHeight","_callee2$","_context2","createNode","x","width","contentWidth","color","parent","createTextNode","fontFamily","fontSize","content","text","title","abrupt","contentHeight","push","pushPage","destroy","delegateYield","t1","finalizePages"],"mappings":"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"}