{"version":3,"file":"text-alpha-legacy-BaCmDur7.js","sources":["../../tests/text-alpha.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  INodeProps,\n  ITextNodeProps,\n  RendererMain,\n} from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows, type TestRow } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\n\nconst containerSize = 100;\n\nconst NODE_PROPS = {\n  mount: 0.5,\n  x: containerSize / 2,\n  y: containerSize / 2,\n  color: 0x000000ff,\n  text: 'xyz',\n  fontFamily: 'Ubuntu',\n  textRendererOverride: 'sdf',\n  fontSize: 50,\n} satisfies Partial<ITextNodeProps>;\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    parent: testRoot,\n    title: 'Text Alpha',\n  });\n\n  await paginateTestRows(pageContainer, [\n    ...generateAlphaTest(renderer, 'sdf'),\n    ...generateAlphaTest(renderer, 'canvas'),\n  ]);\n\n  return pageContainer;\n}\n\nfunction generateAlphaTest(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n): TestRow[] {\n  return [\n    {\n      title: `Direct Alpha Prop (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          renderer.createTextNode({\n            ...nodeProps,\n          }),\n          'alpha 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0.5,\n          }),\n          'alpha 0.05 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0.05,\n          }),\n          'alpha 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Parent Alpha Prop (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 1.0,\n          }),\n          'alpha 0.5 ->',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0.5,\n          }),\n          'alpha 0.05 ->',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0.05,\n          }),\n          'alpha 0 ->',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Direct Alpha Prop + Color Alpha (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 1.0,\n            color: 0x000000ff,\n          }),\n          'color.a -> 0.5',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 1.0,\n            color: 0x00000080,\n          }),\n          'alpha -> 0.5',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0.5,\n            color: 0x00000080,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Parent Alpha Prop + Color Alpha (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 1.0,\n            color: 0xff0000ff,\n          }),\n          'container\\n  .color.a -> 0.5',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 1.0,\n            // Just changing the color alpha of the container doesn't affect\n            // the contained text's alpha\n            color: 0xff000080,\n          }),\n          'container\\n  .alpha -> 0.5',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0.5,\n            color: 0xff000080,\n          }),\n        ]);\n      },\n    },\n    null,\n  ] satisfies TestRow[];\n}\n\nfunction createContainedTextNode(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n  containerProps: Partial<INodeProps>,\n) {\n  const container = renderer.createNode({\n    width: containerSize,\n    height: containerSize,\n    color: 0x00ff00ff,\n    ...containerProps,\n  });\n  renderer.createTextNode({\n    ...NODE_PROPS,\n    textRendererOverride: textRenderer,\n    parent: container,\n    // alpha: 0.50,\n  });\n  return container;\n}\n"],"names":["containerSize","NODE_PROPS","mount","x","y","color","text","fontFamily","textRendererOverride","fontSize","automation","settings","__async","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","test","sent","snapshotPages","stop","_callee2","renderer","testRoot","pageContainer","_callee2$","_context2","PageContainer","width","appWidth","height","appHeight","parent","title","paginateTestRows","concat","_toConsumableArray","generateAlphaTest","abrupt","textRenderer","_this","content","rowNode","_callee3","nodeProps","_callee3$","_context3","__spreadProps","constructTestRow","createTextNode","__spreadValues","alpha","_callee4","_callee4$","_context4","createContainedTextNode","_callee5","_callee5$","_context5","_callee6","_callee6$","_context6","containerProps","container","createNode"],"mappings":"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"}