{"version":3,"file":"text-dimensions-legacy-BRcF0nTB.js","sources":["../../tests/text-dimensions.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { waitForLoadedDimensions } from '../common/utils.js';\n\nexport async function automation(settings: ExampleSettings) {\n  const next = await test(settings);\n  await settings.snapshot();\n  while (await next()) {\n    await settings.snapshot();\n  }\n}\n\n/**\n * Tests that the dimensions of a text node are correctly calculated and reported\n * when using SDF and Canvas text renderers and that switching between on\n * a single node them works.\n *\n * Use the 'right arrow' key to advance to the next test.\n *\n * @param settings\n * @returns\n */\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n\n  // Set a smaller snapshot area\n  testRoot.width = 200;\n  testRoot.height = 200;\n  testRoot.color = 0xffffffff;\n\n  const textBg = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    color: 0x00ff00ff,\n    parent: testRoot,\n  });\n\n  const text1 = renderer.createTextNode({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    color: 0x000000ff,\n    fontFamily: 'Ubuntu',\n    textRendererOverride: 'sdf',\n    fontSize: 50,\n    text: '',\n    parent: testRoot,\n  });\n\n  const indexInfo = renderer.createTextNode({\n    x: testRoot.width,\n    y: testRoot.height,\n    mount: 1,\n    width: 0,\n    height: 0,\n    color: 0x000000ff,\n    fontFamily: 'Ubuntu',\n    fontSize: 20,\n    text: '1',\n    parent: testRoot,\n  });\n\n  let i = 0;\n  const mutations = [\n    () => {\n      text1.text = 'SDF';\n      text1.textRendererOverride = 'sdf';\n    },\n    () => {\n      text1.text = 'SDF\\ngyqpj';\n    },\n    () => {\n      text1.text = 'Canvas';\n      text1.textRendererOverride = 'canvas';\n    },\n    () => {\n      text1.text = 'Canvas\\ngyqpj';\n    },\n    () => {\n      // Test one more time with SDF to make sure Canvas\n      text1.text = 'SDF 2nd';\n      text1.textRendererOverride = 'sdf';\n    },\n  ];\n  /**\n   * Run the next mutation in the list\n   *\n   * @param idx\n   * @returns `false` if loop is set to false and we've already gone through all mutations. Otherwise `true`.\n   */\n  async function next(loop = false, idx = i + 1): Promise<boolean> {\n    if (idx > mutations.length - 1) {\n      if (!loop) {\n        return false;\n      }\n      idx = 0;\n    }\n    i = idx;\n    const waitPromise = waitForLoadedDimensions(text1);\n    mutations[i]?.();\n    indexInfo.text = (i + 1).toString();\n    const dimensions = await waitPromise;\n    textBg.width = dimensions.width;\n    textBg.height = dimensions.height;\n    return true;\n  }\n  await next(false, 0);\n\n  window.addEventListener('keydown', (event) => {\n    // When right arrow is pressed, call next\n    if (event.key === 'ArrowRight') {\n      next(true).catch(console.error);\n    }\n  });\n\n  return next;\n}\n"],"names":["automation","settings","__async","_regeneratorRuntime","mark","_callee","next","wrap","_callee$","_context","prev","test","sent","snapshot","stop","_callee3","renderer","testRoot","textBg","text1","indexInfo","i","mutations","_callee3$","_context3","_next","arguments","loop","length","undefined","idx","_callee2","_a","waitPromise","dimensions","_callee2$","_context2","abrupt","waitForLoadedDimensions","call","text","toString","width","height","color","createNode","x","y","parent","createTextNode","fontFamily","textRendererOverride","fontSize","mount","window","addEventListener","event","key","catch","console","error"],"mappings":"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"}