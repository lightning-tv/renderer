{"version":3,"file":"text-legacy-KmRjdWcS.js","sources":["../../tests/text.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type ITextNodeProps,\n  type TextRendererMap,\n  type TrFontFaceMap,\n  type NodeLoadedEventHandler,\n} from '@lightningjs/renderer';\nimport { getLoremIpsum } from '../common/LoremIpsum.js';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport {\n  clearStorage,\n  loadStorage,\n  saveStorage,\n} from '../common/LocalStorage.js';\n\nconst FONT_FAMILY = 'Ubuntu';\nconst HEADER_SIZE = 45;\nconst FONT_SIZE = 40;\n\nconst initialMutableProps: Partial<ITextNodeProps> = {\n  x: 0,\n  y: 0,\n  fontFamily: FONT_FAMILY,\n  fontSize: FONT_SIZE,\n  color: 0x000000ff,\n  debug: {\n    sdfShaderDebug: false,\n  },\n};\n\nexport const Colors = {\n  Black: 0x000000ff,\n  Red: 0xff0000ff,\n  Green: 0x00ff00ff,\n  Blue: 0x0000ffff,\n  Magenta: 0xff00ffff,\n  Gray: 0x7f7f7fff,\n  White: 0xffffffff,\n};\n\ninterface LocalStorageData {\n  mutableProps: Partial<ITextNodeProps>;\n  curMode: number;\n  moveStep: number;\n  curColorIdx: number;\n}\n\nconst colors = Object.values(Colors);\n\nexport default async function ({\n  testName,\n  renderer,\n  testRoot,\n}: ExampleSettings) {\n  const savedState = loadStorage<LocalStorageData>(testName);\n\n  let curMode = savedState?.curMode || 0;\n  let moveStep = savedState?.moveStep || 1;\n  let curColorIdx = savedState?.curColorIdx || 0;\n\n  const modes = [\n    'canvas',\n    'ssdf',\n    'msdf',\n    'canvas+ssdf',\n    'canvas+msdf',\n    'ssdf+msdf',\n  ] as const;\n\n  const text = getLoremIpsum();\n\n  const initialProps: Partial<ITextNodeProps> = {\n    ...(savedState?.mutableProps || initialMutableProps),\n    fontFamily: FONT_FAMILY,\n    contain: 'both',\n    scrollable: true,\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    text,\n  };\n\n  const msdfTextNode = renderer.createTextNode({\n    ...initialProps,\n    ...getFontProps('msdf'),\n    zIndex: 1,\n    parent: testRoot,\n  });\n\n  const ssdfTextNode = renderer.createTextNode({\n    ...initialProps,\n    ...getFontProps('ssdf'),\n    zIndex: 2,\n    parent: testRoot,\n  });\n\n  const canvasTextNode = renderer.createTextNode({\n    ...initialProps,\n    ...getFontProps('web'),\n    zIndex: 3,\n    parent: testRoot,\n  });\n\n  const statusNode = renderer.createTextNode({\n    text: '',\n    fontSize: 30,\n    offsetY: -5,\n    zIndex: 100,\n    parent: testRoot,\n  });\n\n  statusNode.on('loaded', ((target: any, { dimensions }) => {\n    statusNode.x = renderer.settings.appWidth - dimensions.width;\n  }) satisfies NodeLoadedEventHandler);\n\n  function updateStatus() {\n    const modeName = modes[curMode];\n    if (!modeName) return;\n    statusNode.text = [\n      `mode: ${modeName}`,\n      `moveStep: ${moveStep}`,\n      `x: ${msdfTextNode.x}`,\n      `y: ${msdfTextNode.y}`,\n      `scrollY: ${msdfTextNode.scrollY}`,\n      `offsetY: ${msdfTextNode.offsetY}`,\n      `fontSize: ${Number(msdfTextNode.fontSize).toFixed(1)}`,\n      `letterSpacing: ${msdfTextNode.letterSpacing}`,\n      `color: ${curColorIdx}`,\n      `fontFamily: ${msdfTextNode.fontFamily}`,\n      `pixelRatio: TBD`,\n      `fps: TBD`,\n    ].join('\\n');\n  }\n\n  function setMode(mode: number) {\n    if (mode < 0) {\n      mode = modes.length - 1;\n    } else if (mode >= modes.length) {\n      mode = 0;\n    }\n    curMode = mode;\n    const modeName = modes[curMode];\n    if (!modeName) return;\n    canvasTextNode.alpha = 0;\n    msdfTextNode.alpha = 0;\n    ssdfTextNode.alpha = 0;\n\n    // Get cur color\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const curColor = colors[curColorIdx]!;\n\n    if (modeName === 'canvas') {\n      canvasTextNode.color = curColor;\n      canvasTextNode.alpha = 1;\n    } else if (modeName === 'ssdf') {\n      ssdfTextNode.color = curColor;\n      ssdfTextNode.alpha = 1;\n    } else if (modeName === 'msdf') {\n      msdfTextNode.color = curColor;\n      msdfTextNode.alpha = 1;\n    } else if (modeName === 'canvas+ssdf') {\n      canvasTextNode.color = Colors.Green;\n      ssdfTextNode.color = curColor;\n      canvasTextNode.alpha = 1;\n      ssdfTextNode.alpha = 1;\n    } else if (modeName === 'canvas+msdf') {\n      canvasTextNode.color = Colors.Green;\n      msdfTextNode.color = curColor;\n      canvasTextNode.alpha = 1;\n      msdfTextNode.alpha = 1;\n    } else if (modeName === 'ssdf+msdf') {\n      ssdfTextNode.color = Colors.Green;\n      msdfTextNode.color = curColor;\n      ssdfTextNode.alpha = 1;\n      msdfTextNode.alpha = 1;\n    }\n  }\n\n  window.addEventListener('keydown', (e) => {\n    let changedState = false;\n    // If Command key is pressed do nothing\n    // Prevents Command+R causing a change of state\n    if (e.metaKey) return;\n\n    if (e.code === 'Escape') {\n      // Clear storage and reload\n      // This is the only key we return early and cause a full page reload.\n      clearStorage(testName);\n      // For some reason we need to wait a tick for the reload to actually happen (on chrome at least)\n      setTimeout(() => {\n        window.location.reload();\n      }, 0);\n      return;\n    } else if (e.code === 'ArrowLeft') {\n      setMode(curMode - 1);\n      changedState = true;\n    } else if (e.code === 'ArrowRight') {\n      setMode(curMode + 1);\n      changedState = true;\n    } else if (e.code === 'ArrowUp') {\n      canvasTextNode.scrollY -= moveStep;\n      ssdfTextNode.scrollY -= moveStep;\n      msdfTextNode.scrollY -= moveStep;\n      changedState = true;\n    } else if (e.code === 'ArrowDown') {\n      canvasTextNode.scrollY += moveStep;\n      ssdfTextNode.scrollY += moveStep;\n      msdfTextNode.scrollY += moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyQ') {\n      moveStep--;\n      changedState = true;\n    } else if (e.code === 'KeyE') {\n      moveStep++;\n      changedState = true;\n    } else if (e.code === 'KeyA') {\n      canvasTextNode.x -= moveStep;\n      ssdfTextNode.x -= moveStep;\n      msdfTextNode.x -= moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyW') {\n      canvasTextNode.y -= moveStep;\n      ssdfTextNode.y -= moveStep;\n      msdfTextNode.y -= moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyS') {\n      canvasTextNode.y += moveStep;\n      ssdfTextNode.y += moveStep;\n      msdfTextNode.y += moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyD') {\n      canvasTextNode.x += moveStep;\n      ssdfTextNode.x += moveStep;\n      msdfTextNode.x += moveStep;\n      changedState = true;\n    } else if (e.code === 'KeyR') {\n      canvasTextNode.fontSize++;\n      ssdfTextNode.fontSize++;\n      msdfTextNode.fontSize++;\n      changedState = true;\n    } else if (e.code === 'KeyF') {\n      canvasTextNode.fontSize--;\n      ssdfTextNode.fontSize--;\n      msdfTextNode.fontSize--;\n      changedState = true;\n    } else if (e.code === 'KeyT') {\n      canvasTextNode.letterSpacing += 1;\n      ssdfTextNode.letterSpacing += 1;\n      msdfTextNode.letterSpacing += 1;\n      changedState = true;\n    } else if (e.code === 'KeyG') {\n      canvasTextNode.letterSpacing -= 1;\n      ssdfTextNode.letterSpacing -= 1;\n      msdfTextNode.letterSpacing -= 1;\n      changedState = true;\n    } else if (e.code === 'KeyZ') {\n      // Decrement color\n      curColorIdx--;\n\n      if (curColorIdx < 0) {\n        curColorIdx = colors.length - 1;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const color = colors[curColorIdx]!;\n      canvasTextNode.color = color;\n      ssdfTextNode.color = color;\n      msdfTextNode.color = color;\n      changedState = true;\n    } else if (e.code === 'KeyX') {\n      // Increment color\n      curColorIdx++;\n\n      if (curColorIdx >= colors.length) {\n        curColorIdx = 0;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const color = colors[curColorIdx]!;\n      canvasTextNode.color = color;\n      ssdfTextNode.color = color;\n      msdfTextNode.color = color;\n      changedState = true;\n    } else if (e.code === 'KeyC') {\n      // canvasTextNode.offsetY += 1;\n      ssdfTextNode.offsetY -= 1;\n      msdfTextNode.offsetY -= 1;\n      changedState = true;\n    } else if (e.code === 'KeyV') {\n      // canvasTextNode.offsetY += 1;\n      ssdfTextNode.offsetY += 1;\n      msdfTextNode.offsetY += 1;\n      changedState = true;\n    } else if (e.code === 'Slash') {\n      // Toggle SDF shader debug\n      canvasTextNode.debug = {\n        ...canvasTextNode.debug,\n        sdfShaderDebug: !canvasTextNode.debug.sdfShaderDebug,\n      };\n      ssdfTextNode.debug = {\n        ...ssdfTextNode.debug,\n        sdfShaderDebug: !ssdfTextNode.debug.sdfShaderDebug,\n      };\n      msdfTextNode.debug = {\n        ...msdfTextNode.debug,\n        sdfShaderDebug: !msdfTextNode.debug.sdfShaderDebug,\n      };\n      changedState = true;\n    }\n\n    if (changedState) {\n      updateStatus();\n\n      // Save state in local storage\n      saveStorage(testName, {\n        curMode: curMode,\n        moveStep: moveStep,\n        curColorIdx: curColorIdx,\n        mutableProps: {\n          x: canvasTextNode.x,\n          y: canvasTextNode.y,\n          fontSize: canvasTextNode.fontSize,\n          letterSpacing: canvasTextNode.letterSpacing,\n          scrollY: canvasTextNode.scrollY,\n          // debug: canvasTextNode.debug,\n        },\n      });\n    }\n  });\n  setMode(curMode);\n  updateStatus();\n}\n\n/**\n * Added offset to the Y position of the text to account for the\n * difference in canvas and SDF text rendering\n */\nconst sdfOffsetY = 6;\n\nfunction getFontProps(fontType: keyof TrFontFaceMap): {\n  fontFamily: string;\n  offsetY: number;\n  textRendererOverride: keyof TextRendererMap;\n} {\n  if (fontType === 'msdf') {\n    return {\n      fontFamily: `${FONT_FAMILY}`,\n      offsetY: sdfOffsetY,\n      textRendererOverride: 'sdf',\n    };\n  } else if (fontType === 'ssdf') {\n    return {\n      fontFamily: `${FONT_FAMILY}-ssdf`,\n      offsetY: sdfOffsetY,\n      textRendererOverride: 'sdf',\n    };\n  }\n  return {\n    fontFamily: `${FONT_FAMILY}`,\n    offsetY: 0,\n    textRendererOverride: 'canvas',\n  };\n}\n"],"names":["FONT_FAMILY","FONT_SIZE","initialMutableProps","x","y","fontFamily","fontSize","color","debug","sdfShaderDebug","Colors","exports","Black","Red","Green","Blue","Magenta","Gray","White","colors","Object","values","text","_0","__async","arguments","_ref","testName","renderer","testRoot","_regeneratorRuntime","mark","_callee","savedState","curMode","moveStep","curColorIdx","modes","initialProps","msdfTextNode","ssdfTextNode","canvasTextNode","statusNode","updateStatus","setMode","mode","length","modeName","alpha","curColor","_updateStatus","concat","scrollY","offsetY","Number","toFixed","letterSpacing","join","loadStorage","getLoremIpsum","__spreadProps","__spreadValues","mutableProps","contain","scrollable","width","settings","appWidth","height","appHeight","createTextNode","getFontProps","zIndex","parent","on","target","_ref2","dimensions","window","addEventListener","e","changedState","metaKey","code","clearStorage","setTimeout","location","reload","saveStorage","_context","stop","sdfOffsetY","fontType","textRendererOverride"],"mappings":"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"}