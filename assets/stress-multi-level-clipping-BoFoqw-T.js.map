{"version":3,"file":"stress-multi-level-clipping-BoFoqw-T.js","sources":["../../tests/stress-multi-level-clipping.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type INode } from '@lightningjs/renderer';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport robotImg from '../assets/robot/robot.png';\n\nconst randomIntBetween = (from: number, to: number) =>\n  Math.floor(Math.random() * (to - from + 1) + from);\n\nexport default async function ({\n  renderer,\n  testRoot,\n  perfMultiplier,\n}: ExampleSettings) {\n  // create nodes\n  const numOuterNodes = 100 * perfMultiplier;\n  const nodes: INode[] = [];\n  let totalNodes = 0;\n\n  const bg = renderer.createNode({\n    width: 1920,\n    height: 1080,\n    color: 0xff1e293b,\n    parent: testRoot,\n  });\n\n  for (let i = 0; i < numOuterNodes; i++) {\n    const container = renderer.createNode({\n      x: Math.random() * 1920,\n      y: Math.random() * 1080,\n      width: 100,\n      height: 100,\n      clipping: true,\n      parent: bg,\n    });\n    const node = renderer.createNode({\n      mount: 0.5,\n      x: 50,\n      y: 50,\n      width: 200,\n      height: 200,\n      src: robotImg,\n      parent: container,\n    });\n\n    nodes.push(container);\n    totalNodes += 2;\n  }\n\n  console.log(\n    `Created ${numOuterNodes} clipping outer nodes with an image node nested inside. Total nodes: ${totalNodes}`,\n  );\n\n  // create animations\n  const animate = () => {\n    nodes.forEach((node) => {\n      node\n        .animate(\n          {\n            x: randomIntBetween(20, 1740),\n            y: randomIntBetween(20, 900),\n          },\n          {\n            duration: 3000,\n            easing: 'ease-out',\n            loop: true,\n            stopMethod: 'reverse',\n          },\n        )\n        .start();\n    });\n  };\n\n  animate();\n}\n"],"names":[],"mappings":";AAuBA,MAAM,mBAAmB,CAAC,MAAc,OACtC,KAAK,MAAM,KAAK,OAAA,KAAY,KAAK,OAAO,KAAK,IAAI;AAEpB,eAAA,yBAAA;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AACF,GAAoB;AAElB,QAAM,gBAAgB,MAAM;AAC5B,QAAM,QAAiB,CAAA;AACvB,MAAI,aAAa;AAEX,QAAA,KAAK,SAAS,WAAW;AAAA,IAC7B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,EAAA,CACT;AAED,WAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AAChC,UAAA,YAAY,SAAS,WAAW;AAAA,MACpC,GAAG,KAAK,OAAA,IAAW;AAAA,MACnB,GAAG,KAAK,OAAA,IAAW;AAAA,MACnB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,QAAQ;AAAA,IAAA,CACT;AACY,aAAS,WAAW;AAAA,MAC/B,OAAO;AAAA,MACP,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,QAAQ;AAAA,IAAA,CACT;AAED,UAAM,KAAK,SAAS;AACN,kBAAA;AAAA,EAChB;AAEQ,UAAA;AAAA,IACN,WAAW,aAAa,wEAAwE,UAAU;AAAA,EAAA;AAI5G,QAAM,UAAU,MAAM;AACd,UAAA,QAAQ,CAAC,SAAS;AAEnB,WAAA;AAAA,QACC;AAAA,UACE,GAAG,iBAAiB,IAAI,IAAI;AAAA,UAC5B,GAAG,iBAAiB,IAAI,GAAG;AAAA,QAC7B;AAAA,QACA;AAAA,UACE,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,YAAY;AAAA,QACd;AAAA,QAED,MAAM;AAAA,IAAA,CACV;AAAA,EAAA;AAGK;AACV;"}